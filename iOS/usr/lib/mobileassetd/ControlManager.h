//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class DownloadManager, MADAnalyticsManager, NSDictionary, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface ControlManager : NSObject
{
    _Bool _beforeFirstUnlock;
    _Bool _reclaimSpace;
    int _notifyToken;
    int _reclaimUrgency;
    DownloadManager *_downloadManager;
    MADAnalyticsManager *_analytics;
    NSMutableDictionary *_assetTypeDescriptors;
    NSObject<OS_dispatch_queue> *_metaDataQueue;
    NSObject<OS_dispatch_queue> *_assetQueue;
    NSObject<OS_dispatch_queue> *_analyticsQueue;
    NSDictionary *_managedPrefs;
    long long _targetingPurgeAmount;
    NSString *_targetingAmountString;
    NSString *_reclaimUrgencyName;
    NSString *_reclaimVolume;
    NSString *_cacheDeleteOperationName;
    double _currentTimeInSeconds;
    double _preciousNumberOfSeconds;
    double _defaultNumberOfSeconds;
    double _deltaToCurrentTimeSeconds;
    NSString *_garbageCollectionAlterAssetType;
    NSString *_garbageCollectionAlterBehavior;
    NSDictionary *_unlockedAutoAssetDescriptors;
    NSDictionary *_lockedOverridableAutoAssetDescriptors;
    NSDictionary *_lockedNeverRemoveAutoAssetDescriptors;
    NSDictionary *_stagedAutoAssetDescriptors;
    long long _reclaimV2AssetSpace;
    long long _reclaimV2AssetCount;
    long long _reclaimUnlockedAutoAssetSpace;
    long long _reclaimUnlockedAutoAssetCount;
    long long _reclaimLockedOverridableAutoAssetSpace;
    long long _reclaimLockedOverridableAutoAssetCount;
    long long _reclaimLockedNeverRemoveAutoAssetSpace;
    long long _reclaimLockedNeverRemoveAutoAssetCount;
    long long _reclaimStagedAutoAssetSpace;
    long long _reclaimStagedAutoAssetCount;
    long long _reclaimMetadataBlockedSpace;
    long long _reclaimMetadataBlockedCount;
}

+ (id)getStringFromXpcMessage:(id)arg1 forKey:(const char *)arg2;
- (void).cxx_destruct;
@property(nonatomic) long long reclaimMetadataBlockedCount; // @synthesize reclaimMetadataBlockedCount=_reclaimMetadataBlockedCount;
@property(nonatomic) long long reclaimMetadataBlockedSpace; // @synthesize reclaimMetadataBlockedSpace=_reclaimMetadataBlockedSpace;
@property(nonatomic) long long reclaimStagedAutoAssetCount; // @synthesize reclaimStagedAutoAssetCount=_reclaimStagedAutoAssetCount;
@property(nonatomic) long long reclaimStagedAutoAssetSpace; // @synthesize reclaimStagedAutoAssetSpace=_reclaimStagedAutoAssetSpace;
@property(nonatomic) long long reclaimLockedNeverRemoveAutoAssetCount; // @synthesize reclaimLockedNeverRemoveAutoAssetCount=_reclaimLockedNeverRemoveAutoAssetCount;
@property(nonatomic) long long reclaimLockedNeverRemoveAutoAssetSpace; // @synthesize reclaimLockedNeverRemoveAutoAssetSpace=_reclaimLockedNeverRemoveAutoAssetSpace;
@property(nonatomic) long long reclaimLockedOverridableAutoAssetCount; // @synthesize reclaimLockedOverridableAutoAssetCount=_reclaimLockedOverridableAutoAssetCount;
@property(nonatomic) long long reclaimLockedOverridableAutoAssetSpace; // @synthesize reclaimLockedOverridableAutoAssetSpace=_reclaimLockedOverridableAutoAssetSpace;
@property(nonatomic) long long reclaimUnlockedAutoAssetCount; // @synthesize reclaimUnlockedAutoAssetCount=_reclaimUnlockedAutoAssetCount;
@property(nonatomic) long long reclaimUnlockedAutoAssetSpace; // @synthesize reclaimUnlockedAutoAssetSpace=_reclaimUnlockedAutoAssetSpace;
@property(nonatomic) long long reclaimV2AssetCount; // @synthesize reclaimV2AssetCount=_reclaimV2AssetCount;
@property(nonatomic) long long reclaimV2AssetSpace; // @synthesize reclaimV2AssetSpace=_reclaimV2AssetSpace;
@property(retain, nonatomic) NSDictionary *stagedAutoAssetDescriptors; // @synthesize stagedAutoAssetDescriptors=_stagedAutoAssetDescriptors;
@property(retain, nonatomic) NSDictionary *lockedNeverRemoveAutoAssetDescriptors; // @synthesize lockedNeverRemoveAutoAssetDescriptors=_lockedNeverRemoveAutoAssetDescriptors;
@property(retain, nonatomic) NSDictionary *lockedOverridableAutoAssetDescriptors; // @synthesize lockedOverridableAutoAssetDescriptors=_lockedOverridableAutoAssetDescriptors;
@property(retain, nonatomic) NSDictionary *unlockedAutoAssetDescriptors; // @synthesize unlockedAutoAssetDescriptors=_unlockedAutoAssetDescriptors;
@property(retain, nonatomic) NSString *garbageCollectionAlterBehavior; // @synthesize garbageCollectionAlterBehavior=_garbageCollectionAlterBehavior;
@property(retain, nonatomic) NSString *garbageCollectionAlterAssetType; // @synthesize garbageCollectionAlterAssetType=_garbageCollectionAlterAssetType;
@property(nonatomic) double deltaToCurrentTimeSeconds; // @synthesize deltaToCurrentTimeSeconds=_deltaToCurrentTimeSeconds;
@property(nonatomic) double defaultNumberOfSeconds; // @synthesize defaultNumberOfSeconds=_defaultNumberOfSeconds;
@property(nonatomic) double preciousNumberOfSeconds; // @synthesize preciousNumberOfSeconds=_preciousNumberOfSeconds;
@property(nonatomic) double currentTimeInSeconds; // @synthesize currentTimeInSeconds=_currentTimeInSeconds;
@property(retain, nonatomic) NSString *cacheDeleteOperationName; // @synthesize cacheDeleteOperationName=_cacheDeleteOperationName;
@property(retain, nonatomic) NSString *reclaimVolume; // @synthesize reclaimVolume=_reclaimVolume;
@property(retain, nonatomic) NSString *reclaimUrgencyName; // @synthesize reclaimUrgencyName=_reclaimUrgencyName;
@property(nonatomic) int reclaimUrgency; // @synthesize reclaimUrgency=_reclaimUrgency;
@property(retain, nonatomic) NSString *targetingAmountString; // @synthesize targetingAmountString=_targetingAmountString;
@property(nonatomic) long long targetingPurgeAmount; // @synthesize targetingPurgeAmount=_targetingPurgeAmount;
@property(nonatomic) _Bool reclaimSpace; // @synthesize reclaimSpace=_reclaimSpace;
@property(nonatomic) int notifyToken; // @synthesize notifyToken=_notifyToken;
@property(retain, nonatomic) NSDictionary *managedPrefs; // @synthesize managedPrefs=_managedPrefs;
@property(nonatomic) _Bool beforeFirstUnlock; // @synthesize beforeFirstUnlock=_beforeFirstUnlock;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *analyticsQueue; // @synthesize analyticsQueue=_analyticsQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *assetQueue; // @synthesize assetQueue=_assetQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *metaDataQueue; // @synthesize metaDataQueue=_metaDataQueue;
@property(readonly, nonatomic) NSMutableDictionary *assetTypeDescriptors; // @synthesize assetTypeDescriptors=_assetTypeDescriptors;
@property(readonly, nonatomic) MADAnalyticsManager *analytics; // @synthesize analytics=_analytics;
@property(readonly, nonatomic) DownloadManager *downloadManager; // @synthesize downloadManager=_downloadManager;
- (void)activityNotification:(id)arg1 ofStatusChange:(unsigned long long)arg2 withReason:(id)arg3;
- (void)handleUpdateMABrain:(id)arg1 message:(id)arg2 clientName:(id)arg3;
- (void)handleGetMABrainInfo:(id)arg1 message:(id)arg2 clientName:(id)arg3;
- (void)moveAssetIntoRepo:(id)arg1 forType:(id)arg2 forAsset:(id)arg3 cleanUp:(id)arg4 with:(id)arg5;
- (void)writeJsonDictionaryToFile:(id)arg1 to:(id)arg2 with:(id)arg3;
- (void)writeDictionaryToFile:(id)arg1 to:(id)arg2 with:(id)arg3;
- (long long)updateLastFetchedDate:(id)arg1 assetType:(id)arg2 withPurpose:(id)arg3 with:(id)arg4;
- (void)setServerConnectionHandler:(id)arg1 with:(id)arg2 and:(id)arg3;
- (id)associateOptionalFields:(long long)arg1 fromRequest:(id)arg2 toCommandRequest:(id)arg3 forCommandTracker:(id)arg4;
- (id)associateRequiredFields:(long long)arg1 fromRequest:(id)arg2 toCommandRequest:(id)arg3 forCommandTracker:(id)arg4;
- (_Bool)associateFieldsFromRequest:(id)arg1 withCommandTracker:(id)arg2;
- (void)handleClientConnection:(id)arg1 on:(id)arg2;
- (void)handleClientConnection:(id)arg1 usingDispatchQueue:(id)arg2;
- (void)handleClientCommand:(id)arg1;
- (void)handleCommandGarbageCollect:(id)arg1;
- (void)handleCommandDumpClidentUsage:(id)arg1;
- (void)handleCommandDumpCodeCoverage:(id)arg1;
- (void)handleCommandNSURLStateDump:(id)arg1;
- (void)handleCommandRepairState:(id)arg1;
- (void)handleCommandOverrideGC:(id)arg1;
- (void)handleCommandUpdateClientUsage:(id)arg1;
- (void)handleCommandConfigDownload:(id)arg1;
- (void)handleCommandSpaceCheck:(id)arg1;
- (void)handleCommandRefreshAssetState:(id)arg1;
- (void)handleCommandGetSandboxExtension:(id)arg1;
- (void)handleCommandPurgeAsset:(id)arg1;
- (void)handleCommandDownloadAsset:(id)arg1;
- (void)handleCommandDownloadMetadata:(id)arg1;
- (void)handleCommandLoadAssetByID:(id)arg1;
- (void)handleCommandCancelCatalogDownload:(id)arg1;
- (void)handleCommandCancelDownload:(id)arg1;
- (void)handleCommandQuerInstalledIDs:(id)arg1;
- (void)handleCommandQueryAssetType:(id)arg1;
- (void)handleCommandPurgeCatalogs:(id)arg1;
- (void)handleCommandPurgeAll:(id)arg1;
- (void)handleCommandCleanV1Assets:(id)arg1;
- (void)handleCommandMigrateAssets:(id)arg1;
- (void)handleCommandServerURLOverride:(id)arg1;
- (void)handleCommandDownloadPMV:(id)arg1;
- (void)handleCommandQueryPMV:(id)arg1;
- (void)handleCommandCancelPMVDownload:(id)arg1;
- (void)handleCommandSetPallasURL:(id)arg1;
- (void)handleCommandSetPallasEnabled:(id)arg1;
- (void)handleCommandSetPallasAudience:(id)arg1;
- (void)handleCommandGetPallasEnabled:(id)arg1;
- (void)handleCommandGetPallasAudience:(id)arg1;
- (void)handleReportingRequest:(id)arg1 message:(id)arg2 clientName:(id)arg3;
- (void)handleMigrateAssetsRequest:(id)arg1 using:(id)arg2 and:(id)arg3;
- (void)handleUpdateClientUsage:(id)arg1 using:(id)arg2 and:(id)arg3 clientName:(id)arg4;
- (void)dumpClientUsage:(id)arg1 using:(id)arg2 and:(id)arg3 clientName:(id)arg4;
- (void)overrideGCValue:(id)arg1 using:(id)arg2 and:(id)arg3 clientName:(id)arg4;
- (void)handleGarbageCollect:(id)arg1 and:(id)arg2;
- (void)purgeAll:(id)arg1 and:(id)arg2 assetTypesList:(id)arg3 clientName:(id)arg4;
- (id)dictionaryWithArrayOfStringValues:(id)arg1 forXpcKey:(const char *)arg2 andLengthKey:(const char *)arg3 failureReason:(id *)arg4;
- (id)dictionaryWithArrayOfStringValues:(id)arg1 forXpcKey:(const char *)arg2 andLengthKey:(const char *)arg3 clientName:(id)arg4;
- (void)purgeCatalogs:(id)arg1 and:(id)arg2 assetTypesList:(id)arg3 clientName:(id)arg4;
- (void)getProductMarketingVersions:(id)arg1 and:(id)arg2 clientName:(id)arg3 assetType:(id)arg4;
- (_Bool)purgeCatalogOfType:(id)arg1 clientName:(id)arg2 withPurpose:(id)arg3;
- (_Bool)purgeAllAssetsOfType:(id)arg1 forPurpose:(id)arg2 clientName:(id)arg3 exceptForAssetIds:(id)arg4;
- (_Bool)purgeAllAssetsInDirectory:(id)arg1 clientName:(id)arg2 exceptForAssetIds:(id)arg3;
- (void)respondToCacheDelete:(_Bool)arg1 targetingPurgeAmount:(long long)arg2 withUrgency:(int)arg3 forVolume:(id)arg4 then:(CDUnknownBlockType)arg5;
- (long long)performCacheDeleteForGroup:(id)arg1 forAssetTypeDir:(id)arg2;
- (long long)performCacheDeleteCollection:(id)arg1 forCollectionType:(long long)arg2 withGarbageCollectionTypes:(id)arg3;
- (long long)performGarbageCollectionOfType:(long long)arg1 forAssetTypeDir:(id)arg2 fromDescriptors:(id)arg3;
- (double)alterSecondsBeforeCollection:(double)arg1 forAssetTypeDir:(id)arg2 determinedDescriptorType:(long long)arg3 fromDescriptors:(id)arg4 isAutoAsset:(_Bool *)arg5 autoAssetDescriptor:(id *)arg6 assetFilesystemSize:(long long *)arg7;
- (id)alterGarbageColletionLevel:(id)arg1 basedOnAssetDirectory:(id)arg2;
- (void)maintainReclaimCountsByCollectionType:(long long)arg1 reclaimAssetSpace:(long long)arg2;
- (id)locateDescriptorForAssetDirectory:(id)arg1 fromDescriptors:(id)arg2;
- (id)chooseDescriptorsOfType:(long long)arg1;
- (long long)garbageCollectionDescriptorType:(id)arg1;
- (id)getAssetAttributes:(id)arg1;
- (void)handleServerUrlOverride:(id)arg1 message:(id)arg2 client:(id)arg3 clientName:(id)arg4;
- (void)handleGetServerUrl:(id)arg1 message:(id)arg2 client:(id)arg3 clientName:(id)arg4;
- (void)handleGetAllowNonUserInitiated:(id)arg1 message:(id)arg2 clientName:(id)arg3;
- (void)handleDataMigrator:(id)arg1 message:(id)arg2 clientName:(id)arg3;
- (void)handleEnsureDataVault:(id)arg1 message:(id)arg2 client:(id)arg3 clientName:(id)arg4;
- (void)setPreferenceKeyAsync:(id)arg1 andValue:(id)arg2 allowNilToClear:(_Bool)arg3 replyUsing:(id)arg4 and:(id)arg5;
- (void)setPreferenceKeySync:(id)arg1 andValue:(id)arg2 allowNilToClear:(_Bool)arg3;
- (void)removeAssetDir:(id)arg1 assetType:(id)arg2 clientName:(id)arg3 using:(id)arg4;
- (long long)removeDirectoryAtPath:(id)arg1 firstRenamingWithExtension:(id)arg2;
- (void)cancelDownload:(id)arg1 using:(id)arg2 for:(id)arg3 assetType:(id)arg4 purpose:(id)arg5 withExtension:(id)arg6;
- (void)handleCoverageDump:(id)arg1 using:(id)arg2;
- (id)newExtractor:(id)arg1 downloadOptions:(id)arg2 sessionID:(id)arg3 error:(id *)arg4;
- (id)hashToString:(id)arg1;
- (void)checkAndInitiateDownloadForAssetType:(id)arg1 message:(id)arg2 forClientName:(id)arg3 usingConnection:(id)arg4 requiringClientExtractor:(_Bool)arg5;
- (_Bool)isAssetInCatalog:(id)arg1 assetId:(id)arg2;
- (_Bool)isAssetInCatalog:(id)arg1 assetId:(id)arg2 withPurpose:(id)arg3;
- (void)getStateOfAsset:(id)arg1 incoming:(id)arg2 assetType:(id)arg3;
- (long long)getStateOfAssetInCatalog:(id)arg1 assetId:(id)arg2 withPurpose:(id)arg3;
- (void)sendStateOfAssetReply:(id)arg1 incoming:(id)arg2 with:(long long)arg3;
- (void)ensureProperDirectoryState;
- (void)removeDownloadsNotRecentlyInFlight:(id)arg1;
- (void)cleanObsoleteSURepo;
- (void)ensureSUDownloadTempDir;
- (id)checkEntitlement:(id)arg1 forAssetTypes:(id)arg2;
- (id)checkEntitlement:(id)arg1 forAssetType:(id)arg2;
- (_Bool)checkEntitlementAndRespondIfErrorForConnection:(id)arg1 usingMessage:(id)arg2 forAssetTypes:(id)arg3 withCommand:(long long)arg4;
- (_Bool)checkEntitlementAndRespondIfErrorForConnection:(id)arg1 usingMessage:(id)arg2 forAssetType:(id)arg3 withCommand:(long long)arg4;
- (_Bool)isEntitledForCommand:(long long)arg1 forConnection:(id)arg2 forAssetType:(id)arg3;
- (_Bool)isAllowlistedForCommand:(long long)arg1;
- (_Bool)isCommandAllowedForAllClientsWithoutAssetType:(long long)arg1;
- (_Bool)isAssetTypeOptionalForCommand:(long long)arg1;
- (_Bool)isAssetTypeRequiredForCommand:(long long)arg1;
- (int)getNotEntitledResultForCommand:(unsigned long long)arg1;
- (_Bool)commandRequiresForcedSoftwareUpdateType:(id)arg1;
- (_Bool)isCommandRequiringForcedSoftwareUpdateType:(long long)arg1;
- (void)handleLoadRequest:(id)arg1 clientName:(id)arg2 connection:(id)arg3 message:(id)arg4;
- (id)decodeXpcObject:(id)arg1 ofClass:(Class)arg2 dataKey:(id)arg3 lengthKey:(id)arg4 decodeClasses:(id)arg5 error:(id *)arg6;
- (void)handleQueryRequest:(id)arg1 clientName:(id)arg2 connection:(id)arg3 message:(id)arg4;
- (void)handlePmvRequest:(id)arg1 clientName:(id)arg2 connection:(id)arg3 message:(id)arg4;
- (void)determineAssets:(id)arg1 clientName:(id)arg2 connection:(id)arg3 downloadingTasks:(id)arg4 message:(id)arg5 resultTypes:(long long)arg6 queryArray:(id)arg7 isForSpecificAsset:(_Bool)arg8 specificAssetId:(id)arg9 specificAllowedDifferences:(id)arg10;
- (void)determineOneAsset:(id)arg1 clientName:(id)arg2 connection:(id)arg3 message:(id)arg4 specificAssetId:(id)arg5 specificAllowedDifferences:(id)arg6;
- (void)determineAssets:(id)arg1 clientName:(id)arg2 connection:(id)arg3 downloadingTasks:(id)arg4 message:(id)arg5 resultTypes:(long long)arg6 queryArray:(id)arg7;
- (void)determinePmv:(id)arg1 clientName:(id)arg2 connection:(id)arg3 message:(id)arg4 queryDict:(id)arg5;
- (_Bool)categorizeAssetResults:(id)arg1 fromCatalogIds:(id)arg2 repositoryIds:(id)arg3 andPreinstalledIds:(id)arg4 intoServerOnlyIds:(id *)arg5 installedCatalogIds:(id *)arg6 andObsoleteIds:(id *)arg7;
- (_Bool)loadCatalog:(id)arg1 catalogAssets:(id *)arg2 assetIds:(id *)arg3 postedDate:(id *)arg4 lastFetchDate:(id *)arg5 catalogInfo:(id *)arg6;
- (_Bool)loadCatalog:(id)arg1 catalogAssets:(id *)arg2 assetIds:(id *)arg3 postedDate:(id *)arg4 lastFetchDate:(id *)arg5 catalogInfo:(id *)arg6 withPurpose:(id)arg7;
- (_Bool)loadRepository:(id)arg1 localIds:(id *)arg2;
- (_Bool)loadRepository:(id)arg1 localIds:(id *)arg2 withPurpose:(id)arg3;
- (_Bool)returnTypeIncludesServerOnly:(long long)arg1;
- (_Bool)returnTypeIncludesInstalledInCatalog:(long long)arg1;
- (_Bool)returnTypeIncludesObsolete:(long long)arg1 andHasCatalog:(_Bool)arg2;
- (id)applyPmvQuery:(id)arg1 queryDict:(id)arg2 explanation:(id *)arg3;
- (id)determineBestMatchFor:(id)arg1 absoluteId:(id)arg2 allowedDifferences:(id)arg3 fromResults:(id)arg4 isExact:(_Bool *)arg5 candidates:(unsigned long long *)arg6 bestMatch:(id *)arg7 differencesFound:(id *)arg8 missedTypeAndAssetIdMatch:(id *)arg9;
- (_Bool)hasOnlyAllowedDifferencesFrom:(id)arg1 inAttributes:(id)arg2 assetId:(id)arg3 assetType:(id)arg4 allowed:(id)arg5 foundAbsoluteId:(id *)arg6 foundDiff:(id *)arg7;
- (_Bool)returnTypeIncludesPreinstalled:(long long)arg1;
- (id)getCatalogLastModifiedDate:(id)arg1 ifFromXmlUrl:(id)arg2 withPurpose:(id)arg3;
- (id)getMetadataFromCatalog:(id)arg1 key:(id)arg2 withPurpose:(id)arg3;
- (id)newCatalogLoad:(id)arg1;
- (id)newCatalogLoad:(id)arg1 withPurpose:(id)arg2;
- (void)sendQueryResults:(id)arg1 assetType:(id)arg2 purpose:(id)arg3 catalogInfo:(id)arg4 returnTypes:(long long)arg5 postedDate:(id)arg6 lastFetchedDate:(id)arg7 result:(long long)arg8 isFiltered:(_Bool)arg9 requireSpecificAsset:(_Bool)arg10 connection:(id)arg11 message:(id)arg12 clientName:(id)arg13;
- (void)sendPmvResults:(id)arg1 pmvInfo:(id)arg2 postedDate:(id)arg3 lastFetchedDate:(id)arg4 result:(long long)arg5 connection:(id)arg6 message:(id)arg7;
- (id)init;
- (void)loadAssetTypeDescriptors;
- (void)applyDataVaults;
- (void)removeAllObsoletedV1Assets;
- (id)newPrefsCopyValueForKey:(id)arg1;
- (void)loadManagedPrefs;
- (id)convertToArchiveable:(id)arg1 incoming:(id)arg2 overrideState:(long long)arg3 filterToIds:(id)arg4 withPurpose:(id)arg5;

@end

