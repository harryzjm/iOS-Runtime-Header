//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE, NSLocale, NSString, NSTimeZone;

__attribute__((visibility("hidden")))
@interface _NSSwiftCalendar
{
    MISSING_TYPE *_lock;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
- (_Bool)isDateInYesterday:(id)arg1;
- (_Bool)isDateInTomorrow:(id)arg1;
- (_Bool)isDateInToday:(id)arg1;
- (_Bool)isDate:(id)arg1 inSameDayAsDate:(id)arg2;
- (_Bool)isDate:(id)arg1 equalToDate:(id)arg2 toUnitGranularity:(unsigned long long)arg3;
- (id)dateWithEra:(long long)arg1 yearForWeekOfYear:(long long)arg2 weekOfYear:(long long)arg3 weekday:(long long)arg4 hour:(long long)arg5 minute:(long long)arg6 second:(long long)arg7 nanosecond:(long long)arg8;
- (id)dateWithEra:(long long)arg1 year:(long long)arg2 month:(long long)arg3 day:(long long)arg4 hour:(long long)arg5 minute:(long long)arg6 second:(long long)arg7 nanosecond:(long long)arg8;
- (id)dateBySettingUnit:(unsigned long long)arg1 value:(long long)arg2 ofDate:(id)arg3 options:(unsigned long long)arg4;
- (id)dateBySettingHour:(long long)arg1 minute:(long long)arg2 second:(long long)arg3 ofDate:(id)arg4 options:(unsigned long long)arg5;
- (id)dateByAddingUnit:(unsigned long long)arg1 value:(long long)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
- (id)nextDateAfterDate:(id)arg1 matchingUnit:(unsigned long long)arg2 value:(long long)arg3 options:(unsigned long long)arg4;
- (id)nextDateAfterDate:(id)arg1 matchingHour:(long long)arg2 minute:(long long)arg3 second:(long long)arg4 options:(unsigned long long)arg5;
- (id)nextDateAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned long long)arg3;
- (id)startOfDayForDate:(id)arg1;
- (_Bool)rangeOfWeekendStartDate:(id *)arg1 interval:(double *)arg2 containingDate:(id)arg3;
- (void)getHour:(long long *)arg1 minute:(long long *)arg2 second:(long long *)arg3 nanosecond:(long long *)arg4 fromDate:(id)arg5;
- (void)getEra:(long long *)arg1 yearForWeekOfYear:(long long *)arg2 weekOfYear:(long long *)arg3 weekday:(long long *)arg4 fromDate:(id)arg5;
- (void)getEra:(long long *)arg1 year:(long long *)arg2 month:(long long *)arg3 day:(long long *)arg4 fromDate:(id)arg5;
- (id)components:(unsigned long long)arg1 fromDateComponents:(id)arg2 toDateComponents:(id)arg3 options:(unsigned long long)arg4;
- (_Bool)date:(id)arg1 matchesComponents:(id)arg2;
- (long long)compareDate:(id)arg1 toDate:(id)arg2 toUnitGranularity:(unsigned long long)arg3;
- (void)_enumerateDatesStartingAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (_Bool)nextWeekendStartDate:(id *)arg1 interval:(double *)arg2 options:(unsigned long long)arg3 afterDate:(id)arg4;
- (_Bool)isDateInWeekend:(id)arg1;
- (id)_componentsInTimeZone:(id)arg1 fromDate:(id)arg2;
- (id)_components:(unsigned long long)arg1 fromDate:(id)arg2;
- (id)components:(unsigned long long)arg1 fromDate:(id)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
- (id)dateByAddingComponents:(id)arg1 toDate:(id)arg2 options:(unsigned long long)arg3;
- (long long)component:(unsigned long long)arg1 fromDate:(id)arg2;
- (id)_dateFromComponents:(id)arg1;
- (_Bool)rangeOfUnit:(unsigned long long)arg1 startDate:(id *)arg2 interval:(double *)arg3 forDate:(id)arg4;
- (long long)ordinalityOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)maximumRangeOfUnit:(unsigned long long)arg1;
- (struct _NSRange)minimumRangeOfUnit:(unsigned long long)arg1;
@property(nonatomic) long long minimumDaysInFirstWeek;
@property(nonatomic) long long firstWeekday;
@property(nonatomic, copy) NSTimeZone *timeZone;
@property(nonatomic, copy) NSLocale *locale;
@property(nonatomic, readonly) NSString *calendarIdentifier;
@property(nonatomic, readonly) NSString *debugDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(nonatomic, readonly) Class classForCoder;
- (id)initWithCheckedCalendarIdentifier:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(void *)arg1;

@end

