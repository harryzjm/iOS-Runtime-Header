//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <PencilKit/PKInputProvider-Protocol.h>

@class PKStroke;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface PKStrokeGenerator : NSObject <PKInputProvider>
{
    double _latestNonPredictedTimestamp;
    vector_59e02562 _drawPoints;
    struct vector<_PKStrokePoint, std::allocator<_PKStrokePoint>> _outputPoints;
    long long _outputImmutableCount;
    _Bool _inputHasChanged;
    struct _PKStrokePoint _baseValues;
    NSObject<OS_dispatch_queue> *_inputQueue;
    PKStroke *_currentStroke;
    long long _currentInputType;
    unsigned long long _currentActiveInputProperties;
    long long _immutableCount;
    long long _missedUpdates;
    vector_59e02562 _updatedDrawPoints;
    _Bool _drawingEndedButNotFinished;
    NSObject<OS_dispatch_semaphore> *_drawingWaitForFinishSemaphore;
    _Bool _keepPredictedTouchesAtEndOfStroke;
    _Bool _useRuler;
    _Bool _isSnappedToRulerTopSide;
    _Bool _canSnapToRuler;
    _Bool _isSnappedToRuler;
    double _rulerWidth;
    double _strokeMaxForce;
    NSObject<OS_dispatch_queue> *_outputQueue;
    double _touchSensitivity;
    void *_inputProvider;
    void *_pixelSmoothingFilter;
    void *_pointReductionFilter;
    void *_startHookFilter;
    void *_endHookFilter;
    void *_velocityFilter;
    void *_inputSmoother;
    void *_inputToOutputFilter;
    void *_startCapFilter;
    void *_azimuthFilter;
    void *_endCapFilter;
    void *_rulerExtremaFilter;
    void *_estimatedAltitudeAndAzimuthFilter;
    void *_compressionFilter;
    void *_decompressionFilter;
    double _eraserIndicatorAlpha;
    double _inputScale;
    struct CGPoint _lastPoint;
    struct CGAffineTransform _rulerTransform;
}

+ (vector_59e02562)inputPointsFromPath:(struct CGPath *)arg1 maxSegmentLength:(double)arg2 velocityForDistanceFunction:(CDUnknownBlockType)arg3;
+ (vector_59e02562)inputPointsFromPoints:(const void *)arg1 velocityForDistanceFunction:(CDUnknownBlockType)arg2;
+ (void)initialize;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) double inputScale; // @synthesize inputScale=_inputScale;
@property double eraserIndicatorAlpha; // @synthesize eraserIndicatorAlpha=_eraserIndicatorAlpha;
@property _Bool isSnappedToRuler; // @synthesize isSnappedToRuler=_isSnappedToRuler;
@property(nonatomic) void *decompressionFilter; // @synthesize decompressionFilter=_decompressionFilter;
@property(nonatomic) void *compressionFilter; // @synthesize compressionFilter=_compressionFilter;
@property(nonatomic) void *estimatedAltitudeAndAzimuthFilter; // @synthesize estimatedAltitudeAndAzimuthFilter=_estimatedAltitudeAndAzimuthFilter;
@property(nonatomic) void *rulerExtremaFilter; // @synthesize rulerExtremaFilter=_rulerExtremaFilter;
@property(nonatomic) void *endCapFilter; // @synthesize endCapFilter=_endCapFilter;
@property(nonatomic) void *azimuthFilter; // @synthesize azimuthFilter=_azimuthFilter;
@property(nonatomic) void *startCapFilter; // @synthesize startCapFilter=_startCapFilter;
@property(nonatomic) void *inputToOutputFilter; // @synthesize inputToOutputFilter=_inputToOutputFilter;
@property(nonatomic) void *inputSmoother; // @synthesize inputSmoother=_inputSmoother;
@property(nonatomic) void *velocityFilter; // @synthesize velocityFilter=_velocityFilter;
@property(nonatomic) void *endHookFilter; // @synthesize endHookFilter=_endHookFilter;
@property(nonatomic) void *startHookFilter; // @synthesize startHookFilter=_startHookFilter;
@property(nonatomic) void *pointReductionFilter; // @synthesize pointReductionFilter=_pointReductionFilter;
@property(nonatomic) void *pixelSmoothingFilter; // @synthesize pixelSmoothingFilter=_pixelSmoothingFilter;
@property(nonatomic) void *inputProvider; // @synthesize inputProvider=_inputProvider;
@property(nonatomic) double touchSensitivity; // @synthesize touchSensitivity=_touchSensitivity;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *outputQueue; // @synthesize outputQueue=_outputQueue;
@property struct CGPoint lastPoint; // @synthesize lastPoint=_lastPoint;
@property(nonatomic) double strokeMaxForce; // @synthesize strokeMaxForce=_strokeMaxForce;
@property(nonatomic) _Bool canSnapToRuler; // @synthesize canSnapToRuler=_canSnapToRuler;
@property(nonatomic) _Bool isSnappedToRulerTopSide; // @synthesize isSnappedToRulerTopSide=_isSnappedToRulerTopSide;
@property(nonatomic) double rulerWidth; // @synthesize rulerWidth=_rulerWidth;
@property(nonatomic) _Bool useRuler; // @synthesize useRuler=_useRuler;
@property(nonatomic) struct CGAffineTransform rulerTransform; // @synthesize rulerTransform=_rulerTransform;
- (id)strokeFromLineSegments:(const void *)arg1 maxSegmentLength:(double)arg2 ink:(id)arg3 inputScale:(double)arg4 strokeClass:(Class)arg5;
- (id)strokeFromPoints:(const void *)arg1 sourceStroke:(id)arg2 inputScale:(double)arg3 averageInputPoint:(CDStruct_6422aa5d)arg4;
- (id)strokeFromPoints:(struct CGPoint *)arg1 count:(unsigned long long)arg2 ink:(id)arg3 inputScale:(double)arg4 strokeClass:(Class)arg5;
- (id)strokeFromPath:(struct CGPath *)arg1 ink:(id)arg2 inputScale:(double)arg3 maxSegmentLength:(double)arg4 velocityForDistanceFunction:(CDUnknownBlockType)arg5 strokeClass:(Class)arg6;
- (id)strokeFromInputPoints:(void *)arg1 inputType:(long long)arg2 ink:(id)arg3 inputScale:(double)arg4 strokeClass:(Class)arg5;
- (void)drawingCancelledWithCompletion:(CDUnknownBlockType)arg1;
- (void)drawingEndedWithCompletion:(CDUnknownBlockType)arg1;
- (void)_drawingAddPoint:(CDStruct_6422aa5d)arg1;
- (void)closeStroke;
- (void)addPoint:(CDStruct_6422aa5d)arg1;
- (void)addPoints:(vector_59e02562)arg1;
- (double)latestTimestamp;
- (double)latestNonPredictedTimestamp;
- (void)_updatePredictedTouches;
- (void)_removePredictedTouches;
- (void)updateImmutableCount;
- (void)drawingUpdateAllPointsDidTimeoutWithStrokeUUID:(id)arg1;
- (void)drawingUpdateAllPoints;
- (void)drawingUpdatePoint:(CDStruct_6422aa5d)arg1;
- (id)_newStrokeWithCurrentDataAndStrokeDataUUID:(id)arg1;
- (id)newStrokeWithCurrentDataCopy;
- (id)newStrokeWithCurrentData;
- (long long)fetchFilteredPointsFromIndex:(long long)arg1 accessBlock:(CDUnknownBlockType)arg2;
- (struct _PKStrokePoint)outputPoint:(CDStruct_6422aa5d)arg1 baseValues:(struct _PKStrokePoint)arg2;
- (struct _PKStrokePoint)outputCurrentStrokePoint:(CDStruct_6422aa5d)arg1;
- (void)reset;
- (unsigned long long)copyInputUpdatedRangeFromIndex:(unsigned long long)arg1 into:(void *)arg2;
- (void *)getInputUpdatedRangeFromIndex:(inout unsigned long long *)arg1;
- (void *)getUpdatedRangeFromIndex:(inout unsigned long long *)arg1;
- (void *)outputFilter;
@property(readonly) _Bool lastPointIsMasked;
- (void)updateRulerSnapping;
- (struct CGPoint)snapPointToRuler:(struct CGPoint)arg1;
- (void)maskToRuler;
- (void)snapToRuler;
- (_Bool)shouldSnapPointToRuler:(struct CGPoint)arg1;
- (double)distanceToRulerCenter:(struct CGPoint)arg1;
- (struct CGPoint)getRulerSnapLineOriginAndTangent:(struct CGPoint *)arg1 andNormal:(struct CGPoint *)arg2;
- (void)allowSnappingToRuler:(struct CGAffineTransform)arg1 width:(double)arg2;
- (void)drawingBeganWithStroke:(id)arg1 inputType:(long long)arg2 activeInputProperties:(unsigned long long)arg3 inputScale:(double)arg4 start:(CDUnknownBlockType)arg5;
@property(readonly, nonatomic) unsigned long long activeInputProperties;
@property(readonly, nonatomic) long long inputType; // @dynamic inputType;
- (void)dealloc;
- (id)init;

@end

