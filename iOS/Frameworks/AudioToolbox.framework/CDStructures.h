//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NSObject;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AVHapticPlayerFixedParameter {
    unsigned long long type;
    float value;
};

struct AddressReserve {
    void *_field1;
    unsigned int _field2;
    void *_field3;
    unsigned int _field4;
    int _field5;
};

struct AggregateState;

struct HapticSharedMemory {
    CDUnknownFunctionPointerType *_vptr$SharableMemoryBase;
    _Bool mIsOwner;
    _Bool mWasMapped;
    unsigned long long mSize;
    void *mBuffer;
    unsigned int mPort;
    int mFileDesc;
    int mSerial;
    NSObject *mXPCObject;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct map<unsigned long, SequenceEntry *, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, SequenceEntry *>>> {
    struct __tree<std::__1::__value_type<unsigned long, SequenceEntry *>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, SequenceEntry *>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, SequenceEntry *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, SequenceEntry *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, SequenceEntry *>, std::__1::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct reactor<DefaultDeviceAggregate>;

struct shared_ptr<caulk::reactor<DefaultDeviceAggregate>> {
    struct reactor<DefaultDeviceAggregate> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const AggregateState> {
    struct AggregateState *_field1;
    struct __shared_weak_count *_field2;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct shared_ptr<caulk::reactor<DefaultDeviceAggregate>> {
    struct reactor<DefaultDeviceAggregate> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_57118bb5;

typedef struct shared_ptr<const AggregateState> {
    struct AggregateState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_4c923a7b;

