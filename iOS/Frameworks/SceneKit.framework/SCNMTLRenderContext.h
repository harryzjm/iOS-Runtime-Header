//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CAMetalLayer, MISSING_TYPE, MTLRenderPassDescriptor, NSMutableArray, NSMutableDictionary, NSString, SCNMTLMesh, SCNMTLMeshElement, SCNMTLRenderPipeline, SCNMTLResourceManager, SCNMTLShadable;
@protocol CAMetalDrawable, MTLBuffer, MTLCommandBuffer, MTLCommandQueue, MTLDepthStencilState, MTLDevice, MTLRenderCommandEncoder, MTLSamplerState, MTLTexture, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore, SCNMTLRenderContextCommandBufferStatusMonitor, SCNMTLRenderContextResourceManagerMonitor;

__attribute__((visibility("hidden")))
@interface SCNMTLRenderContext : NSObject
{
    long long _currentFrameIndex;
    struct __C3DEngineStats *__engineStats;
    double _superSamplingFactor;
    struct SCNMatrix4 _screenTransform;
    long long _sampleCount;
    _Bool _needSuperSampling;
    SCNMTLResourceManager *_resourceManager;
    id <MTLDevice> _device;
    _Bool _isValidationEnabled;
    int _profile;
    unsigned int _features;
    struct __C3DEngineContext *_engineContext;
    unsigned int _wantsWideGamut:1;
    unsigned int _isOpaque:1;
    unsigned int _disableLinearRendering:1;
    unsigned int _enableARMode:1;
    unsigned int _shouldDelegateARCompositing:1;
    unsigned int _useFunctionConstants:1;
    unsigned int _reverseZ:1;
    unsigned int _forceAsyncShaderCompilation:1;
    id <MTLCommandQueue> _ownedCommandQueue;
    NSObject<OS_dispatch_semaphore> *_inFlightSemaphore;
    struct atomic<int> _pendingGPUFrameCount;
    id <MTLTexture> _textureTarget;
    CAMetalLayer *_layerTarget;
    id <CAMetalDrawable> _drawable;
    float _targetedFrameInterval;
    _Bool _shouldPresentAfterMinimumDuration;
    _Bool _shouldPresentWithTransaction;
    MTLRenderPassDescriptor *_currentRenderPassDescriptor;
    MTLRenderPassDescriptor *_originalRenderPassDescriptor;
    MISSING_TYPE *_renderSize;
    id <MTLCommandBuffer> _currentCommandBuffer;
    struct SCNMTLRenderCommandEncoder *_renderEncoder;
    id <MTLCommandBuffer> _resourceCommandBuffer;
    struct SCNMTLBlitCommandEncoder _resourceBlitEncoder;
    struct SCNMTLComputeCommandEncoder _resourceComputeEncoder;
    struct {
        unsigned char renderSliceIndex;
        unsigned char eyeCount;
        unsigned char renderMode;
        unsigned char multiVertexOutputStreamGenerator;
        _Bool isMainPass;
        _Bool isFinalTechnique;
    } _renderPassParameters;
    CDStruct_21854d8c _currentStreamBufferIndices;
    struct SCNMTLBufferPool *_volatileBufferPools[3];
    void *_frameVolatileBufferPool;
    NSMutableArray *_volatileMeshes;
    NSMutableArray *_bufferPool;
    NSMutableArray *_usedVolatileMeshElements;
    NSMutableArray *_freeVolatileMeshElements;
    struct SCNMTLBufferPool *_constantBufferPools[3];
    void *_frameConstantBufferPool;
    void *_frameTexturePool;
    id <MTLDepthStencilState> _defaultDepthStencilState;
    id <MTLSamplerState> _defaultSamplerState;
    struct __C3DFXMetalProgram *_background2DProgram[3];
    struct __C3DFXMetalProgram *_backgroundCubeProgram[3];
    struct __C3DFXMetalProgram *_backgroundVideoProgram;
    struct __C3DFXMetalProgram *_backgroundVideoAlpha0Program;
    struct __C3DRasterizerStates *_backgroundRasterizerStates;
    double _initialTime;
    NSObject<OS_dispatch_queue> *_resourceQueue;
    NSObject<OS_dispatch_group> *_resourceGroup;
    id <MTLBuffer> _shadowKernelBuffer;
    struct {
        struct __C3DFXPassInstance *passInstance;
        struct __C3DLightingSystem *lightingSystem;
        struct __C3DDynamicBatchingSystem *dynamicBatchingSystem;
        struct __C3DFXPass *pass;
        void *renderGraphPass;
        _Bool passRequiresLighting;
        struct __C3DTransformTree *transformTree;
    } _processingContext;
    unsigned int _seed;
    struct SCNSceneBuffer _frameUniforms[6];
    CDStruct_deec94a8 _sceneUniforms;
    struct {
        id <MTLBuffer> buffer;
        unsigned long long offset;
        unsigned long long size;
        id <MTLTexture> shadowMaps[256];
        id <MTLTexture> textureMaps[256];
        id <MTLSamplerState> samplerStates[256];
    } _lightsData;
    struct {
        struct float4x4 modelTransform;
        struct float4x4 lastFrameModelTransform;
        struct float4x4 normalTransforms[6];
        struct float4x4 modelViewTransforms[6];
        struct float4x4 modelViewProjectionTransforms[6];
        struct float2x3 boundingBox;
        struct float2x3 worldBoundingBox;
        struct __C3DNode *instanceNode;
        unsigned int flags;
        unsigned int *probeCacheIndex;
    } _nodeUniforms;
    struct {
        struct {
            unsigned char lights[8];
        } currentLightingSet;
        id <MTLTexture> currentShadowMaps[8];
        id <MTLTexture> currentGoboMaps[8];
        struct unordered_map<unsigned long long, SCNMTLLightSetData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, SCNMTLLightSetData>>> frameLightingSetDatas;
        unsigned long long currentLightingHashKey;
        struct {
            long long count;
            struct __C3DLight *lights[8];
            struct __C3DLightRuntimeData *lightsData[8];
        } currentLightingDesc;
        CDStruct_14d5dc5e currentLightingSpace;
        CDStruct_14d5dc5e currentLightingSpaceShadow;
        _Bool needLightingSpaceTransformation;
        struct SCNMTLClusterSystem clusterSystem;
        struct Info clusterInfo;
        id <MTLTexture> reflectionProbesTextureArray;
    } _lighting;
    struct Cache {
        struct __C3DRasterizerStates *rasterizerStates;
        struct __C3DMesh *mesh;
        SCNMTLMesh *metalMesh;
        struct __C3DMeshElement *meshElement;
        SCNMTLMeshElement *metalMeshElement;
        struct __C3DFXMetalProgram *program;
        struct __C3DMaterial *material;
        struct __C3DGeometry *geometry;
        SCNMTLShadable *metalShadable;
        struct __C3DEffectCommonProfile *commonProfile;
        struct __C3DBlendStates *blendStates;
        unsigned char colorBufferWriteMask;
        unsigned char primitiveTopologyClass;
        struct __C3DNode *node;
        unsigned long long vertexDescriptorHash;
        unsigned char tessellationPipelineStateHash;
        SCNMTLRenderPipeline *renderPipeline;
    } _cache;
    struct {
        unsigned long long hash;
        SCNMTLRenderPipeline *pipeline;
    } _compositeRendering[2];
    SCNMTLRenderPipeline *_downSamplePipeline;
    struct {
        id <MTLTexture> backgroundTexture;
        id <MTLTexture> overlayTexture;
        id <MTLTexture> stencilDepthTexture;
    } _skCompositing;
    struct {
        unsigned long long pixelFormat;
        unsigned long long sampleCount;
        SCNMTLRenderPipeline *displayCubemapPipeline;
        SCNMTLRenderPipeline *displayTexture2DPipeline;
        SCNMTLRenderPipeline *displayDepth2DPipeline;
        SCNMTLRenderPipeline *displayDepthCubePipeline;
    } _debug;
    _Bool _showsAuthoringEnvironment;
    struct {
        _Bool collectEnabled;
        NSMutableDictionary *errors;
    } _compilationIssues;
    struct {
        unsigned int modelTransformBindingCount;
        unsigned int modelViewTransformBindingCount;
        unsigned int normalTransformBindingCount;
        unsigned int nodeOpacityBindingCount;
    } _counters;
    struct {
        unsigned long long passHash;
        struct __C3DMaterial *material;
    } _renderGraph;
    id <SCNMTLRenderContextResourceManagerMonitor> _resourceManagerMonitor;
    id <SCNMTLRenderContextCommandBufferStatusMonitor> _commandBufferStatusMonitor;
    id _commandBufferScheduledHandlers;
    id _commandBufferCompletedHandlers;
    id _drawablePresentedHandlers;
    MTLRenderPassDescriptor *_clientRenderPassDescriptor;
    id <MTLRenderCommandEncoder> _clientRenderCommandEncoder;
    id <MTLCommandBuffer> _clientCommandBuffer;
    unsigned long long _debugOptions;
    double _contentScaleFactor;
    id <MTLCommandQueue> _clientCommandQueue;
    NSString *_generatedTexturePath;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)writeBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (void)_drawShadowMaps;
- (void)_drawPBRTextures;
- (void)resetVolatileMeshElements;
- (void)_recycleMTLBufferToPool:(id)arg1;
- (id)_newMTLBufferFromPoolWithLength:(unsigned long long)arg1;
- (void)resetVolatileMeshes;
- (void)_prepareMaterialTextures:(struct __C3DMaterial *)arg1;
- (float)_zFarForSkyboxRenderingProjectionMatrix:(const union C3DMatrix4x4 *)arg1 defaultZFar:(float)arg2;
- (void)_updateProjectionMatrixForOrthographicSkyboxRenderingIfNeeded:(union C3DMatrix4x4 *)arg1;
- (void)_logLightingInformation;
- (void)_createResourceCommandBufferIfNeeded;
- (void)_clearUnusedBindingPoints;
- (void)dealloc;
- (void)_reduceStatsOfConstantBuffer:(id)arg1;
- (void)viewports:(const void **)arg1:(long long *)arg2;
- (_Bool)constantOffsetAndSize:(int)arg1:(id)arg2:(long long *)arg3:(long long *)arg4;
- (const char *)constantData:(int)arg1;
- (id)sampler:(int)arg1:(id)arg2;
- (id)buffer:(int)arg1:(id)arg2:(long long *)arg3:(long long *)arg4;
- (id)texture:(int)arg1:(id)arg2;
- (unsigned long long)colorPixelFormatAtIndex:(long long)arg1;
- (unsigned long long)depthStencilPixelFormat;
- (_Bool)vrrEnabled;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

