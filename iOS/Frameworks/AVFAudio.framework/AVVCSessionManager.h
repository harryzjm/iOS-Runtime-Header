//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVAudioSession, NSString;

__attribute__((visibility("hidden")))
@interface AVVCSessionManager : NSObject
{
    _Bool mShouldDuckOthers;
    _Bool mIsMiniDuckingEnabled;
    _Bool mShouldEnableMiniDucking;
    _Bool mShouldDisableMiniDucking;
    _Bool mSessionNeedsVolumeControl;
    _Bool mSessionNeedsRoutingControl;
    _Bool mSessionOutputIsWirelessSplitter;
    _Bool mIsOtherAudioPlaying;
    _Bool mRouteHasDoAPSupport;
    _Bool mOutputSupportsSWVolume;
    _Bool mDeviceIsIOSAccessory;
    _Bool mDeviceIsOlderWatch;
    unsigned int mSessionActivationOptions;
    struct recursive_mutex mSessionManagerLock;
    unsigned long long mPreviousHardwareControlFlags;
    long long mPreviousActivationMode;
    NSString *mPreviousSessionCategory;
    NSString *mPreviousSessionMode;
    unsigned long long mPreviousSessionCategoryOptions;
    double mPreviousSampleRate;
    int mPreviousIOBufferFrameSize;
    _Bool _isPrimary;
    _Bool _clientRequestsRecording;
    _Bool _forceGetSessionProperties;
    int _sessionState;
    float _deviceGain;
    long long _reporterID;
    double _inputLatency;
    double _outputLatency;
    double _inputSafetyOffset;
    double _outputSafetyOffset;
    double _outputVolume;
    AVAudioSession *_audioSession;
    NSString *_playbackRoute;
}

- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) _Bool forceGetSessionProperties; // @synthesize forceGetSessionProperties=_forceGetSessionProperties;
@property(retain, nonatomic) NSString *playbackRoute; // @synthesize playbackRoute=_playbackRoute;
@property(nonatomic) float deviceGain; // @synthesize deviceGain=_deviceGain;
@property(nonatomic) _Bool clientRequestsRecording; // @synthesize clientRequestsRecording=_clientRequestsRecording;
@property(readonly, nonatomic) _Bool isPrimary; // @synthesize isPrimary=_isPrimary;
@property(retain, nonatomic) AVAudioSession *audioSession; // @synthesize audioSession=_audioSession;
- (_Bool)setMicrophoneAttribution:(_Bool)arg1 error:(id *)arg2;
- (_Bool)isInputAvailable;
- (void)resetCachedSessionProperties;
- (_Bool)isSWVolumeSupportedOnPickedRoute;
- (_Bool)setDuckToLevelScalar:(id)arg1 error:(id *)arg2;
- (_Bool)setDuckToLevelDB:(id)arg1 error:(id *)arg2;
- (long long)inputNumberOfChannels;
- (_Bool)setRecordingFromRemoteInput:(_Bool)arg1 error:(id *)arg2;
- (void)removeSessionNotifications:(id)arg1;
- (void)setupSessionNotifications:(id)arg1;
- (id)getActiveSessionDisplayIDsAsString;
- (unsigned int)getOpaqueSessionID;
- (_Bool)setActive:(_Bool)arg1 withOptions:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)setActivationContext:(id)arg1 error:(id *)arg2;
- (_Bool)getSiriInputSource:(unsigned long long *)arg1 withIdentifier:(id *)arg2;
- (id)siriRemoteInputIdentifier;
- (unsigned long long)siriInputSource;
- (id)sessionCurrentInputRoutes;
- (id)sessionCurrentOutputRoutes;
- (id)currentRoute;
- (_Bool)setPreferredSampleRate:(double)arg1 error:(id *)arg2;
- (_Bool)setIAmTheAssistant:(_Bool)arg1 error:(id *)arg2;
@property(readonly) long long reporterID; // @synthesize reporterID=_reporterID;
- (_Bool)setAudioHardwareControlFlags:(unsigned long long)arg1 error:(id *)arg2;
- (_Bool)isSessionInSiriCategory;
- (_Bool)isSessionInSiriCategoryModeAndOptions:(unsigned int)arg1;
- (_Bool)clearInputPreferences:(id *)arg1;
- (_Bool)setCategory:(id)arg1 mode:(id)arg2 routeSharingPolicy:(unsigned long long)arg3 options:(unsigned long long)arg4 error:(id *)arg5;
- (_Bool)setCategory:(id)arg1 mode:(id)arg2 options:(unsigned long long)arg3 error:(id *)arg4;
- (double)speechDetectionDeviceSampleRate;
@property(readonly, nonatomic) double outputVolume; // @synthesize outputVolume=_outputVolume;
@property(readonly, nonatomic) double inputSafetyOffset; // @synthesize inputSafetyOffset=_inputSafetyOffset;
@property(readonly, nonatomic) double outputSafetyOffset; // @synthesize outputSafetyOffset=_outputSafetyOffset;
@property(readonly, nonatomic) double outputLatency; // @synthesize outputLatency=_outputLatency;
@property(readonly, nonatomic) double inputLatency; // @synthesize inputLatency=_inputLatency;
- (_Bool)setEnableBTTriangleMode:(_Bool)arg1 error:(id *)arg2;
- (_Bool)getForceGetSessionProperties;
- (id)getPlaybackRoute;
- (float)getDeviceGain;
- (_Bool)getClientRequestsRecording;
- (_Bool)isSessionActive;
@property(nonatomic) int sessionState; // @synthesize sessionState=_sessionState;
- (void)setSessionStateWithoutLock:(int)arg1;
- (_Bool)deactivateAudioSessionWithOptions:(unsigned int)arg1 error:(id *)arg2;
- (_Bool)activateAudioSessionWithPrewarm:(_Bool)arg1 error:(id *)arg2;
- (_Bool)isAirplayOneOfTheOutputRoutes:(id)arg1;
- (int)enableSmartRoutingConsideration:(_Bool)arg1;
- (void)setSessionActivationOptions:(unsigned int)arg1;
- (unsigned int)getSessionActivationOptions;
- (_Bool)isSessionOutputInWirelessSplitterMode;
- (_Bool)setDuckingFadeOutDuration:(id)arg1 fadeInDuration:(id)arg2 error:(id *)arg3;
- (_Bool)setDuckOthers:(id)arg1 mixWithOthers:(id)arg2 error:(id *)arg3;
- (void)changeDuckOthersOption:(_Bool)arg1;
- (int)setSessionBufferSize:(int)arg1;
- (int)setSessionSampleRateForActivationMode:(long long)arg1;
- (int)setSessionAudioHWControlFlagsForActivationMode:(long long)arg1 withOptions:(unsigned long long)arg2;
- (int)setSessionCategoryModeOptionsForActivationMode:(long long)arg1 withOptions:(unsigned long long)arg2;
- (void)getHypotheticalRouteAndUpdateStates;
- (_Bool)isMiniDuckingEnabled;
- (void)shouldEnableMiniDucking:(_Bool)arg1 withOptions:(unsigned long long)arg2;
- (int)setSessionActivationContext:(id)arg1;
- (int)setupOneTimeSessionSettingsForClient:(long long)arg1;
- (void)dealloc;
- (id)initWithSession:(id)arg1;

@end

