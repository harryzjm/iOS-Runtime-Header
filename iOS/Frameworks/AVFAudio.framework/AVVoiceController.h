//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <AVFAudio/AVAudioRemoteInputPlugin_PrivateTest-Protocol.h>

@class AVAudioFormat, NSDictionary, NSString;
@protocol AVVoiceControllerPlaybackDelegate, AVVoiceControllerRecordDelegate, Endpointer;

@interface AVVoiceController : NSObject <AVAudioRemoteInputPlugin_PrivateTest>
{
    void *_impl;
    unsigned long long _alertStartTime;
}

@property(readonly) unsigned long long alertStartTime; // @synthesize alertStartTime=_alertStartTime;
- (id)mockPluginEndpoint;
- (_Bool)setDuckOthersForStream:(unsigned long long)arg1 withSettings:(id)arg2 error:(id *)arg3;
- (void)getInputChannelInfoForStream:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)setAnnounceCallsEnabledForStream:(unsigned long long)arg1 enable:(_Bool)arg2;
- (_Bool)enableSmartRoutingConsiderationForStream:(unsigned long long)arg1 enable:(_Bool)arg2 error:(id *)arg3;
- (void)setRecordStatusChangeBlock:(CDUnknownBlockType)arg1;
- (float)getAveragePowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (float)getPeakPowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (_Bool)updateMeterForStream:(unsigned long long)arg1;
- (_Bool)isMeteringEnabledForStream:(unsigned long long)arg1;
- (id)getRecordSettingsForStream:(unsigned long long)arg1;
- (double)getRecordBufferDurationForStream:(unsigned long long)arg1;
- (_Bool)playAlertSoundForType:(int)arg1 overrideMode:(long long)arg2;
- (void)playAlert:(int)arg1 withOverride:(long long)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)setContextForStream:(id)arg1 forStream:(unsigned long long)arg2 error:(id *)arg3;
- (long long)getCurrentSessionStateForStream:(unsigned long long)arg1;
- (long long)getCurrentSessionState;
- (void)deactivateAudioSessionForStream:(unsigned long long)arg1 withOptions:(unsigned long long)arg2 error:(id *)arg3;
- (void)deactivateAudioSessionWithOptions:(unsigned long long)arg1;
- (_Bool)activateAudioSessionForStream:(unsigned long long)arg1 isPrewarm:(_Bool)arg2 recordMode:(_Bool)arg3 error:(id *)arg4;
- (_Bool)activateAudioSessionForStream:(unsigned long long)arg1 isPrewarm:(_Bool)arg2 error:(id *)arg3;
- (id)getRecordDeviceInfoForStream:(unsigned long long)arg1;
- (long long)getCurrentStreamState:(unsigned long long)arg1;
- (_Bool)stopRecordForStream:(unsigned long long)arg1 error:(id *)arg2;
- (void)stopRecordOnStream:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)configureAlertBehaviorForStream:(id)arg1 error:(id *)arg2;
- (_Bool)startRecordForStream:(id)arg1 error:(id *)arg2;
- (void)startRecordWithSettings:(id)arg1 completion:(CDUnknownBlockType)arg2 alertCompletion:(CDUnknownBlockType)arg3 audioCallback:(CDUnknownBlockType)arg4;
- (_Bool)prepareRecordForStream:(id)arg1 error:(id *)arg2;
- (void)prepareRecordForStream:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (unsigned long long)setContext:(id)arg1 streamType:(long long *)arg2 error:(id *)arg3;
- (unsigned long long)setContext:(id)arg1 error:(id *)arg2;
- (id)initVoiceControllerForClient:(long long)arg1 withError:(id *)arg2;
- (id)initWithError:(id *)arg1;
- (id)currentRecordDeviceInfo;
@property(readonly) NSDictionary *metrics;
@property(getter=isStopOnEndpointEnabled) _Bool stopOnEndpointEnabled;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (void)updateMeters;
@property(getter=isMeteringEnabled) _Bool meteringEnabled;
@property float playbackVolume;
- (unsigned long long)getAlertStartTime;
@property float alertVolume;
@property(readonly, getter=isRecording) _Bool recording;
@property(readonly, getter=isPlaying) _Bool playing;
- (_Bool)setPlaybackBufferDuration:(double)arg1;
- (double)getPlaybackBufferDuration;
@property(readonly) NSDictionary *playbackSettings;
@property id <AVVoiceControllerPlaybackDelegate> playbackDelegate; // @dynamic playbackDelegate;
@property double recordEndWaitTime;
@property double recordInterspeechWaitTime;
@property double recordStartWaitTime;
@property int recordEndpointMode;
@property(retain) id <Endpointer> endpointerDelegate;
- (_Bool)setRecordBufferDuration:(double)arg1;
- (double)getRecordBufferDuration;
@property(readonly) NSDictionary *recordSettings;
@property id <AVVoiceControllerRecordDelegate> recordDelegate; // @dynamic recordDelegate;
- (void)stopPlaying;
- (_Bool)startPlaying;
- (_Bool)preparePlaybackFromURL:(id)arg1 error:(id *)arg2;
- (_Bool)preparePlaybackWithSettings:(id)arg1 error:(id *)arg2;
- (void)stopRecording;
- (_Bool)startRecordingWithSettings:(id)arg1 error:(id *)arg2;
- (_Bool)startRecordingAtTime:(unsigned long long)arg1 error:(id *)arg2;
- (_Bool)startRecording:(id *)arg1;
- (_Bool)startRecording;
- (void)setupAlertBehavior_v1:(id)arg1;
- (int)doStartRecordingAtTime_v1:(unsigned long long)arg1 behavior:(id)arg2;
- (_Bool)playRecordStartingAlertAndResetEndpointer;
- (void)resetEndpointer;
- (_Bool)playAlertSoundForType:(int)arg1;
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (_Bool)prepareRecordWithSettings:(id)arg1 error:(id *)arg2;
- (_Bool)setCurrentContext:(id)arg1 error:(id *)arg2;
- (_Bool)IsDeviceAvailableInLocalRoute:(id)arg1 error:(id *)arg2;
- (_Bool)willAcceptContext:(id)arg1;
- (void)enableMiniDucking:(_Bool)arg1;
- (void)releaseAudioSession:(unsigned long long)arg1;
- (void)releaseAudioSession;
- (void)dealloc;
- (void)finalize;
- (void)prewarmAudioSession;
- (id)initWithContext:(id)arg1 error:(id *)arg2;
- (oneway void)release;
- (id)retain;
- (void)endAudioSessionActivate_v1v2:(_Bool)arg1;
- (void)beginAudioSessionActivate_v1v2:(_Bool)arg1;
- (void)endPlaybackInterruption_v1v2;
- (void)beginPlaybackInterruption_v1v2;
- (void)endRecordInterruption_v1v2;
- (void)beginRecordInterruptionWithContext_v1v2:(id)arg1;
- (void)beginRecordInterruption_v1v2;
- (void)notifyStreamInvalidated_v1v2:(unsigned long long)arg1;
- (void)alertPlaybackFinishedOfType_v1v2:(int)arg1;
- (void)decodeError;
- (void)finishedPlaying_v1v2;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer *)arg1;
- (void)beganPlaying;
- (void)encodeError;
- (void)endpointDetected;
- (void)interspeechPointDetected;
- (void)startpointDetected;
- (void)finishedRecording_v1v2:(id)arg1;
- (void)beganRecording_v1v2:(id)arg1;
- (void)handlePluginDidUnpublishDevice:(id)arg1 withDevice:(id)arg2;
- (void)handlePluginDidPublishDevice:(id)arg1 withDevice:(id)arg2;
- (void)handleMediaServerReset_v1v2:(id)arg1;
- (void)handleMediaServerDeath_v1v2:(id)arg1;
- (void)handleRouteChange_v1v2:(id)arg1;
- (void)handleInterruption_v1v2:(id)arg1;
- (void)hardwareConfigChanged;
- (void)removeSessionNotifications:(id)arg1;
- (void)setSessionNotifications_v1v2:(id)arg1;
- (void)sessionCleanup_v1v2;
- (void)sessionSetup_v1v2;
- (shared_ptr_94a40f34)impl;
@property(readonly) unsigned long long numberOfChannels;
@property(setter=setDuckOthersOption:) _Bool duckOthersOption;
@property(readonly) AVAudioFormat *pcmRecordBufferFormat;
@property(getter=isSynchronousCallbackEnabled) _Bool synchronousCallbackEnabled;
@property(getter=isStopOnBargeInEnabled) _Bool stopOnBargeInEnabled;
@property(getter=isBargeInDetectEnabled) _Bool bargeInDetectEnabled;
@property(readonly) NSDictionary *voiceTriggerInfo;
@property(readonly) unsigned long long lastRecordStartTime;
@property(readonly, copy) NSString *playbackRoute;
@property(readonly, copy) NSString *recordRoute;
- (void)sendRemoteConnectionMessage:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

