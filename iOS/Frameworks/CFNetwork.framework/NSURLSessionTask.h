//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CFNetwork/NSCopying-Protocol.h>
#import <CFNetwork/NSProgressReporting-Protocol.h>

@class NSArray, NSData, NSDate, NSDictionary, NSError, NSProgress, NSString, NSURL, NSURLRequest, NSURLResponse, NSURLSession, NSURLSessionEffectiveConfiguration, NSURLSessionTaskDependency, NSURLSessionTaskDependencyTree, NSURLSessionTaskHTTPAuthenticator, NSUUID, __CFN_TaskMetrics, __CFN_TransactionMetrics;
@protocol NSURLSessionAppleIDContext, OS_dispatch_queue, OS_nw_activity, OS_voucher, SZExtractor, __NSURLSessionTaskGroupForConfiguration;

@interface NSURLSessionTask : NSObject <NSCopying, NSProgressReporting>
{
    NSObject<OS_nw_activity> *_nw_activity_ivar;
    __CFN_TaskMetrics *_metrics_ivar;
    NSDate *earliestBeginDate;
    NSObject<OS_nw_activity> *_private_nw_activity;
    id <__NSURLSessionTaskGroupForConfiguration> __taskGroup;
}

+ (id)new;
@property(readonly, retain) id <__NSURLSessionTaskGroupForConfiguration> _taskGroup; // @synthesize _taskGroup=__taskGroup;
@property(retain) NSObject<OS_nw_activity> *_private_nw_activity; // @synthesize _private_nw_activity;
@property(retain) NSObject<OS_nw_activity> *_nw_activity; // @synthesize _nw_activity=_nw_activity_ivar;
@property(retain) __CFN_TaskMetrics *_metrics; // @synthesize _metrics=_metrics_ivar;
@property(copy) NSDate *earliestBeginDate; // @synthesize earliestBeginDate;
- (void)_onqueue_adoptEffectiveConfiguration:(id)arg1;
- (void)set_TLSNegotiatedCipherSuite:(unsigned short)arg1;
@property(readonly, nonatomic) _Bool _isAVAssetTask; // @dynamic _isAVAssetTask;
- (void)_consumePendingBytesReceivedEncoded;
- (void)_appendCountOfPendingBytesReceivedEncoded:(long long)arg1;
- (void)_finishProgressReporting;
- (void)_completeUploadProgress;
- (void)cancel;
- (void)resume;
- (void)suspend;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateCurrentRequest:(id)arg1;
@property(readonly, nonatomic) NSString *_loggableDescription; // @dynamic _loggableDescription;
- (void)_getAuthenticationHeadersForResponse:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (const struct __CFSet *)_getAuthenticatorStatusCodes;
- (const struct __CFDictionary *)_copyATSState;
- (const struct __CFDictionary *)_copySocketStreamProperties;
- (long long)computeAdjustedPoolPriority;
- (void)_onqueue_releasePowerAsssertion;
- (void)_releasePreventIdleSleepAssertionIfAppropriate;
- (void)_takePreventIdleSleepAssertionIfAppropriate;
- (void)_onqueue_expectedProgressTargetChanged;
- (void)_onqueue_adjustBytesPerSecondLimit:(long long)arg1;
- (void)_onqueue_adjustPriorityHint:(float)arg1;
- (_Bool)shouldHandleCookiesAndSchemeIsAppropriate;
- (void)_setBytesPerSecondLimit:(long long)arg1;
- (void)_setExplicitCookieStorage:(struct OpaqueCFHTTPCookieStorage *)arg1;
- (void)_setExplicitStorageSession:(struct __CFURLStorageSession *)arg1;
- (void)_setSocketProperties:(struct __CFDictionary *)arg1 connectionProperties:(struct __CFDictionary *)arg2;
- (const struct XCredentialStorage *)_createXCredentialStorage;
- (const struct XCookieStorage *)_createXCookieStorage;
- (void)_withXURLCache:(CDUnknownBlockType)arg1;
- (struct _CFHSTSPolicy *)_copyHSTSPolicy;
- (void)_onSessionQueue_cleanupAndBreakCycles;
- (void)initializeHTTPAuthenticatorWithAppleIDContext:(id)arg1 statusCodes:(id)arg2;
- (void)_logUnimplemented:(SEL)arg1;
@property(readonly, retain) NSURLSession *session; // @dynamic session;
- (void)dealloc;
- (id)initWithTaskGroup:(id)arg1;
- (id)init;
- (void)_adoptEffectiveConfiguration:(id)arg1;
- (void)getUnderlyingHTTPConnectionInfoWithCompletionHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(copy, nonatomic) NSString *_APSRelayTopic; // @dynamic _APSRelayTopic;
@property(copy) NSDictionary *_DuetActivityProperties; // @dynamic _DuetActivityProperties;
@property(copy) NSData *_TCPConnectionMetadata; // @dynamic _TCPConnectionMetadata;
@property(readonly) unsigned short _TLSNegotiatedCipherSuite; // @dynamic _TLSNegotiatedCipherSuite;
@property unsigned long long _allowedProtocolTypes; // @dynamic _allowedProtocolTypes;
@property _Bool _allowsCellular; // @dynamic _allowsCellular;
@property int _allowsCellularOverride; // @dynamic _allowsCellularOverride;
@property int _allowsConstrainedOverride; // @dynamic _allowsConstrainedOverride;
@property int _allowsExpensiveOverride; // @dynamic _allowsExpensiveOverride;
@property(nonatomic) _Bool _allowsQUIC; // @dynamic _allowsQUIC;
@property _Bool _appSSOFallback; // @dynamic _appSSOFallback;
@property(copy, setter=_setAppleIDContext:) id <NSURLSessionAppleIDContext> _appleIDContext; // @dynamic _appleIDContext;
@property _Bool _authenticatorConfiguredViaTaskProperty; // @dynamic _authenticatorConfiguredViaTaskProperty;
@property(retain, nonatomic) NSURL *_backgroundPublishingURL; // @dynamic _backgroundPublishingURL;
@property(retain) __CFN_TransactionMetrics *_backgroundTransactionMetrics; // @dynamic _backgroundTransactionMetrics;
@property(copy) NSString *_boundInterfaceIdentifier; // @dynamic _boundInterfaceIdentifier;
@property long long _bytesPerSecondLimit; // @dynamic _bytesPerSecondLimit;
@property _Bool _cacheOnly; // @dynamic _cacheOnly;
@property unsigned long long _cachePolicy; // @dynamic _cachePolicy;
@property(retain) const struct _CFURLCache *_cfCache; // @dynamic _cfCache;
@property(retain) struct OpaqueCFHTTPCookieStorage *_cfCookies; // @dynamic _cfCookies;
@property(retain) struct _CFURLCredentialStorage *_cfCreds; // @dynamic _cfCreds;
@property(retain) struct _CFHSTSPolicy *_cfHSTS; // @dynamic _cfHSTS;
@property(setter=_setConnectionIsCellular:) _Bool _connectionIsCellular; // @dynamic _connectionIsCellular;
@property _Bool _connectionIsCompanionLink; // @dynamic _connectionIsCompanionLink;
@property(copy) NSArray *_contentDispositionFallbackArray; // @dynamic _contentDispositionFallbackArray;
@property int _cookieAcceptPolicy; // @dynamic _cookieAcceptPolicy;
@property long long _countOfBytesReceivedEncoded; // @dynamic _countOfBytesReceivedEncoded;
@property long long _countOfPendingBytesReceivedEncoded; // @dynamic _countOfPendingBytesReceivedEncoded;
@property unsigned int _darkWakePowerAssertion; // @dynamic _darkWakePowerAssertion;
@property(retain, nonatomic) NSDictionary *_dependencyInfo; // @dynamic _dependencyInfo;
@property _Bool _disallowCellular; // @dynamic _disallowCellular;
@property(nonatomic) long long _discretionaryOverride; // @dynamic _discretionaryOverride;
@property(nonatomic) _Bool _doesSZExtractorConsumeExtractedData; // @dynamic _doesSZExtractorConsumeExtractedData;
@property(readonly, copy) NSURLSessionEffectiveConfiguration *_effectiveConfiguration; // @dynamic _effectiveConfiguration;
@property(nonatomic) unsigned long long _expectedProgressTarget; // @dynamic _expectedProgressTarget;
@property long long _expectedWorkload; // @dynamic _expectedWorkload;
@property(retain, nonatomic, setter=set_extractor:) id <SZExtractor> _extractor; // @dynamic _extractor;
@property _Bool _extractorFinishedDecoding; // @dynamic _extractorFinishedDecoding;
@property _Bool _extractorPreparedForExtraction; // @dynamic _extractorPreparedForExtraction;
@property(nonatomic) _Bool _hasSZExtractor; // @dynamic _hasSZExtractor;
@property(copy, nonatomic) CDUnknownBlockType _httpConnectionInfoCompletionBlock; // @dynamic _httpConnectionInfoCompletionBlock;
@property _Bool _isTopLevelNavigation; // @dynamic _isTopLevelNavigation;
@property(copy) NSDictionary *_legacySocketStreamProperties; // @dynamic _legacySocketStreamProperties;
@property double _loadingPriority; // @dynamic _loadingPriority;
@property double _loadingPriorityValue; // @dynamic _loadingPriorityValue;
@property int _networkServiceType; // @dynamic _networkServiceType;
@property(copy) NSString *_pathToDownloadTaskFile; // @dynamic _pathToDownloadTaskFile;
@property unsigned int _powerAssertion; // @dynamic _powerAssertion;
@property(nonatomic) _Bool _preconnect; // @dynamic _preconnect;
@property _Bool _preventsAppSSO; // @dynamic _preventsAppSSO;
@property _Bool _preventsIdleSystemSleep; // @dynamic _preventsIdleSystemSleep;
@property _Bool _preventsSystemHTTPProxyAuthentication; // @dynamic _preventsSystemHTTPProxyAuthentication;
@property long long _priority; // @dynamic _priority;
@property long long _priorityValue; // @dynamic _priorityValue;
@property _Bool _prohibitAuthUI; // @dynamic _prohibitAuthUI;
@property(nonatomic) id _protocolForTask; // @dynamic _protocolForTask;
@property(copy) NSDictionary *_proxySettings; // @dynamic _proxySettings;
@property(retain, nonatomic) NSURL *_publishingURL; // @dynamic _publishingURL;
@property(nonatomic) unsigned int _qos; // @dynamic _qos;
@property long long _requestPriority; // @dynamic _requestPriority;
@property _Bool _requiresSecureHTTPSProxyConnection; // @dynamic _requiresSecureHTTPSProxyConnection;
@property _Bool _shouldHandleCookies; // @dynamic _shouldHandleCookies;
@property _Bool _shouldPipelineHTTP; // @dynamic _shouldPipelineHTTP;
@property(nonatomic) _Bool _shouldReportTimingDataToAWD; // @dynamic _shouldReportTimingDataToAWD;
@property _Bool _shouldSkipPipelineProbe; // @dynamic _shouldSkipPipelineProbe;
@property _Bool _shouldSkipPreferredClientCertificateLookup; // @dynamic _shouldSkipPreferredClientCertificateLookup;
@property _Bool _shouldUsePipelineHeuristics; // @dynamic _shouldUsePipelineHeuristics;
@property(retain) NSURL *_siteForCookies; // @dynamic _siteForCookies;
@property(copy) NSDictionary *_sslSettings; // @dynamic _sslSettings;
@property(copy) NSString *_storagePartitionIdentifier; // @dynamic _storagePartitionIdentifier;
@property _Bool _strictContentLength; // @dynamic _strictContentLength;
@property long long _suspensionThreshhold; // @dynamic _suspensionThreshhold;
@property double _timeWindowDelay; // @dynamic _timeWindowDelay;
@property double _timeWindowDuration; // @dynamic _timeWindowDuration;
@property double _timeoutInterval; // @dynamic _timeoutInterval;
@property double _timeoutIntervalForResource; // @dynamic _timeoutIntervalForResource;
@property(retain, nonatomic) NSDictionary *_trailers; // @dynamic _trailers;
@property(copy) NSUUID *_uniqueIdentifier; // @dynamic _uniqueIdentifier;
@property(retain) NSObject<OS_voucher> *_voucher; // @dynamic _voucher;
@property(copy) NSURLSessionTaskHTTPAuthenticator *authenticator; // @dynamic authenticator;
@property long long countOfBytesClientExpectsToReceive; // @dynamic countOfBytesClientExpectsToReceive;
@property long long countOfBytesClientExpectsToSend; // @dynamic countOfBytesClientExpectsToSend;
@property long long countOfBytesExpectedToReceive; // @dynamic countOfBytesExpectedToReceive;
@property long long countOfBytesExpectedToSend; // @dynamic countOfBytesExpectedToSend;
@property long long countOfBytesReceived; // @dynamic countOfBytesReceived;
@property long long countOfBytesSent; // @dynamic countOfBytesSent;
@property(copy) NSURLRequest *currentRequest; // @dynamic currentRequest;
@property(readonly, retain) NSURL *currentRequest_URL; // @dynamic currentRequest_URL;
@property(readonly, retain) NSURL *currentRequest_mainDocumentURL; // @dynamic currentRequest_mainDocumentURL;
@property(readonly, copy) NSString *debugDescription;
@property(retain, nonatomic) NSURLSessionTaskDependencyTree *dependencyTree; // @dynamic dependencyTree;
@property(readonly, copy) NSString *description;
@property(copy) NSError *error; // @dynamic error;
@property(readonly) unsigned long long hash;
@property(copy) NSURLRequest *originalRequest; // @dynamic originalRequest;
@property float priority; // @dynamic priority;
@property(readonly) NSProgress *progress; // @dynamic progress;
@property(copy) NSURLResponse *response; // @dynamic response;
@property double startTime; // @dynamic startTime;
@property long long state; // @dynamic state;
@property(readonly) Class superclass;
@property(retain, nonatomic) NSURLSessionTaskDependency *taskDependency; // @dynamic taskDependency;
@property(copy) NSString *taskDescription; // @dynamic taskDescription;
@property unsigned long long taskIdentifier; // @dynamic taskIdentifier;
@property(readonly, retain) NSObject<OS_dispatch_queue> *workQueue; // @dynamic workQueue;

@end

