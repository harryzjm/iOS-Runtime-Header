//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVAsset, AVPlayerItem, AVPlayerItemAccessLog, ICMusicSubscriptionLeaseStatus, MPMediaItem, MPModelGenericObject, MPModelPlayEvent, MPNowPlayingContentItem, MPQueueFeeder, NSArray, NSDictionary, NSError, NSNumber, NSString;
@protocol MPAVItemObserver, OS_dispatch_queue;

@interface MPAVItem : NSObject
{
    AVAsset *_asset;
    NSObject<OS_dispatch_queue> *_assetQueue;
    AVPlayerItem *_avPlayerItem;
    _Bool _isAssetLoaded;
    MPQueueFeeder *_feeder;
    float _soundCheckVolumeNormalization;
    double _cachedDuration;
    double _cachedPlayableDuration;
    NSArray *_cachedSeekableTimeRanges;
    double _seekableTimeRangesCacheTime;
    long long _type;
    MPNowPlayingContentItem *_contentItem;
    float _defaultPlaybackRate;
    unsigned int _advancedDuringPlayback:1;
    unsigned int _handledFinishTime:1;
    unsigned int _hasPlayedThisSession:1;
    unsigned int _wasCountedAsSkipped:1;
    unsigned int _isStreamable:2;
    unsigned int _watchingAttributes:1;
    unsigned int _userChangedItemsDuringPlayback:1;
    unsigned int _lyricsAvailable:1;
    id _rtcReportingParentHierarchyToken;
    struct os_unfair_lock_s _lock;
    _Bool _hasLoadedHasProtectedContent;
    _Bool _hasLoadedPlaybackMode;
    _Bool _hasValidPlayerItemDuration;
    double _lastLoggedTotalDuration;
    long long _likedState;
    CDStruct_1b6d18a9 _playerItemDuration;
    long long _exportableArtworkRevision;
    _Bool _meetsPlaybackHistoryThreshold;
    _Bool _assetLoaded;
    _Bool _didAttemptToLoadAsset;
    _Bool _canReusePlayerItem;
    _Bool _useEmbeddedChapterData;
    _Bool _likedStateEnabled;
    _Bool _supportsLikedState;
    _Bool _prefersSeekOverSkip;
    _Bool _hasProtectedContent;
    _Bool _tailPlaceholder;
    _Bool _startItem;
    _Bool _shouldPreventPlayback;
    _Bool _allowsAirPlayFromCloud;
    _Bool _allowsExternalPlayback;
    _Bool _requiresLoadedAssetForAirPlayProperties;
    _Bool _hasFinishedDownloading;
    _Bool _hasPerformedErrorResolution;
    _Bool _activeItem;
    _Bool _externalDisplay;
    _Bool _didReachEnd;
    _Bool _autoPlayItem;
    _Bool _sharedListeningItem;
    float _currentPlaybackRate;
    float _loudnessInfoVolumeNormalization;
    id <MPAVItemObserver> _observer;
    NSError *_itemError;
    NSString *_queueIdentifier;
    long long _playbackMode;
    NSArray *_chapterTimeMarkers;
    NSArray *_artworkTimeMarkers;
    NSArray *_urlTimeMarkers;
    NSArray *_closedCaptionTimeMarkers;
    long long _albumStoreID;
    NSString *_copyrightText;
    NSString *_externalContentIdentifier;
    long long _storeItemInt64ID;
    long long _storeSubscriptionAdamID;
    MPMediaItem *_mediaItem;
    NSString *_explicitBadge;
    long long _repeatIndex;
    long long _lastChangeDirection;
    MPModelGenericObject *_modelGenericObject;
    MPModelPlayEvent *_modelPlayEvent;
    NSNumber *_initialPlaybackStartTimeOverride;
    NSNumber *_lastMetadataChangeTime;
    NSString *_rtcReportingServiceIdentifier;
    NSDictionary *_playbackInfo;
    NSString *_storeFrontIdentifier;
    NSNumber *_storeAccountID;
    NSNumber *_useListeningHistory;
    long long _leasePlaybackPreventionState;
    ICMusicSubscriptionLeaseStatus *_leaseStatus;
    NSString *_contentItemID;
    NSString *_previousContentItemID;
    long long _explicitContentState;
}

+ (id)URLFromPath:(id)arg1;
+ (_Bool)isPlaceholder;
- (void).cxx_destruct;
@property(nonatomic) long long explicitContentState; // @synthesize explicitContentState=_explicitContentState;
@property(nonatomic, getter=isSharedListeningItem) _Bool sharedListeningItem; // @synthesize sharedListeningItem=_sharedListeningItem;
@property(nonatomic, getter=isAutoPlayItem) _Bool autoPlayItem; // @synthesize autoPlayItem=_autoPlayItem;
@property(copy, nonatomic) NSString *previousContentItemID; // @synthesize previousContentItemID=_previousContentItemID;
@property(copy, nonatomic) NSString *contentItemID; // @synthesize contentItemID=_contentItemID;
@property(readonly, nonatomic) _Bool didReachEnd; // @synthesize didReachEnd=_didReachEnd;
@property(readonly, copy, nonatomic) ICMusicSubscriptionLeaseStatus *leaseStatus; // @synthesize leaseStatus=_leaseStatus;
@property(readonly, nonatomic) long long leasePlaybackPreventionState; // @synthesize leasePlaybackPreventionState=_leasePlaybackPreventionState;
@property(readonly, nonatomic) NSNumber *useListeningHistory; // @synthesize useListeningHistory=_useListeningHistory;
@property(readonly, nonatomic) NSNumber *storeAccountID; // @synthesize storeAccountID=_storeAccountID;
@property(nonatomic, getter=hasExternalDisplay) _Bool externalDisplay; // @synthesize externalDisplay=_externalDisplay;
@property(readonly, copy, nonatomic) NSString *storeFrontIdentifier; // @synthesize storeFrontIdentifier=_storeFrontIdentifier;
@property(nonatomic, getter=isActiveItem) _Bool activeItem; // @synthesize activeItem=_activeItem;
@property(copy, nonatomic) NSDictionary *playbackInfo; // @synthesize playbackInfo=_playbackInfo;
@property(nonatomic) _Bool hasPerformedErrorResolution; // @synthesize hasPerformedErrorResolution=_hasPerformedErrorResolution;
@property(readonly, nonatomic) _Bool hasFinishedDownloading; // @synthesize hasFinishedDownloading=_hasFinishedDownloading;
@property(readonly, nonatomic) _Bool requiresLoadedAssetForAirPlayProperties; // @synthesize requiresLoadedAssetForAirPlayProperties=_requiresLoadedAssetForAirPlayProperties;
@property(readonly, nonatomic) _Bool allowsExternalPlayback; // @synthesize allowsExternalPlayback=_allowsExternalPlayback;
@property(readonly, nonatomic) _Bool allowsAirPlayFromCloud; // @synthesize allowsAirPlayFromCloud=_allowsAirPlayFromCloud;
@property(readonly, copy, nonatomic) NSString *rtcReportingServiceIdentifier; // @synthesize rtcReportingServiceIdentifier=_rtcReportingServiceIdentifier;
@property(copy, nonatomic) NSNumber *lastMetadataChangeTime; // @synthesize lastMetadataChangeTime=_lastMetadataChangeTime;
@property(copy, nonatomic) NSNumber *initialPlaybackStartTimeOverride; // @synthesize initialPlaybackStartTimeOverride=_initialPlaybackStartTimeOverride;
@property(retain, nonatomic) MPModelPlayEvent *modelPlayEvent; // @synthesize modelPlayEvent=_modelPlayEvent;
@property(readonly, nonatomic) MPModelGenericObject *modelGenericObject; // @synthesize modelGenericObject=_modelGenericObject;
@property(readonly, nonatomic) _Bool shouldPreventPlayback; // @synthesize shouldPreventPlayback=_shouldPreventPlayback;
@property(nonatomic) long long lastChangeDirection; // @synthesize lastChangeDirection=_lastChangeDirection;
@property(nonatomic) long long repeatIndex; // @synthesize repeatIndex=_repeatIndex;
@property(nonatomic, getter=isStartItem) _Bool startItem; // @synthesize startItem=_startItem;
@property(readonly, nonatomic, getter=isTailPlaceholder) _Bool tailPlaceholder; // @synthesize tailPlaceholder=_tailPlaceholder;
@property(copy, nonatomic) NSString *explicitBadge; // @synthesize explicitBadge=_explicitBadge;
@property(readonly, nonatomic) _Bool hasProtectedContent; // @synthesize hasProtectedContent=_hasProtectedContent;
@property(readonly, nonatomic) _Bool prefersSeekOverSkip; // @synthesize prefersSeekOverSkip=_prefersSeekOverSkip;
@property(nonatomic) float loudnessInfoVolumeNormalization; // @synthesize loudnessInfoVolumeNormalization=_loudnessInfoVolumeNormalization;
@property(readonly, retain, nonatomic) MPMediaItem *mediaItem; // @synthesize mediaItem=_mediaItem;
@property(readonly, nonatomic) long long storeSubscriptionAdamID; // @synthesize storeSubscriptionAdamID=_storeSubscriptionAdamID;
@property(readonly, nonatomic) long long storeItemInt64ID; // @synthesize storeItemInt64ID=_storeItemInt64ID;
@property(readonly, nonatomic) _Bool supportsLikedState; // @synthesize supportsLikedState=_supportsLikedState;
@property(readonly, nonatomic, getter=isLikedStateEnabled) _Bool likedStateEnabled; // @synthesize likedStateEnabled=_likedStateEnabled;
@property(readonly, copy, nonatomic) NSString *externalContentIdentifier; // @synthesize externalContentIdentifier=_externalContentIdentifier;
@property(readonly, copy, nonatomic) NSString *copyrightText; // @synthesize copyrightText=_copyrightText;
@property(readonly, nonatomic) long long albumStoreID; // @synthesize albumStoreID=_albumStoreID;
@property(readonly, nonatomic) _Bool useEmbeddedChapterData; // @synthesize useEmbeddedChapterData=_useEmbeddedChapterData;
@property(retain, nonatomic) NSArray *closedCaptionTimeMarkers; // @synthesize closedCaptionTimeMarkers=_closedCaptionTimeMarkers;
@property(readonly, nonatomic) NSArray *urlTimeMarkers; // @synthesize urlTimeMarkers=_urlTimeMarkers;
@property(readonly, nonatomic) NSArray *artworkTimeMarkers; // @synthesize artworkTimeMarkers=_artworkTimeMarkers;
@property(readonly, nonatomic) NSArray *chapterTimeMarkers; // @synthesize chapterTimeMarkers=_chapterTimeMarkers;
@property(readonly, nonatomic) long long playbackMode; // @synthesize playbackMode=_playbackMode;
@property(retain, nonatomic) NSString *queueIdentifier; // @synthesize queueIdentifier=_queueIdentifier;
@property(retain, nonatomic) NSError *itemError; // @synthesize itemError=_itemError;
@property(readonly, nonatomic) _Bool canReusePlayerItem; // @synthesize canReusePlayerItem=_canReusePlayerItem;
@property(readonly, nonatomic) _Bool didAttemptToLoadAsset; // @synthesize didAttemptToLoadAsset=_didAttemptToLoadAsset;
@property(readonly, nonatomic, getter=isAssetLoaded) _Bool assetLoaded; // @synthesize assetLoaded=_assetLoaded;
@property(readonly, nonatomic) _Bool meetsPlaybackHistoryThreshold; // @synthesize meetsPlaybackHistoryThreshold=_meetsPlaybackHistoryThreshold;
@property(nonatomic) __weak id <MPAVItemObserver> observer; // @synthesize observer=_observer;
@property(retain, nonatomic) id rtcReportingParentHierarchyToken; // @synthesize rtcReportingParentHierarchyToken=_rtcReportingParentHierarchyToken;
@property(nonatomic) float soundCheckVolumeNormalization; // @synthesize soundCheckVolumeNormalization=_soundCheckVolumeNormalization;
@property(nonatomic) _Bool isAssetLoaded; // @synthesize isAssetLoaded=_isAssetLoaded;
@property(nonatomic) float defaultPlaybackRate; // @synthesize defaultPlaybackRate=_defaultPlaybackRate;
@property(nonatomic, getter=_currentPlaybackRate, setter=_setCurrentPlaybackRate:) float _currentPlaybackRate; // @synthesize _currentPlaybackRate;
- (id)analyticsFormatInfo;
- (id)analyticsFormatName;
- (void)_didBecomeActivePlayerItem;
- (void)_didResignActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (void)_willBecomeActivePlayerItem;
- (void)_updateHasFinishedDownloading;
- (void)resolvePlaybackError:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)replacePlayerItemWithPlayerItem:(id)arg1;
- (void)reevaluateType;
- (void)reevaluateHasProtectedContent;
- (void)invalidateContentItemAudioFormatInfo;
- (void)invalidateContentItemDeviceSpecificUserInfo;
- (void)invalidateContentItemUserInfo;
- (void)_setNeedsPersistedLikedStateUpdate;
- (long long)_persistedLikedState;
- (void)_handleUpdatedLikedState:(long long)arg1 forUserIdentity:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (double)_expectedStopTimeWithPlaybackInfo:(id)arg1;
- (double)_expectedStartTimeWithPlaybackInfo:(id)arg1;
- (void)_applyLoudnessInfo;
- (void)_currentPlaybackRateDidChange:(float)arg1;
- (void)_updateDurationSnapshotWithElapsedTime:(double)arg1 playbackRate:(float)arg2;
- (void)setupWithPlaybackInfo;
- (void)setupEQPresetWithDefaultPreset:(long long)arg1;
- (id)_contentItemDeviceSpecificUserInfo;
- (id)_contentItemUserInfo;
- (void)_updateAudioFormatInfoForContentItem:(id)arg1;
- (void)_updateContentItem;
- (void)_onAssetQueueClearAsset;
- (void)_clearAssetNow;
- (void)_clearAsset;
- (void)_performContentItemUpdate:(CDUnknownBlockType)arg1;
- (_Bool)_shouldPublishArtworkURL;
- (void)_updateSoundCheckVolumeNormalizationForPlayerItem;
- (void)_loadAssetProperties;
- (double)_playableDurationForLoadedTimeRanges:(id)arg1;
- (id)_seekableTimeRanges;
- (id)_initialPlaybackStartTimeForPlaybackInfo:(id)arg1;
- (void)_likedStateDidChange;
- (void)_removeObservationsForAVPlayerItem:(id)arg1;
- (void)_addObservationsForAVPlayerItem:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_itemAttributeAvailableKey:(id)arg1;
- (void)_internalLikedStateDidChangeNotification:(id)arg1;
@property(readonly, nonatomic) double timeOfSeekableEnd;
@property(readonly, nonatomic) double timeOfSeekableStart;
@property(readonly, nonatomic) struct OpaqueCMTimebase *timebase;
@property(readonly, nonatomic) CDStruct_1b6d18a9 _playerItemDurationIfAvailable;
@property(readonly, nonatomic) double playableDurationIfAvailable;
@property(readonly, nonatomic) double playableDuration;
@property(readonly, nonatomic) double durationIfAvailable;
- (double)_durationFromExternalMetadataIfAvailable;
@property(readonly, nonatomic) _Bool durationIsValid;
@property(readonly, nonatomic) double durationFromExternalMetadata;
@property(readonly, nonatomic) CDStruct_1b6d18a9 duration;
@property(readonly, nonatomic) _Bool shouldShowComposer;
@property(readonly, nonatomic) long long storePurchasedAdamID;
@property(readonly, nonatomic) unsigned long long composerPersistentID;
@property(readonly, nonatomic) unsigned long long genrePersistentID;
@property(readonly, nonatomic) unsigned long long artistPersistentID;
@property(readonly, nonatomic) unsigned long long albumArtistPersistentID;
@property(readonly, nonatomic) unsigned long long albumPersistentID;
@property(readonly, nonatomic) NSString *cloudAlbumID;
@property(readonly, nonatomic) NSString *cloudUniversalLibraryID;
@property(readonly, nonatomic) NSString *personID;
@property(readonly, nonatomic) unsigned long long cloudID;
@property(readonly, nonatomic) NSString *databaseID;
@property(readonly, nonatomic) unsigned long long persistentID;
@property(readonly, nonatomic) unsigned long long mediaType;
@property(readonly, nonatomic) float userRating;
@property(readonly, nonatomic) long long type;
- (id)_imageChapterTrackIDsForAsset:(id)arg1;
@property(readonly, nonatomic) long long stationProviderID;
@property(readonly, copy, nonatomic) NSString *stationStringID;
@property(readonly, copy, nonatomic) NSString *stationName;
@property(readonly, copy, nonatomic) NSString *stationHash;
@property(readonly, nonatomic) long long stationID;
@property(readonly, nonatomic) _Bool stationAllowsItemLiking;
@property(readonly, nonatomic, getter=isRadioItem) _Bool radioItem;
@property(readonly, nonatomic) MPNowPlayingContentItem *contentItem;
@property(readonly, nonatomic) NSArray *timedMetadataIfAvailable;
@property(readonly, nonatomic) _Bool supportsRating;
@property(readonly, nonatomic) NSString *storeItemID;
- (void)setLikedState:(long long)arg1 forUserIdentity:(id)arg2;
@property(nonatomic) long long likedState;
@property(nonatomic) _Bool hasPlayedThisSession;
- (float)scanIntervalForLevel:(unsigned long long)arg1 paused:(_Bool)arg2;
@property(nonatomic) __weak MPQueueFeeder *feeder; // @synthesize feeder=_feeder;
@property(readonly, nonatomic) CDStruct_1b6d18a9 forwardPlaybackEndTime;
@property(readonly, nonatomic) struct CGSize presentationSize;
- (void)prepareForRate:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (float)playbackRateForLevel:(unsigned long long)arg1 direction:(long long)arg2 paused:(_Bool)arg3;
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) NSString *mainTitle;
@property(readonly, nonatomic) _Bool allowsEQ;
@property(readonly, nonatomic) long long customAVEQPreset;
@property(readonly, nonatomic, getter=isStreamable) _Bool streamable;
@property(readonly, nonatomic, getter=isAlwaysLive) _Bool alwaysLive;
- (_Bool)isAd;
@property(readonly, copy, nonatomic) NSString *containerUniqueID;
@property(readonly, nonatomic) _Bool hasTimeSyncedLyrics;
@property(readonly, nonatomic) _Bool hasStoreLyrics;
@property(readonly, nonatomic) NSString *libraryLyrics;
@property(readonly, nonatomic) NSString *lyrics;
@property(readonly, nonatomic) NSString *displayableText;
@property(readonly, nonatomic) _Bool displayableTextLoaded;
@property(readonly, nonatomic) _Bool usesSubscriptionLease;
@property(readonly, nonatomic) double currentTimeDisplayOverride;
@property(readonly, nonatomic) NSString *genre;
@property(readonly, nonatomic, getter=isExplicitTrack) _Bool explicitTrack;
@property(readonly, nonatomic, getter=isAssetURLValid) _Bool assetURLValid;
- (_Bool)isValidPlayerSubstituteForItem:(id)arg1;
@property(readonly, nonatomic) unsigned long long discCount;
@property(readonly, nonatomic) unsigned long long discNumber;
@property(readonly, nonatomic) NSString *composer;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(_Bool)arg1;
@property(readonly, nonatomic) unsigned long long albumTrackCount;
@property(readonly, nonatomic) unsigned long long albumTrackNumber;
@property(readonly, nonatomic) long long artistStoreID;
@property(readonly, nonatomic) NSString *albumArtist;
@property(readonly, nonatomic) NSString *artist;
- (long long)albumYear;
@property(readonly, nonatomic) NSString *album;
@property(readonly, nonatomic) AVPlayerItemAccessLog *accessLog;
- (id)url;
- (id)path;
- (double)durationInSeconds;
@property(nonatomic) _Bool userChangedItemsDuringPlayback;
@property(nonatomic) _Bool userSkippedPlayback;
@property(nonatomic) _Bool userAdvancedDuringPlayback;
- (void)setSubtitleTrackID:(int)arg1;
- (int)subtitleTrackID;
- (void)setRating:(float)arg1;
- (void)setPlaybackFinishedTime:(double)arg1;
- (void)setPlaybackCheckpointCurrentTime:(double)arg1;
- (void)notePlaybackFinishedByHittingEnd;
- (void)setPlaybackStoppedTime:(double)arg1;
- (void)resetBookkeeping;
@property(readonly, copy, nonatomic) NSNumber *initialPlaybackStartTime;
@property(readonly, copy, nonatomic) NSNumber *bookmarkTime;
@property(readonly, copy, nonatomic) NSError *playbackError;
@property(readonly, nonatomic) long long status;
@property(retain, nonatomic) AVPlayerItem *playerItem;
@property(readonly, nonatomic) AVAsset *asset;
- (void)updatePlayerItemMetadata;
- (void)_loadAssetAndPlayerItem;
- (void)loadAssetAndPlayerItem;
- (void)disableItemReuse;
- (id)description;
@property(readonly, nonatomic) _Bool supportsRewind;
@property(readonly, nonatomic) _Bool supportsFastForward;
@property(readonly, nonatomic) _Bool canUseLoadedAsset;
- (void)dealloc;
- (id)initWithPlayerItem:(id)arg1;
- (id)initWithAsset:(id)arg1;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)initWithURL:(id)arg1;
- (id)init;
- (_Bool)isSupportedDefaultPlaybackSpeed:(long long)arg1;
@property(readonly, nonatomic, getter=isPlaceholder) _Bool placeholder;
- (void)setMeetsPlaybackHistoryThresholdForElapsedTime:(double)arg1 startTime:(double)arg2;
- (CDUnknownBlockType)artworkCatalogBlock;
- (id)artworkCatalogForPlaybackTime:(double)arg1;

@end

