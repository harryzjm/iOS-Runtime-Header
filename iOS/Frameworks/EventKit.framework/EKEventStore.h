//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <EventKit/EKDaemonConnectionDelegate-Protocol.h>

@class CADDatabaseInitializationOptions, EKAlarm, EKCalendar, EKDaemonConnection, EKDataProtectionObserver, EKObjectID, EKReminderStore, NSArray, NSDictionary, NSHashTable, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimeZone;
@protocol CalCalendarDataContainerProvider, OS_dispatch_queue;

@interface EKEventStore : NSObject <EKDaemonConnectionDelegate>
{
    CADDatabaseInitializationOptions *_initializationOptions;
    EKObjectID *_localSourceID;
    EKObjectID *_birthdaySourceID;
    NSMutableDictionary *_defaultCalendarsForNewEventsIDBySourceID;
    EKObjectID *_defaultCalendarForNewRemindersID;
    EKObjectID *_suggestedEventCalendarID;
    EKObjectID *_naturalLanguageSuggestedEventCalendarID;
    EKObjectID *_subscribedCalendarsSourceID;
    NSMutableDictionary *_calendars;
    NSMutableDictionary *_sources;
    NSMutableDictionary *_cachedValidatedAddresses;
    NSNumber *_defaultTimedAlarmOffset;
    NSNumber *_defaultAllDayAlarmOffset;
    _Bool _allowsBirthdayCalendarModifications;
    _Bool _hasAccessToEvents;
    _Bool _hasAccessToReminders;
    _Bool _accessDetermined;
    struct os_unfair_lock_s _reminderSourceMapLock;
    _Bool _needsCommitForRemoteChanges;
    _Bool _inboxRepliedSectionHasContent;
    unsigned int _flags;
    NSTimeZone *_timeZone;
    NSHashTable *_insertedObjects;
    NSMutableSet *_deletedObjects;
    NSMutableSet *_updatedObjects;
    NSMutableSet *_objectsPendingCommit;
    NSMutableSet *_objectsPendingSave;
    EKDaemonConnection *_database;
    double _lastDatabaseNotificationTimestamp;
    NSObject<OS_dispatch_queue> *_calendarSourcesAndDefaultsQueue;
    NSObject<OS_dispatch_queue> *_registeredQueue;
    NSObject<OS_dispatch_queue> *_unsavedChangesQueue;
    NSObject<OS_dispatch_queue> *_dbChangedQueue;
    NSObject<OS_dispatch_queue> *_constraintsCacheQueue;
    NSObject<OS_dispatch_queue> *_notificationCollectionCacheQueue;
    EKDataProtectionObserver *_dataProtectionObserver;
    NSMutableDictionary *__cachedConstraints;
    NSMutableDictionary *__cachedNotificationCollections;
    EKReminderStore *_reminderStore;
    NSDictionary *_reminderSourceIDToEventSourceIDMapping;
    NSDictionary *_eventSourceIDToReminderSourceIDMapping;
    NSMutableDictionary *_registeredObjects;
    id <CalCalendarDataContainerProvider> _calendarDataContainerProvider;
}

+ (void)_addDaysSpannedByEvent:(id)arg1 toCountedSet:(id)arg2 inRange:(id)arg3 withNSCalendar:(id)arg4;
+ (_Bool)_isConfirmedSuggestedEvent:(id)arg1 uniqueKey:(id *)arg2;
+ (id)_filteredObjectsWithIdentifiers:(id)arg1 fromObjects:(id)arg2;
+ (id)eventStoreChangedDistributedNotificationName;
+ (void)setDenyAccessToReminders:(_Bool)arg1;
+ (void)setDenyAccessToEvents:(_Bool)arg1;
+ (_Bool)_skipTCCAccessCheck;
+ (_Bool)accessGrantedForEntityType:(unsigned long long)arg1;
+ (long long)authorizationStatusForEntityType:(unsigned long long)arg1;
+ (unsigned long long)ekEventStoreInitOptionsFromCalDatabaseInitOptions:(int)arg1;
+ (int)calDatabaseInitOptionsFromEKEventStoreInitOptions:(unsigned long long)arg1;
+ (void)setReminderStoreContainerTokenProvider:(CDUnknownBlockType)arg1;
+ (CDUnknownBlockType)reminderStoreContainerTokenProvider;
+ (Class)classForEntityName:(id)arg1;
- (void).cxx_destruct;
@property(readonly, nonatomic) id <CalCalendarDataContainerProvider> calendarDataContainerProvider; // @synthesize calendarDataContainerProvider=_calendarDataContainerProvider;
@property(readonly, nonatomic) _Bool inboxRepliedSectionHasContent; // @synthesize inboxRepliedSectionHasContent=_inboxRepliedSectionHasContent;
@property(retain, nonatomic) NSMutableDictionary *registeredObjects; // @synthesize registeredObjects=_registeredObjects;
@property(retain, nonatomic) NSDictionary *eventSourceIDToReminderSourceIDMapping; // @synthesize eventSourceIDToReminderSourceIDMapping=_eventSourceIDToReminderSourceIDMapping;
@property(retain, nonatomic) NSDictionary *reminderSourceIDToEventSourceIDMapping; // @synthesize reminderSourceIDToEventSourceIDMapping=_reminderSourceIDToEventSourceIDMapping;
@property(readonly, nonatomic) EKReminderStore *reminderStore; // @synthesize reminderStore=_reminderStore;
@property(retain, nonatomic) NSMutableDictionary *_cachedNotificationCollections; // @synthesize _cachedNotificationCollections=__cachedNotificationCollections;
@property(retain, nonatomic) NSMutableDictionary *_cachedConstraints; // @synthesize _cachedConstraints=__cachedConstraints;
@property(retain, nonatomic) EKDataProtectionObserver *dataProtectionObserver; // @synthesize dataProtectionObserver=_dataProtectionObserver;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *notificationCollectionCacheQueue; // @synthesize notificationCollectionCacheQueue=_notificationCollectionCacheQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *constraintsCacheQueue; // @synthesize constraintsCacheQueue=_constraintsCacheQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *dbChangedQueue; // @synthesize dbChangedQueue=_dbChangedQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *unsavedChangesQueue; // @synthesize unsavedChangesQueue=_unsavedChangesQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *registeredQueue; // @synthesize registeredQueue=_registeredQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *calendarSourcesAndDefaultsQueue; // @synthesize calendarSourcesAndDefaultsQueue=_calendarSourcesAndDefaultsQueue;
@property(nonatomic) unsigned int flags; // @synthesize flags=_flags;
@property(nonatomic) double lastDatabaseNotificationTimestamp; // @synthesize lastDatabaseNotificationTimestamp=_lastDatabaseNotificationTimestamp;
@property(retain, nonatomic) EKDaemonConnection *database; // @synthesize database=_database;
@property(nonatomic) _Bool needsCommitForRemoteChanges; // @synthesize needsCommitForRemoteChanges=_needsCommitForRemoteChanges;
@property(retain, nonatomic) NSMutableSet *objectsPendingSave; // @synthesize objectsPendingSave=_objectsPendingSave;
@property(retain, nonatomic) NSMutableSet *objectsPendingCommit; // @synthesize objectsPendingCommit=_objectsPendingCommit;
@property(retain, nonatomic) NSMutableSet *updatedObjects; // @synthesize updatedObjects=_updatedObjects;
@property(retain, nonatomic) NSMutableSet *deletedObjects; // @synthesize deletedObjects=_deletedObjects;
@property(retain, nonatomic) NSHashTable *insertedObjects; // @synthesize insertedObjects=_insertedObjects;
- (void)endCalDAVServerSimulation:(id)arg1;
- (id)beginCalDAVServerSimulationWithHostname:(id)arg1;
- (void)postSyntheticRouteHypothesis:(id)arg1 forEventWithExternalURL:(id)arg2;
- (void)setCachedEKSourceConstraintObject:(id)arg1 forKey:(id)arg2;
- (id)fetchStorageUsage;
- (_Bool)shouldWhitelistOrganizerPhoneNumberFromJunkChecks:(id)arg1;
- (_Bool)shouldWhitelistOrganizerEmailFromJunkChecks:(id)arg1;
- (id)_fetchPersistentNotificationCollectionForSourceWithObjectID:(id)arg1;
- (id)notificationCollectionForSource:(id)arg1;
- (id)_fetchConstraintsForSourceWithObjectID:(id)arg1;
- (void)_clearCachedConstraintsForSourceWithObjectID:(id)arg1;
- (id)cachedConstraintsForSourceWithObjectID:(id)arg1;
- (id)cachedConstraintsForSource:(id)arg1;
- (_Bool)occurrencesExistInRangeForEvent:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 mustStartInInterval:(_Bool)arg4 timezone:(id)arg5;
- (void)pushSpotlightUpdatesForCalendarItemUUIDs:(id)arg1;
- (unsigned long long)addressValidationStatus:(id)arg1;
- (void)cacheValidationStatusForAddress:(id)arg1 status:(unsigned long long)arg2;
- (void)purgeChangelog;
@property(readonly, nonatomic) EKAlarm *defaultAllDayAlarm;
@property(readonly, nonatomic) EKAlarm *defaultTimedAlarm;
- (void)clearSuperfluousChanges;
- (_Bool)markIndividualChangesConsumed:(id)arg1 error:(id *)arg2;
- (void)markChangedObjectIDsConsumedUpToToken:(long long)arg1;
- (void)_processChangedObjectIDsWithToken:(long long)arg1 errorCode:(int)arg2 changesTruncated:(_Bool)arg3 latestToken:(long long)arg4 changeData:(id)arg5 insertCount:(int)arg6 updateCount:(int)arg7 deleteCount:(int)arg8 resultHandler:(CDUnknownBlockType)arg9;
- (void)changedObjectIDsSinceToken:(long long)arg1 resultHandler:(CDUnknownBlockType)arg2;
- (void)fetchChangedObjectIDsSinceToken:(long long)arg1 resultHandler:(CDUnknownBlockType)arg2;
- (void)unregisterForDetailedChangeTracking:(id *)arg1;
- (long long)registerForDetailedChangeTrackingInSource:(id)arg1 error:(id *)arg2;
- (long long)registerForDetailedChangeTracking:(id *)arg1;
- (unsigned long long)timeToLeaveLocationAuthorizationStatus;
- (id)predicateForIncompleteRemindersAndRemindersCompletedAfter:(id)arg1 inCalendar:(id)arg2;
- (id)predicateForNonrecurringEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (id)predicateForMasterEventsWithInvitationsAndOccurrencesAfter:(id)arg1 inCalendar:(id)arg2;
- (id)predicateForMasterEventsWithOccurrencesWithStartDate:(id)arg1 endDate:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForMasterEventsInCalendar:(id)arg1;
- (id)predicateForMasterEventsWithStartDate:(id)arg1 title:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withExternalID:(id)arg2 inSource:(id)arg3;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withExternalID:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withUniqueIdentifier:(id)arg2 inSource:(id)arg3;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 withUniqueIdentifier:(id)arg2 inCalendar:(id)arg3;
- (id)predicateForMasterEventsWithExternalTrackingStatusInCalendar:(id)arg1;
- (id)predicateForCalendarItemsOfType:(unsigned long long)arg1 inCalendar:(id)arg2;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 matchingContacts:(id)arg4;
- (id)predicateForEventsCreatedFromSuggestionWithExtractionGroupIdentifier:(id)arg1;
- (id)predicateForEventCreatedFromSuggestionWithOpaqueKey:(id)arg1;
- (id)predicateForEventsCreatedFromSuggestion;
- (id)predicateForNaturalLanguageSuggestedEventsWithSearchString:(id)arg1;
- (id)predicateForEventsWithStartDate:(id)arg1 title:(id)arg2 source:(id)arg3;
- (id)predicateForUpNextEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 startDateRestrictionThreshold:(double)arg4;
- (id)predicateForPotentialTravelEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (id)travelEligibleEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (_Bool)hasImmediatelyEligibleTravelEvents;
- (id)predicateForMasterEventsInCalendars:(id)arg1;
- (id)predicateForUpcomingEventsWithLimit:(int)arg1;
- (id)predicateForUnalertedEvents;
- (id)predicateForUnacknowledgedEvents;
- (id)predicateForNotificationCenterVisibleEvents;
- (id)predicateForNotifiableEvents;
- (id)predicateForAssistantEventSearchWithTimeZone:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 title:(id)arg4 location:(id)arg5 notes:(id)arg6 participants:(id)arg7 calendars:(id)arg8 limit:(long long)arg9;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendarIdentifiers:(id)arg3 exclusionOptions:(long long)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 prefetchHint:(long long)arg4 exclusionOptions:(long long)arg5;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendarIdentifiers:(id)arg3 prefetchHint:(long long)arg4 exclusionOptions:(long long)arg5;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 loadDefaultProperties:(_Bool)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (void)vehicleTriggerAlarmOccurrencesWithCompletion:(CDUnknownBlockType)arg1;
- (void)locationBasedAlarmOccurrencesWithCompletion:(CDUnknownBlockType)arg1;
- (void)alarmOccurrencesBetweenStartDate:(id)arg1 endDate:(id)arg2 inCalendars:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)alarmWithUUID:(id)arg1;
- (void)cancelFetchRequest:(id)arg1;
- (void)fetchEventCountsInRange:(id)arg1 inCalendars:(id)arg2 exclusionOptions:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (id)objectsMatchingPredicate:(id)arg1;
- (id)fetchObjectsMatchingPredicate:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)fetchEventsMatchingPredicate:(id)arg1 resultHandler:(CDUnknownBlockType)arg2;
- (void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)eventObjectIDsMatchingPredicate:(id)arg1;
- (id)eventsMatchingPredicate:(id)arg1;
- (void)_validateEventPredicate:(id)arg1;
- (_Bool)_commitObjectsWithIdentifiers:(id)arg1 error:(id *)arg2;
- (_Bool)commitObjects:(id)arg1 error:(id *)arg2;
- (_Bool)commit:(id *)arg1;
- (_Bool)save:(id *)arg1;
- (void)reset;
- (void)rollback;
- (void)_deleteObject:(id)arg1;
- (void)_insertObject:(id)arg1;
- (void)_trackModifiedObject:(id)arg1;
- (void)_setNeedsCommitForRemoteChanges;
- (id)publicObjectWithFetchedObjectID:(id)arg1;
- (id)publicObjectWithObjectID:(id)arg1;
- (id)publicObjectWithPersistentObject:(id)arg1;
- (id)objectWithObjectID:(id)arg1;
- (_Bool)objectWithIDExists:(id)arg1;
- (id)registerFetchedObjectWithID:(id)arg1 withDefaultLoadedPropertyKeys:(id)arg2 values:(id)arg3;
- (id)registerFetchedObjectWithID:(id)arg1;
- (id)_addFetchedObjectWithID:(id)arg1;
- (void)_forgetRegisteredObjects;
- (void)_reregisterObject:(id)arg1 oldID:(id)arg2;
- (void)_detachObject:(id)arg1;
- (void)_unregisterObject:(id)arg1;
- (void)_registerObject:(id)arg1;
- (void)_registerObjectImmediate:(id)arg1;
- (_Bool)refreshSource:(id)arg1 userRequested:(_Bool)arg2;
- (void)refreshSourcesIfNecessary;
- (id)refreshSourcesIfNecessary:(_Bool)arg1;
- (_Bool)_refreshDASource:(id)arg1 isUserRequested:(_Bool)arg2;
- (_Bool)removeInviteReplyNotifications:(id)arg1 error:(id *)arg2;
- (_Bool)removeInviteReplyNotification:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *inboxRepliedSectionItems;
- (_Bool)acknowledgeNotifications:(id)arg1 error:(id *)arg2;
- (unsigned long long)eventNotificationCountForSource:(id)arg1 excludingDelegateSources:(_Bool)arg2 filteredByShowsNotificationsFlag:(_Bool)arg3 excludeRowIDs:(id)arg4;
@property(readonly, nonatomic) unsigned long long eventNotificationCount;
- (id)eventNotificationsFilteredByShowsNotificationsFlag:(_Bool)arg1 earliestExpiringNotification:(id *)arg2;
@property(readonly, nonatomic) NSArray *eventNotifications;
- (_Bool)removeResourceChangesForCalendarItem:(id)arg1 error:(id *)arg2;
- (_Bool)removeResourceChanges:(id)arg1 error:(id *)arg2;
- (_Bool)removeResourceChange:(id)arg1 error:(id *)arg2;
- (_Bool)markResourceChangeAlertedAndSave:(id)arg1 error:(id *)arg2;
- (id)resourceChangesForEntityTypes:(unsigned long long)arg1;
- (_Bool)_saveAndRollbackIfNeededForEvent:(id)arg1 span:(long long)arg2;
- (void)declineAlternateTimeProposalNotification:(id)arg1 forAttendee:(id)arg2 commit:(_Bool)arg3 error:(id *)arg4;
- (void)acceptAlternateTimeProposalNotification:(id)arg1 forAttendee:(id)arg2 commit:(_Bool)arg3 error:(id *)arg4;
- (void)respondToSharedCalendarInvitation:(id)arg1 withStatus:(unsigned long long)arg2;
- (id)sharedCalendarInvitationsForEntityTypes:(unsigned long long)arg1;
- (_Bool)saveNotificationCollection:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)saveNotification:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
@property(readonly, nonatomic) int notifiableEventCount;
@property(readonly, nonatomic) int unacknowledgedEventCount;
@property(readonly, nonatomic) EKCalendar *naturalLanguageSuggestedEventCalendar;
- (_Bool)canModifySuggestedEventCalendar;
- (Class)_SGSuggestionsServiceClass;
- (void)deleteSuggestedEvent:(id)arg1;
- (void)acceptSuggestedEvent:(id)arg1;
- (void)confirmSuggestedEvent:(id)arg1;
- (void)removeSuggestedEventCalendar;
- (void)insertSuggestedEventCalendar;
@property(readonly, nonatomic) EKCalendar *suggestedEventCalendar;
@property(nonatomic) _Bool birthdayCalendarEnabled;
- (void)rebuildOccurrenceCache;
@property(nonatomic) _Bool showDeclinedEvents;
- (id)scheduledTaskCacheFetchTasksOnDay:(id)arg1 maxResults:(unsigned long long)arg2;
- (id)scheduledTaskCacheFetchTasksOnDay:(id)arg1;
- (id)scheduledTaskCacheFetchDaysAndTaskCounts;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1 onDay:(double)arg2;
- (_Bool)occurrenceCacheOccurrencesAreBeingGenerated;
- (id)remindersWithContactIdentifier:(id)arg1;
- (long long)countOfRemindersWithContactIdentifier:(id)arg1;
- (void)removeContactIdentifier:(id)arg1 forCalendarItem:(id)arg2;
- (void)addContactIdentifier:(id)arg1 forCalendarItem:(id)arg2;
- (id)contactIdentifierForCalendarItem:(id)arg1;
- (id)calendarWithExternalURI:(id)arg1;
- (id)calendarWithIdentifier:(id)arg1;
- (id)calendarWithExternalID:(id)arg1;
- (id)doEvents:(id)arg1 haveOccurrencesAfterDate:(id)arg2;
- (id)closestCachedOccurrenceToDate:(double)arg1 forEventUID:(int)arg2 prefersForwardSearch:(_Bool)arg3;
- (id)closestCachedOccurrenceToDate:(double)arg1 forEventUID:(int)arg2;
- (id)eventWithUUID:(id)arg1;
@property(readonly, nonatomic) struct os_unfair_lock_s *reminderSourceMapLock;
- (_Bool)shouldSaveCalendarAsReminderCalendar:(id)arg1;
- (_Bool)shouldSaveCalendarAsEventCalendar:(id)arg1;
- (_Bool)returnReminderResults;
- (_Bool)returnEventResults;
- (_Bool)accessGrantedForEntityType:(unsigned long long)arg1;
- (_Bool)fetchProperties:(id)arg1 forReminders:(id)arg2;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(_Bool)arg3 completed:(_Bool)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned long long)arg9;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(_Bool)arg3 completed:(_Bool)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8;
- (id)predicateForPreloadedCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 preloadProperties:(id)arg4;
- (id)predicateForPreloadedIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 preloadProperties:(id)arg4 maxResults:(unsigned long long)arg5;
- (id)predicateForPreloadedIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 preloadProperties:(id)arg4;
- (id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(_Bool)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(_Bool)arg4 completed:(_Bool)arg5 includeDatesBefore:(_Bool)arg6 sortOrder:(int)arg7 preloadProperties:(id)arg8 maxResults:(unsigned long long)arg9;
- (id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(_Bool)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(_Bool)arg4 completed:(_Bool)arg5 includeDatesBefore:(_Bool)arg6 sortOrder:(int)arg7 preloadProperties:(id)arg8;
- (id)predicateForCompletedRemindersWithCompletionDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForIncompleteRemindersWithDueDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForRemindersInCalendars:(id)arg1 preloadProperties:(id)arg2;
- (id)predicateForRemindersInCalendars:(id)arg1;
- (id)fetchRemindersMatchingPredicate:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)reminderObjectIDsMatchingPredicate:(id)arg1;
- (int)countOfRemindersMatchingPredicate:(id)arg1;
- (id)_remindersMatchingPredicate:(id)arg1;
- (id)remindersMatchingPredicate:(id)arg1;
- (void)_validateReminderPredicate:(id)arg1;
- (id)_calendarItemsMatchingPredicate:(id)arg1;
- (id)remindersWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2;
- (id)eventsWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2;
- (id)calendarItemsWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2;
- (id)calendarItemsWithExternalIdentifier:(id)arg1;
- (id)_calendarItemsWithExternalIdentifier:(id)arg1 inCalendars:(id)arg2 entityTypes:(unsigned long long)arg3;
- (id)calendarItemWithIdentifier:(id)arg1;
- (id)calendarItemsWithUniqueIdentifier:(id)arg1 inCalendar:(id)arg2;
- (id)reminderWithExternalURI:(id)arg1;
- (_Bool)_removeReminder:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)removeReminder:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)removeReminder:(id)arg1 error:(id *)arg2;
- (_Bool)saveReminder:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)saveReminder:(id)arg1 error:(id *)arg2;
- (void)_removeCachedCalendarWithID:(id)arg1;
- (void)_removeCachedCalendarFromSource:(id)arg1;
- (void)_clearCachedCalendars;
- (void)setDefaultCalendarForNewReminders:(id)arg1;
- (id)defaultCalendarForNewReminders;
- (id)acquireDefaultCalendarForNewReminders;
@property(retain, nonatomic) EKCalendar *defaultCalendarForNewEvents;
- (void)setDefaultCalendar:(id)arg1 forNewEventsInDelegateSource:(id)arg2;
- (id)defaultCalendarForNewEventsInDelegateSource:(id)arg1;
- (id)acquireDefaultCalendarForNewEvents;
- (id)defaultLocalCalendar;
- (struct CGColor *)copyCGColorForNewCalendar;
- (id)ICSDataForCalendarItems:(id)arg1 preventLineFolding:(_Bool)arg2;
- (id)ICSDataForCalendarItems:(id)arg1 options:(long long)arg2;
- (id)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3;
- (id)_importEventsWithExternalIDs:(id)arg1 fromICSData:(id)arg2 intoCalendarsWithIDs:(id)arg3 options:(unsigned long long)arg4 batchSize:(int)arg5;
- (id)importEventsWithExternalIDs:(id)arg1 fromICSData:(id)arg2 intoCalendars:(id)arg3 options:(unsigned long long)arg4 batchSize:(int)arg5;
- (id)importICSData:(id)arg1 intoCalendars:(id)arg2 options:(unsigned long long)arg3;
- (id)importICS:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3;
- (_Bool)setInvitationStatus:(unsigned long long)arg1 forEvents:(id)arg2 error:(id *)arg3;
- (_Bool)setInvitationStatus:(unsigned long long)arg1 forEvent:(id)arg2 error:(id *)arg3;
- (_Bool)removeEvent:(id)arg1 span:(long long)arg2 commit:(_Bool)arg3 error:(id *)arg4;
- (_Bool)saveEvent:(id)arg1 span:(long long)arg2 commit:(_Bool)arg3 error:(id *)arg4;
- (_Bool)removeEvent:(id)arg1 span:(long long)arg2 error:(id *)arg3;
- (_Bool)saveEvent:(id)arg1 span:(long long)arg2 error:(id *)arg3;
- (id)allEventsWithUniqueId:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventWithUUID:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventWithUniqueId:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventWithUniqueId:(id)arg1;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2 checkValid:(_Bool)arg3;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2;
- (id)_eventOccurrenceWithURI:(id)arg1;
- (id)_eventWithURI:(id)arg1 checkValid:(_Bool)arg2;
- (_Bool)_parseURI:(id)arg1 expectedScheme:(id)arg2 identifier:(id *)arg3 options:(id *)arg4;
- (id)_eventWithEventIdentifier:(id)arg1;
- (id)eventWithIdentifier:(id)arg1;
- (id)_eventWithRecurrenceIdentifier:(id)arg1;
- (id)eventsWithIdentifiers:(id)arg1;
- (_Bool)deleteCalendar:(id)arg1 forEntityType:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)_removeCalendar:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)removeCalendar:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)_saveCalendar:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)saveCalendar:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)removeCalendar:(id)arg1 error:(id *)arg2;
- (_Bool)saveCalendar:(id)arg1 error:(id *)arg2;
- (void)_addObjectToPendingCommits:(id)arg1;
- (id)calendarWithID:(id)arg1;
- (id)readWriteCalendarsForEntityType:(unsigned long long)arg1;
- (int)readWriteCalendarCountForEntityType:(unsigned long long)arg1;
- (_Bool)_calendar:(id)arg1 supportsEntityType:(unsigned long long)arg2;
- (id)_deletableCalendars;
- (id)_allCalendars;
- (void)_loadCalendarsIfNeeded;
- (void)_cacheCalendarWithObjectID:(id)arg1 withDefaultLoadedPropertyValues:(id)arg2 forKeys:(id)arg3;
- (void)_logMainThreadFetchWarningIfNeeded;
- (id)calendarsForEntityType:(unsigned long long)arg1;
- (_Bool)hideCalendarsFromNotificationCenter:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *calendars;
- (_Bool)isSourceManaged:(id)arg1;
- (void)_clearCachedSources;
- (_Bool)removeSource:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)saveSource:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (id)sourceWithExternalID:(id)arg1;
- (id)sourceWithIdentifier:(id)arg1;
- (id)ownedSources;
- (id)localBirthdayCalendarSource;
- (id)localSubscribedCalendarSource;
- (id)localSource;
- (void)updateGrantedDelegatePermission:(id)arg1 source:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)fetchGrantedDelegatesForSource:(id)arg1 results:(CDUnknownBlockType)arg2;
- (id)delegateSourcesForSource:(id)arg1;
@property(readonly, nonatomic) NSArray *delegateSources;
- (id)localBirthdayCalendarCreateIfNeededWithError:(id *)arg1;
- (id)getSubscribedCalendarsSourceCreateIfNeededWithError:(id *)arg1;
- (id)_deletableSources;
- (id)reminderSources;
- (id)eventSources;
- (id)sourcesEnabledForEntityType:(unsigned long long)arg1;
@property(readonly, nonatomic) NSArray *sources;
- (void)_loadSourcesIfNeeded;
- (void)_cacheSourceWithObjectID:(id)arg1 withDefaultLoadedPropertyValues:(id)arg2 forKeys:(id)arg3;
- (id)_sourceWithID:(id)arg1;
@property(readonly, nonatomic) unsigned long long lastConfirmedSplashScreenVersion;
@property(readonly, nonatomic) _Bool automaticLocationGeocodingAllowed;
- (void)_saveWithoutNotify;
@property(readonly, nonatomic) NSString *eventStoreIdentifier;
- (void)daemonRestarted;
- (void)_defaultAlarmChangedExternally;
- (void)_defaultCalendarChangedExternally;
- (void)_postEventStoreChangedNotificationWithChangeType:(unsigned long long)arg1 changedObjectIDs:(id)arg2;
- (void)_databaseChangedExternally:(unsigned long long)arg1 processSynchronously:(_Bool)arg2;
- (void)_handleExternalDatabaseChangeNotification:(id)arg1 synchronously:(_Bool)arg2;
- (void)handleExternalDatabaseChangeNotification:(id)arg1;
- (void)reminderStoreChanged;
- (void)_validateObjectIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)changesSinceSequenceNumber:(int)arg1;
- (int)sequenceNumber;
- (void)_simulateDaemonCrashForUnitTests;
- (_Bool)_isUnitTesting;
- (void)_setIsUnitTesting:(_Bool)arg1;
- (void)setSourceAccountManagement:(int)arg1 withBundleID:(id)arg2;
- (void)setSourceAccountManagement:(int)arg1;
@property(readonly) EKDaemonConnection *connection;
@property(copy, nonatomic) NSTimeZone *timeZone; // @synthesize timeZone=_timeZone;
@property(readonly, nonatomic) _Bool allowsBirthdayModifications;
@property(readonly, copy, nonatomic) NSString *databasePath;
- (_Bool)canModifyCalendarDatabase;
- (void)_accessStatusChanged;
@property(readonly, nonatomic) _Bool isDataProtected;
- (void)requestAccessToEntityType:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_requestAccessForEntityType:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithOptions:(int)arg1 path:(id)arg2 changeTrackingClientId:(id)arg3 enablePropertyModificationLogging:(_Bool)arg4 allowDelegateSources:(_Bool)arg5;
- (id)initWithEKOptions:(unsigned long long)arg1;
- (id)initWithEKOptions:(unsigned long long)arg1 path:(id)arg2 changeTrackingClientId:(id)arg3 enablePropertyModificationLogging:(_Bool)arg4 allowDelegateSources:(_Bool)arg5;
- (id)initWithOptions:(int)arg1 path:(id)arg2 allowDelegateSources:(_Bool)arg3;
- (id)initWithOptions:(int)arg1 path:(id)arg2;
- (id)initWithBirthdayCalendarModifications;
- (id)initWithAccessToDelegateSources;
- (id)init;
- (void)performHoldingReminderSourceMapLock:(CDUnknownBlockType)arg1;
- (void)invalidateReminderSourceMaps;
- (id)eventSourceMap;
- (id)reminderSourceMap;
- (void)getMapsWithReminderSourceMap:(id *)arg1 eventSourceMap:(id *)arg2;
- (id)reminderSourceForEventSource:(id)arg1;
- (id)eventSourceIDForReminderSourceID:(id)arg1;
- (id)eventSourceForReminderSource:(id)arg1;
- (id)combineEventCalendars:(id)arg1 withReminderCalendars:(id)arg2;
- (void)_rebuildSourceMapsWithEventSources:(id)arg1 reminderSources:(id)arg2;
- (id)_combineEventSources:(id)arg1 withReminderSources:(id)arg2;
- (id)combinedReminderAndEventSources;
- (void)initializeEKEventStorePlusReminders;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

