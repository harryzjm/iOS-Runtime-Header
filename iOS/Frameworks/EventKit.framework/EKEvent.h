//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <EventKit/CalDateRangeProtocol-Protocol.h>
#import <EventKit/EKJunkInvitationProtocol_Private-Protocol.h>

@class EKCalendarDate, EKEventStore, EKParticipant, EKReadWriteLock, EKRecurrenceIdentifier, EKStructuredLocation, EKSuggestedEventInfo, NSArray, NSDate, NSNumber, NSSet, NSString, NSURL;

@interface EKEvent <EKJunkInvitationProtocol_Private, CalDateRangeProtocol>
{
    EKStructuredLocation *_cachedLocationPrediction;
    NSDate *_cachedLocationPredictionExpirationDate;
    _Bool _locationPredictionFrozen;
    _Bool _locationPredictionAllowed;
    EKReadWriteLock *_locationPredictionLock;
    _Bool _occurrenceIsAllDay;
    _Bool _requiresDetachDueToSnoozedAlarm;
    _Bool _currentUserInvitedAttendee;
    int _clearModifiedFlags;
    NSString *_birthdayPersonUniqueID;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    NSDate *_proposedEndDate;
}

+ (_Bool)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)arg1;
+ (id)knownPerUserPropertyKeys;
+ (id)knownRequireRSVPKeys;
+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)arg1 supportedAvailabilities:(unsigned long long)arg2;
+ (_Bool)isMultiDayTimedEventWithStartDate:(id)arg1 endDate:(id)arg2 allDay:(_Bool)arg3 inCalendar:(id)arg4;
+ (id)_relatedCachedTimeKeys;
+ (id)_basicChangesRequiringSpanAll;
+ (id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)arg1 error:(id *)arg2;
+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(_Bool)arg3;
+ (id)externalUriScheme;
+ (id)eventWithEventStore:(id)arg1;
+ (id)knownSingleValueKeysForComparison;
+ (id)knownKeysToUseForFutureChanges;
+ (id)knownKeysToSkipForFutureChanges;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownRelationshipSingleValueKeys;
+ (Class)frozenClass;
+ (id)_locationStringForLocations:(id)arg1;
+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
- (void).cxx_destruct;
@property(readonly, nonatomic, getter=isCurrentUserInvitedAttendee) _Bool currentUserInvitedAttendee; // @synthesize currentUserInvitedAttendee=_currentUserInvitedAttendee;
@property(retain, nonatomic) NSDate *proposedEndDate; // @synthesize proposedEndDate=_proposedEndDate;
@property(nonatomic) int clearModifiedFlags; // @synthesize clearModifiedFlags=_clearModifiedFlags;
@property(nonatomic) _Bool requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property(nonatomic) _Bool occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
@property(readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
- (_Bool)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (_Bool)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (_Bool)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (_Bool)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (_Bool)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (_Bool)isValidAttendee:(id)arg1 forCalendar:(id)arg2;
- (id)suggestedStartDateForCurrentRecurrenceRule;
- (_Bool)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)arg1 forDate:(id)arg2;
- (id)_nsCalendar;
- (_Bool)_hasAbsoluteAlarms;
- (_Bool)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (_Bool)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
- (_Bool)seriesHasOutOfOrderEvents;
- (_Bool)_canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;
- (_Bool)requiresCopyToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;
- (_Bool)canMoveOrCopyToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (long long)requirementsToMoveToCalendar:(id)arg1;
- (long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;
@property(readonly, nonatomic, getter=isPrivacySet) _Bool privacySet;
- (_Bool)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
- (_Bool)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)arg1;
- (_Bool)isDifferentFromCommittedEventAndRequiresRSVP;
- (_Bool)isDifferentAndRequiresRSVPWithDiff:(id)arg1;
- (_Bool)isDifferentFromCommittedEventAndRequiresReschedule;
- (_Bool)isDifferentExceptingPerUserPropertiesWithDiff:(id)arg1;
- (_Bool)isDifferentAndHasNewProposedTimeWithDiff:(id)arg1;
- (_Bool)isDifferentAndHasForwardedAttendeesWithDiff:(id)arg1;
- (_Bool)isDifferentAndModifiedAttendeesWithDiff:(id)arg1;
- (_Bool)isDifferentAndRequiresRescheduleWithDiff:(id)arg1;
- (_Bool)_diff:(id)arg1 isDifferentFromCommittedEventHelperRequiresReschedule:(_Bool)arg2;
- (_Bool)isDifferentWithDiff:(id)arg1;
- (_Bool)isEqual:(id)arg1 comparingKeys:(id)arg2;
- (id)diffFromCommitted;
- (void)_clearAttendeeChangedFlags;
- (void)dismissAcceptedProposeNewTimeNotification;
@property(readonly, nonatomic) NSURL *launchURL;
- (_Bool)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id *)arg3;
- (id)scanForConflicts;
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double *)arg1;
- (_Bool)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;
- (_Bool)updateEventToEvent:(id)arg1 commit:(_Bool)arg2;
- (_Bool)updateEventToEvent:(id)arg1;
@property(retain, nonatomic) EKSuggestedEventInfo *suggestionInfo;
- (id)privacyLevelString;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(_Bool)arg3;
- (_Bool)_shouldPreserveFutureWhenSlicingWithStartDate:(id)arg1 newStartDate:(id)arg2;
- (void)rebase;
- (_Bool)_noRemainingEarlierOccurrences;
- (_Bool)_eventIsTheOnlyRemainingOccurrence;
- (id)masterEvent;
- (_Bool)isOnlyOccurrence;
- (_Bool)isMainOccurrence;
- (_Bool)isFirstOccurrence;
- (_Bool)removeWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;
- (void)_cancelDetachedEventsWithSpan:(long long)arg1;
- (_Bool)_cancelWithSpan:(long long)arg1 error:(id *)arg2;
- (void)_deleteThisOccurrence;
- (void)_updateSelfFromDetachedEventIfNeededForDelete;
- (void)_deleteFromOccurrenceDateOnward:(id)arg1;
- (_Bool)_deleteWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)_shouldDeclineInsteadOfDelete;
- (_Bool)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (_Bool)_isSimpleRepeatingEvent;
@property(readonly, nonatomic) _Bool allowsResponseCommentModifications;
- (_Bool)allowsSpansOtherThanThisEvent;
- (_Bool)conformsToRecurrenceRules:(id)arg1;
- (_Bool)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;
- (_Bool)_occurrenceExistsOnDate:(id)arg1 timeZone:(id)arg2;
- (_Bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;
- (_Bool)durationOverlapsRecurrenceInterval;
- (_Bool)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)overlapsWithOrIsSameDayAsEventInSeries;
- (_Bool)validateRecurrenceRule:(id)arg1 error:(id *)arg2;
@property(copy, nonatomic) NSString *recurrenceSet;
- (unsigned long long)countOfAttendeeProposedTimes;
- (id)_keysToChangeForDuplicateWithOptions:(long long)arg1;
- (id)duplicateWithOptions:(long long)arg1;
- (_Bool)hasAttendeeProposedTimes;
- (id)_dateForNextOccurrence;
- (void)rollback;
- (_Bool)revert;
- (_Bool)_reset;
- (void)reset;
- (void)_addNewAttendeesToRecentsIfNeeded;
- (void)_addOrganizerToRecentsIfNeeded;
- (void)markAsCommitted;
- (void)markAsSaved;
- (void)_adjustAfterRebaseForMovingFromOldSource:(id)arg1 toNewSource:(id)arg2 committingItem:(id)arg3;
- (void)_adjustForNewCalendarBeforeCommit;
- (void)_filterExceptionDates;
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates;
- (void)_applyTimeChangesToMaster;
- (id)_updateMasterDate:(id)arg1 forChangeToOccurrenceDate:(id)arg2 fromOriginalOccurrenceDate:(id)arg3;
- (_Bool)_isSignificantlyDetachedComparedToMaster:(id)arg1 shouldIgnorePartStat:(_Bool)arg2;
@property(readonly, nonatomic) _Bool isSignificantlyDetachedIgnoringParticipation;
@property(readonly, nonatomic) _Bool isSignificantlyDetached;
- (void)_propagateChangesToDetachedEvents:(id)arg1 significantlyDetachedEvents:(id)arg2 startDateOffset:(id)arg3 duration:(id)arg4 calendar:(id)arg5;
- (void)_updateModifiedProperties;
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;
- (_Bool)commitWithSpan:(long long)arg1 error:(id *)arg2;
- (void)_willCommit;
- (id)_generateNewUniqueID;
- (_Bool)validateWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)validate:(id *)arg1;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (_Bool)validateAndUpdateOccurrenceDateFieldsAfterRefresh;
- (_Bool)refresh;
- (id)privacyDescription;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) _Bool allowsParticipationStatusModifications;
- (_Bool)hasValidEventAction;
- (_Bool)_hasExternalIDOrDeliverySource;
@property(readonly, nonatomic) _Bool canBeRespondedTo;
- (_Bool)allowsAlarmModifications;
@property(readonly, nonatomic) _Bool allowsAvailabilityModifications;
- (id)uniqueId;
@property(readonly, nonatomic) long long pendingParticipationStatus;
- (void)_resetInternalState;
- (void)_clearOriginalDateFields;
- (_Bool)isMultiDayTimedEventInCalendar:(id)arg1;
- (long long)daysSpannedInCalendar:(id)arg1;
- (id)startOfDayForEndDateInCalendar:(id)arg1;
- (id)startOfDayForStartDateInCalendar:(id)arg1;
- (void)clearCachedTimeValues;
- (_Bool)couldBeJunk;
@property(readonly, nonatomic) _Bool supportsJunkReporting;
@property(readonly, nonatomic) NSString *sendersPhoneNumber;
@property(readonly, nonatomic) NSString *sendersEmail;
@property(nonatomic) unsigned long long junkStatus;
@property(readonly, nonatomic) _Bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property(nonatomic) long long travelAdvisoryBehavior;
- (_Bool)_eligibleForTravelAdvisoriesIncludePotential:(_Bool)arg1;
@property(readonly, nonatomic) _Bool potentiallyEligibleForTravelAdvisories;
@property(readonly, nonatomic) _Bool eligibleForTravelAdvisories;
@property(readonly, nonatomic) _Bool automaticLocationGeocodingAllowed;
- (_Bool)_hasRecurrenceRuleChangeRequiringSpanAll;
- (_Bool)_hasBasicChangesRequiringSpanAll;
- (_Bool)_hasOrHadRecurrenceRule;
- (_Bool)hasChangesRequiringSpanAll;
- (_Bool)changingAllDayPropertyIsAllowed;
@property(readonly, nonatomic) _Bool hasAttachmentChanges;
@property(readonly, nonatomic) _Bool canDetachSingleOccurrence;
- (_Bool)requiresDetach;
@property(readonly, nonatomic) _Bool responseMustApplyToAll;
- (_Bool)allowsCalendarModifications;
- (_Bool)allowsRecurrenceModifications;
@property(readonly, nonatomic) _Bool isPrivateEventSharedToMe;
@property(readonly, nonatomic) _Bool isEditable;
@property(readonly, nonatomic) _Bool isDetached;
- (long long)compareStartDateIncludingTravelWithEvent:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (_Bool)isTentative;
@property(retain, nonatomic) NSDate *participationStatusModifiedDate;
@property(retain, nonatomic) EKStructuredLocation *endLocation; // @dynamic endLocation;
- (void)setCalendar:(id)arg1;
@property(retain, nonatomic) NSURL *conferenceURL;
- (void)setLocationPredictionAllowed:(_Bool)arg1;
- (void)setPredictedLocationFrozen:(_Bool)arg1;
@property(readonly, nonatomic) _Bool hasPredictedLocation;
- (void)rejectPredictedLocation;
- (void)confirmPredictedLocation:(id)arg1;
@property(readonly, nonatomic) NSString *locationWithoutPrediction;
@property(readonly, nonatomic) EKStructuredLocation *preferredLocationWithoutPrediction;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;
- (id)_updatePredictedLocationCacheIfNeeded;
- (id)_firstNonConferenceRoomLocationTitle;
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;
- (_Bool)_needsPredictedLocationCacheUpdateHoldingLock;
- (id)_conferenceRoomDisplayStrings;
- (void)removeConferenceRooms:(id)arg1;
- (void)addConferenceRooms:(id)arg1;
- (id)roomAttendees;
- (void)setStructuredLocation:(id)arg1 preserveConferenceRooms:(_Bool)arg2;
@property(copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;
- (void)setURL:(id)arg1;
- (void)setNotes:(id)arg1;
- (_Bool)supportsAddingAttachments;
@property(readonly, nonatomic) _Bool allowsProposedTimeModifications;
- (_Bool)disallowProposeNewTime;
- (_Bool)serverSupportedProposeNewTime;
- (_Bool)canForward;
@property(nonatomic) _Bool attendeeReplyChanged; // @dynamic attendeeReplyChanged;
@property(nonatomic) _Bool attendeeDeclinedStartDate;
@property(nonatomic) _Bool attendeeProposedStartDate;
@property(nonatomic) _Bool attendeeStatus;
@property(nonatomic) _Bool attendeeComment;
@property(nonatomic) _Bool locationChanged;
@property(nonatomic) _Bool titleChanged;
@property(nonatomic) _Bool timeChanged;
@property(nonatomic) _Bool dateChanged;
- (void)_setInvitationChangedProperty:(_Bool)arg1 forFlag:(unsigned int)arg2;
- (void)setInvitationChangedProperties:(unsigned int)arg1;
- (unsigned int)invitationChangedProperties;
- (_Bool)_invitationChangedPropertyForFlag:(unsigned int)arg1;
@property(readonly, nonatomic) _Bool locationIsAConferenceRoom;
@property(nonatomic) long long privacyLevel;
@property(readonly, nonatomic) _Bool allowsAllDayModifications;
@property(readonly, nonatomic) _Bool allowsPrivacyLevelModifications;
@property(readonly, nonatomic) _Bool allowsTravelTimeModifications;
- (_Bool)allowsAttendeesModifications;
@property(readonly, nonatomic) long long travelRoutingMode;
@property(retain, nonatomic) NSDate *proposedStartDate;
- (_Bool)isProposedTimeEvent;
@property(nonatomic) double travelTime;
@property(readonly, nonatomic) NSDate *startDateIncludingTravel;
- (id)_travelTimeInternalDescription;
@property(nonatomic) int externalTrackingStatus;
- (_Bool)_shouldAlertInviteeDeclines;
- (void)_setInvitationStatusUnalertedIfNecessary;
- (void)_setInvitationStatusAlertedIfNecessary;
@property(nonatomic) _Bool isAlerted;
- (void)removeEventAction:(id)arg1;
- (void)addEventAction:(id)arg1;
@property(copy, nonatomic) NSSet *actions;
- (void)clearInvitationStatus;
@property(nonatomic) unsigned long long invitationStatus;
- (void)_removeDefaultAlarms;
- (void)_addDefaultAlarms;
- (void)_updateDefaultAlarms;
- (id)defaultAlarms;
- (void)setResponseComment:(id)arg1;
- (id)responseComment;
@property(nonatomic) long long availability;
@property(readonly, nonatomic) _Bool hasComplexRecurrence;
- (id)startDateForRecurrence;
- (void)makeRecurrenceEndCountBased;
- (void)makeRecurrenceEndDateBased;
- (void)setRecurrenceRule:(id)arg1;
- (id)recurrenceRule;
- (id)lunarCalendarString;
- (void)setLunarCalendarString:(id)arg1;
- (_Bool)isBirthday;
- (void)setBirthdayContact:(id)arg1;
- (id)birthdayContactName;
- (void)setBirthdayContactIdentifier:(id)arg1;
@property(readonly, nonatomic) NSString *birthdayContactIdentifier;
@property(readonly, nonatomic) long long birthdayPersonID;
- (id)birthdayID;
- (long long)_parentParticipationStatus;
- (void)markEventAsAttendeeForward;
- (_Bool)currentUserMayActAsOrganizer;
@property(readonly, nonatomic) long long currentUserGeneralizedParticipantRole;
- (_Bool)_userAddressesRepresentInvitedAttendee:(id)arg1 checkEmailAddresses:(_Bool)arg2;
@property(readonly, nonatomic) _Bool allowsParticipantStatusModifications;
@property(readonly, nonatomic) _Bool supportsParticipationStatusModificationsWithoutNotification;
@property(nonatomic) long long participationStatus;
- (_Bool)_isParticipationStatusDirty;
@property(nonatomic) _Bool firedTTL;
@property(nonatomic) long long locationPredictionState;
- (void)setNeedsOccurrenceCacheUpdate:(_Bool)arg1;
- (_Bool)needsOccurrenceCacheUpdate;
@property(nonatomic) long long status;
@property(readonly, copy, nonatomic) NSDate *initialEndDate;
@property(readonly, nonatomic) NSDate *occurrenceDate;
@property(readonly, nonatomic) _Bool isMasterOrDetachedOccurrence;
@property(readonly, nonatomic) _Bool isMaster;
@property(readonly, copy, nonatomic) NSDate *initialStartDate;
- (void)setOriginalStartDate:(id)arg1;
@property(readonly, nonatomic) NSDate *originalStartDate;
- (_Bool)isFloating;
- (id)effectiveTimeZone;
- (_Bool)_settingTimeZoneChangesStartEndDates;
- (void)setTimeZone:(id)arg1;
- (void)forceSetTimeZone:(id)arg1;
@property(copy, nonatomic) NSDate *endDate;
- (void)_updateEndDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
@property(readonly, nonatomic) EKCalendarDate *endCalendarDate;
- (void)setEndDateRaw:(id)arg1;
- (id)endDateRaw;
@property(readonly, nonatomic) double durationIncludingTravel;
@property(readonly, nonatomic) double duration;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(_Bool)arg2;
- (void)_updateStartDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
- (id)_adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 pinMode:(unsigned long long)arg3 clientCalendarDate:(id *)arg4;
- (id)adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;
- (id)_pinDate:(id)arg1 withPinMode:(unsigned long long)arg2;
- (void)overrideStartDate:(id)arg1;
@property(copy, nonatomic) NSDate *startDate;
@property(readonly, nonatomic) EKCalendarDate *startCalendarDate;
- (id)_committedEndDate;
- (id)_committedStartDate;
- (void)setStartDateRaw:(id)arg1;
- (id)startDateRaw;
@property(readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property(nonatomic, getter=isAllDay) _Bool allDay;
- (_Bool)_isAllDay;
@property(nonatomic) _Bool isPhantom;
- (void)setPhantomMaster:(_Bool)arg1;
- (_Bool)phantomMaster;
- (id)title;
- (void)setTitle:(id)arg1;
- (id)committedValueForKey:(id)arg1;
- (void)postModifiedNotification;
@property(readonly, nonatomic) _Bool isAllDayDirty;
@property(readonly, nonatomic) _Bool isEndDateDirty;
@property(readonly, nonatomic) _Bool isStartDateDirty;
@property(readonly, nonatomic) _Bool isStatusDirty;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) NSURL *externalURL;
- (id)externalURI;
@property(readonly, nonatomic) NSDate *recurrenceDate;
@property(readonly, nonatomic) EKRecurrenceIdentifier *recurrenceIdentifier;
@property(readonly, nonatomic) NSString *eventOccurrenceID;
- (id)specificIdentifier;
@property(readonly, nonatomic) NSString *eventIdentifier;
- (unsigned long long)entityType;
- (id)_calculateDurationWithStart:(id)arg1 end:(id)arg2 allDay:(_Bool)arg3;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initWithObjectForCopy:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithEventStore:(id)arg1;
- (id)init;
- (_Bool)_canWriteConferenceURL;
- (void)_updateConferenceURL;
- (_Bool)_hasChangesForConferenceURLDetection;
- (void)updateConferenceURLIfNeeded;
- (id)_prioritizedConferencesSources;
- (id)_detectConferenceURL;
- (id)conferenceURLDetected;
- (void)clearDetectedConferenceURL;
- (id)conferenceURLForDisplay;
- (void)setURLCommon:(id)arg1;
- (void)setNotesCommon:(id)arg1;
@property(readonly, nonatomic) NSArray *locationsWithoutPrediction;
@property(retain, nonatomic) NSArray *locations;
- (_Bool)_couldBeJunkCommon;
@property(nonatomic) unsigned long long cachedJunkStatus; // @dynamic cachedJunkStatus;
- (void)setIsJunk:(_Bool)arg1 shouldSave:(_Bool)arg2;

// Remaining properties
@property(readonly, nonatomic) NSString *UUID; // @dynamic UUID;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, nonatomic) EKEventStore *eventStore;
@property(readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;
@property(readonly) Class superclass;
@property(retain, nonatomic) EKStructuredLocation *travelStartLocation; // @dynamic travelStartLocation;

@end

