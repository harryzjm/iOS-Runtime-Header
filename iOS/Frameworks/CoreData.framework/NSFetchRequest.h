//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreData/NSCoding-Protocol.h>
#import <CoreData/NSCopying-Protocol.h>
#import <CoreData/NSSecureCoding-Protocol.h>

@class NSArray, NSEntityDescription, NSPredicate, NSString;

@interface NSFetchRequest <NSSecureCoding, NSCoding, NSCopying>
{
    NSArray *_groupByProperties;
    NSPredicate *_havingPredicate;
    id *_additionalPrivateIvars;
    NSArray *_valuesToFetch;
    NSEntityDescription *_entity;
    NSPredicate *_predicate;
    NSArray *_sortDescriptors;
    unsigned long long _batchSize;
    unsigned long long _fetchLimit;
    unsigned long long _allocationSize;
    NSArray *_relationshipKeyPathsForPrefetching;
    struct _fetchRequestFlags {
        unsigned int distinctValuesOnly:1;
        unsigned int includesSubentities:1;
        unsigned int includesPropertyValues:1;
        unsigned int resultType:3;
        unsigned int returnsObjectsAsFaults:1;
        unsigned int excludePendingChanges:1;
        unsigned int isInUse:1;
        unsigned int entityIsName:1;
        unsigned int refreshesRefetched:1;
        unsigned int propertiesValidated:1;
        unsigned int expressionsValidated:1;
        unsigned int disableCaching:1;
        unsigned int allocationType:3;
        unsigned int batchLRUEntries:4;
        unsigned int asyncRequest:1;
        unsigned int purgeable:1;
        unsigned int _RESERVED:9;
    } _flags;
}

+ (id)fetchRequestWithEntityName:(id)arg1;
+ (_Bool)supportsSecureCoding;
+ (_Bool)accessInstanceVariablesDirectly;
+ (void)initialize;
+ (id)decodeFromXPCArchive:(id)arg1 withContext:(id)arg2 andPolicy:(id)arg3;
+ (id)_newDenormalizedFetchProperties:(id)arg1;
+ (id)_stringForFetchRequestResultType:(unsigned long long)arg1;
@property(retain, nonatomic) NSPredicate *havingPredicate;
@property(copy, nonatomic) NSArray *propertiesToGroupBy;
@property(readonly, nonatomic) NSString *entityName;
- (id)initWithEntityName:(id)arg1;
@property(nonatomic) _Bool shouldRefreshRefetchedObjects;
@property(retain, nonatomic) NSArray *affectedStores;
@property(nonatomic) unsigned long long fetchBatchSize;
@property(nonatomic) unsigned long long fetchOffset;
@property(copy, nonatomic) NSArray *propertiesToFetch;
@property(nonatomic) _Bool returnsDistinctResults;
@property(nonatomic) _Bool includesPendingChanges;
@property(nonatomic) unsigned long long resultType;
@property(nonatomic) _Bool includesPropertyValues;
@property(nonatomic) _Bool purgeableResult;
- (void)setAllocationSize:(unsigned long long)arg1;
- (unsigned long long)allocationSize;
- (void)setAllocationType:(unsigned long long)arg1;
- (unsigned long long)allocationType;
@property(nonatomic) _Bool includesSubentities;
@property(nonatomic) _Bool returnsObjectsAsFaults;
@property(copy, nonatomic) NSArray *relationshipKeyPathsForPrefetching;
@property(nonatomic) unsigned long long fetchLimit;
@property(retain, nonatomic) NSArray *sortDescriptors;
@property(retain, nonatomic) NSPredicate *predicate;
@property(retain, nonatomic) NSEntityDescription *entity;
- (id)execute:(id *)arg1;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)encodeForXPC;
- (void)_writeIntoData:(id)arg1 propertiesDict:(id)arg2 uniquedPropertyNames:(id)arg3 uniquedStrings:(id)arg4 uniquedData:(id)arg5 uniquedMappings:(id)arg6 entities:(id)arg7;
- (void)_setFlagsFromXPCEncoding:(id)arg1;
- (id)_XPCEncodedFlags;
- (unsigned long long)requestType;
- (void)_throwIfNotEditable;
- (_Bool)_isEditable;
- (void)_incrementInUseCounter;
- (void)_resolveEntityWithContext:(id)arg1;
- (id)_copyForDirtyContext;
- (void)_setFetchBatchLRUEntriesLimit:(unsigned long long)arg1;
- (unsigned long long)_fetchBatchLRUEntriesLimit;
- (void)_setDisablePersistentStoreResultCaching:(_Bool)arg1;
- (_Bool)_disablePersistentStoreResultCaching;
- (_Bool)_isAsyncRequest;
- (id)_asyncResultHandle;
- (void)_setAsyncResultHandle:(id)arg1;
- (_Bool)_isCachingFetchRequest;

@end

