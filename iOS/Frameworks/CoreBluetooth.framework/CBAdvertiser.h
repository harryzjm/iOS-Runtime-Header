//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CoreBluetooth/CBActivatable-Protocol.h>
#import <CoreBluetooth/CBErrorReporting-Protocol.h>
#import <CoreBluetooth/CBInterruptable-Protocol.h>
#import <CoreBluetooth/CBLabelable-Protocol.h>
#import <CoreBluetooth/CBRemotable-Protocol.h>
#import <CoreBluetooth/CBStateReporting-Protocol.h>
#import <CoreBluetooth/CBXPCReceivable-Protocol.h>
#import <CoreBluetooth/CUXPCCodable-Protocol.h>

@class CBDevice, NSData, NSString;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface CBAdvertiser : NSObject <CBXPCReceivable, CUXPCCodable, CBActivatable, CBErrorReporting, CBInterruptable, CBLabelable, CBStateReporting, CBRemotable>
{
    _Bool _activateCalled;
    CDUnknownBlockType _activateCompletion;
    _Bool _changesPending;
    _Bool _direct;
    _Bool _invalidateCalled;
    _Bool _invalidateDone;
    struct LogCategory *_ucat;
    NSObject<OS_xpc_object> *_xpcCnx;
    unsigned char _nearbyActionType;
    unsigned char _nearbyActionV2Type;
    int _advertiseRate;
    unsigned int _nearbyActionFlags;
    unsigned int _nearbyActionV2Flags;
    unsigned int _clientID;
    unsigned int _internalFlags;
    long long _bluetoothState;
    CDUnknownBlockType _bluetoothStateChangedHandler;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    CDUnknownBlockType _errorHandler;
    CDUnknownBlockType _interruptionHandler;
    CDUnknownBlockType _invalidationHandler;
    NSString *_label;
    CBDevice *_remoteDevice;
    NSData *_nearbyActionV2TargetData;
    NSObject<OS_xpc_object> *_xpcListenerEndpoint;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NSObject<OS_xpc_object> *xpcListenerEndpoint; // @synthesize xpcListenerEndpoint=_xpcListenerEndpoint;
@property(nonatomic) unsigned int internalFlags; // @synthesize internalFlags=_internalFlags;
@property(nonatomic) unsigned int clientID; // @synthesize clientID=_clientID;
@property(nonatomic) unsigned char nearbyActionV2Type; // @synthesize nearbyActionV2Type=_nearbyActionV2Type;
@property(copy, nonatomic) NSData *nearbyActionV2TargetData; // @synthesize nearbyActionV2TargetData=_nearbyActionV2TargetData;
@property(nonatomic) unsigned int nearbyActionV2Flags; // @synthesize nearbyActionV2Flags=_nearbyActionV2Flags;
@property(nonatomic) unsigned char nearbyActionType; // @synthesize nearbyActionType=_nearbyActionType;
@property(nonatomic) unsigned int nearbyActionFlags; // @synthesize nearbyActionFlags=_nearbyActionFlags;
@property(nonatomic) int advertiseRate; // @synthesize advertiseRate=_advertiseRate;
@property(retain, nonatomic) CBDevice *remoteDevice; // @synthesize remoteDevice=_remoteDevice;
@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
@property(copy, nonatomic) CDUnknownBlockType invalidationHandler; // @synthesize invalidationHandler=_invalidationHandler;
@property(copy, nonatomic) CDUnknownBlockType interruptionHandler; // @synthesize interruptionHandler=_interruptionHandler;
@property(copy, nonatomic) CDUnknownBlockType errorHandler; // @synthesize errorHandler=_errorHandler;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(copy, nonatomic) CDUnknownBlockType bluetoothStateChangedHandler; // @synthesize bluetoothStateChangedHandler=_bluetoothStateChangedHandler;
@property(readonly, nonatomic) long long bluetoothState; // @synthesize bluetoothState=_bluetoothState;
- (void)_xpcReceivedPowerStateChanged:(id)arg1;
- (void)_xpcReceivedMessage:(id)arg1;
- (void)xpcReceivedMessage:(id)arg1;
- (void)_update;
- (void)_updateIfNeededWithBlock:(CDUnknownBlockType)arg1;
- (void)_invalidated;
- (void)_invalidateDirect;
- (void)invalidate;
- (void)_interrupted;
- (id)_ensureXPCStarted;
- (void)_activateXPCCompleted:(id)arg1;
- (void)_activateXPCStart:(_Bool)arg1;
- (void)_activateDirectStart;
- (void)_activate;
- (void)activateWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)updateWithCBAdvertiser:(id)arg1;
- (id)descriptionWithLevel:(int)arg1;
- (id)description;
- (void)encodeWithXPCObject:(id)arg1;
- (id)initWithXPCObject:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)init;

@end

