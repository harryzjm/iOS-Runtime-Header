//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <ClassKit/NSCopying-Protocol.h>
#import <ClassKit/NSSecureCoding-Protocol.h>

@class CLSAdminRequestor, NSArray, NSString;

@interface CLSSearchSpecification : NSObject <NSCopying, NSSecureCoding>
{
    _Bool _includeUnsearchablePersons;
    unsigned long long _options;
    unsigned long long _behaviors;
    NSString *_searchString;
    NSArray *_searchTokens;
    unsigned long long _compareOptions;
    CLSAdminRequestor *_adminRequestor;
    NSArray *_classSortDescriptors;
    NSArray *_classLocationIDs;
    NSArray *_personSortDescriptors;
    NSArray *_personLocationIDs;
    NSString *_requiredRoleID;
    long long _requiredRoleType;
    NSString *_requiredPrivilege;
    NSArray *_requiredPrivilegeLocationIDs;
    NSString *_prohibitedPrivilege;
    NSArray *_prohibitedPrivilegeLocationIDs;
    NSArray *_locationSortDescriptors;
    NSArray *_locationPersonIDs;
    long long _requiredLocationRoleType;
    NSString *_requiredLocationPrivilege;
    NSArray *_requiredLocationPersonIDs;
    NSString *_prohibitedLocationPrivilege;
    NSArray *_prohibitedLocationPersonIDs;
    NSArray *_organizationSortDescriptors;
    NSString *_requiredOrganizationEmailDomain;
    NSArray *_requiredClassMemberClassIDs;
    unsigned long long _requiredClassMemberRole;
}

+ (id)newlineAnchoredPredicateValueForToken:(id)arg1;
+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
@property unsigned long long requiredClassMemberRole; // @synthesize requiredClassMemberRole=_requiredClassMemberRole;
@property(copy) NSArray *requiredClassMemberClassIDs; // @synthesize requiredClassMemberClassIDs=_requiredClassMemberClassIDs;
@property(copy) NSString *requiredOrganizationEmailDomain; // @synthesize requiredOrganizationEmailDomain=_requiredOrganizationEmailDomain;
@property(copy) NSArray *organizationSortDescriptors; // @synthesize organizationSortDescriptors=_organizationSortDescriptors;
@property(copy) NSArray *prohibitedLocationPersonIDs; // @synthesize prohibitedLocationPersonIDs=_prohibitedLocationPersonIDs;
@property(copy) NSString *prohibitedLocationPrivilege; // @synthesize prohibitedLocationPrivilege=_prohibitedLocationPrivilege;
@property(copy) NSArray *requiredLocationPersonIDs; // @synthesize requiredLocationPersonIDs=_requiredLocationPersonIDs;
@property(copy) NSString *requiredLocationPrivilege; // @synthesize requiredLocationPrivilege=_requiredLocationPrivilege;
@property long long requiredLocationRoleType; // @synthesize requiredLocationRoleType=_requiredLocationRoleType;
@property(copy) NSArray *locationPersonIDs; // @synthesize locationPersonIDs=_locationPersonIDs;
@property(copy) NSArray *locationSortDescriptors; // @synthesize locationSortDescriptors=_locationSortDescriptors;
@property(copy) NSArray *prohibitedPrivilegeLocationIDs; // @synthesize prohibitedPrivilegeLocationIDs=_prohibitedPrivilegeLocationIDs;
@property(copy) NSString *prohibitedPrivilege; // @synthesize prohibitedPrivilege=_prohibitedPrivilege;
@property(copy) NSArray *requiredPrivilegeLocationIDs; // @synthesize requiredPrivilegeLocationIDs=_requiredPrivilegeLocationIDs;
@property(copy) NSString *requiredPrivilege; // @synthesize requiredPrivilege=_requiredPrivilege;
@property long long requiredRoleType; // @synthesize requiredRoleType=_requiredRoleType;
@property(copy) NSString *requiredRoleID; // @synthesize requiredRoleID=_requiredRoleID;
@property(copy) NSArray *personLocationIDs; // @synthesize personLocationIDs=_personLocationIDs;
@property(copy) NSArray *personSortDescriptors; // @synthesize personSortDescriptors=_personSortDescriptors;
@property _Bool includeUnsearchablePersons; // @synthesize includeUnsearchablePersons=_includeUnsearchablePersons;
@property(copy, nonatomic) NSArray *classLocationIDs; // @synthesize classLocationIDs=_classLocationIDs;
@property(copy) NSArray *classSortDescriptors; // @synthesize classSortDescriptors=_classSortDescriptors;
@property(copy) CLSAdminRequestor *adminRequestor; // @synthesize adminRequestor=_adminRequestor;
@property(nonatomic) unsigned long long compareOptions; // @synthesize compareOptions=_compareOptions;
@property(copy, nonatomic) NSArray *searchTokens; // @synthesize searchTokens=_searchTokens;
@property(copy) NSString *searchString; // @synthesize searchString=_searchString;
@property(nonatomic) unsigned long long behaviors; // @synthesize behaviors=_behaviors;
@property(nonatomic) unsigned long long options; // @synthesize options=_options;
- (_Bool)isClassMemberSearch;
- (_Bool)isOrganizationSearch;
- (_Bool)isLocationSearch;
- (_Bool)isClassSearch;
- (_Bool)isPersonSearch;
- (_Bool)hasLocationConstraints;
- (_Bool)hasPersonConstraints;
- (_Bool)canUsePersonPredicate;
- (_Bool)canUseClassPredicate;
- (_Bool)requiresDashboardEntitlement;
- (_Bool)isValid:(_Bool)arg1 error:(id *)arg2;
- (id)predicateWithLocationIDs:(id)arg1;
- (id)predicate;
- (id)predicateForClasses;
- (id)predicateForPersonsWithPersonIDs:(id)arg1;
- (id)predicateForPersons;
- (id)predicateUsingSubPredicateBlock:(CDUnknownBlockType)arg1;
- (id)dictionaryRepresentation;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithOptions:(unsigned long long)arg1 behaviors:(unsigned long long)arg2 searchString:(id)arg3 requestor:(id)arg4;
- (id)initWithOptions:(unsigned long long)arg1 behaviors:(unsigned long long)arg2 searchString:(id)arg3;
- (id)initWithOptions:(unsigned long long)arg1 behaviors:(unsigned long long)arg2;
- (void)prohibitPrivilege:(id)arg1 atLocationIDs:(id)arg2;
- (void)requirePrivilege:(id)arg1 atLocationIDs:(id)arg2;
- (void)requireRole:(id)arg1 atLocationIDs:(id)arg2;
- (void)requireRoleType:(long long)arg1 atLocationIDs:(id)arg2;
- (id)predicateForPersonsWithObjectIDs:(id)arg1;
- (void)restrictToClassesAtLocationIDs:(id)arg1;
- (void)prohibitPrivilege:(id)arg1 onPersonIDs:(id)arg2;
- (void)requirePrivilege:(id)arg1 onPersonIDs:(id)arg2;
- (void)requireRoleType:(long long)arg1 onPersonIDs:(id)arg2;
- (void)restrictToOrganizationsMatchingEmailDomain:(id)arg1;
- (void)requireClassMemberRole:(unsigned long long)arg1 forClassIDs:(id)arg2;

@end

