//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <GameController/GCDevice-Protocol.h>
#import <GameController/GCDeviceLegacy-Protocol.h>
#import <GameController/NSSecureCoding-Protocol.h>
#import <GameController/_GCIPCObject-Protocol.h>

@class GCControllerSettings, GCDeviceBattery, GCDeviceHaptics, GCDeviceLight, GCExtendedGamepad, GCGamepad, GCMicroGamepad, GCMotion, GCPhysicalInputProfile, NSArray, NSMutableArray, NSString;
@protocol GCControllerMotionConfigurableSensors, GCControllerPlayerIndicator, GCControllerProductInfo, GCControllerSettingsComponent, GCDeviceBatteryComponent, GCDeviceGameIntentComponent, GCDeviceHapticCapabilityInfo, GCDeviceLightComponent, GCNamedProfile, GCSystemGestureComponent, NSCopying><NSObject><NSSecureCoding, OS_dispatch_queue;

@interface GCController : NSObject <_GCIPCObject, NSSecureCoding, GCDeviceLegacy, GCDevice>
{
    NSObject<OS_dispatch_queue> *_handlerQueue;
    id <NSCopying><NSObject><NSSecureCoding> _identifier;
    NSArray *_components;
    id <GCControllerProductInfo> _info;
    GCPhysicalInputProfile *_physicalInput;
    GCMotion *_motion;
    id <GCControllerMotionConfigurableSensors> _motionConfigurableSensors;
    id <GCControllerSettingsComponent> _settings;
    id <GCControllerPlayerIndicator> _playerIndicator;
    id <GCDeviceHapticCapabilityInfo> _hapticCapabilityInfo;
    id <GCDeviceLightComponent> _light;
    id <GCDeviceBatteryComponent> _battery;
    id <GCDeviceGameIntentComponent> _gameIntent;
    id <GCSystemGestureComponent> _systemGesture;
    id <GCNamedProfile> _profile;
    NSString *_uniqueIdentifier;
    unsigned int _service;
    NSMutableArray *_hidServices;
    NSString *_physicalDeviceUniqueID;
    NSString *_debugName;
    NSString *_vendorName;
    NSString *_description;
    unsigned long long _deviceHash;
    long long _playerIndex;
    _Bool _physicalDeviceUsesCompass;
    _Bool _forwarded;
    _Bool _allHIDDevicesConnected;
    _Bool _published;
    _Bool _isProxyController;
    _Bool _snapshot;
    CDUnknownBlockType _controllerPausedHandler;
}

+ (_Bool)shouldMonitorBackgroundEvents;
+ (void)setShouldMonitorBackgroundEvents:(_Bool)arg1;
+ (id)controllerWithExtendedGamepad;
+ (id)controllerWithMicroGamepad;
+ (void)stopWirelessControllerDiscovery;
+ (void)startWirelessControllerDiscoveryWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)_startWirelessControllerDiscoveryWithCompanions:(_Bool)arg1 btClassic:(_Bool)arg2 btle:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (id)controllers;
+ (id)current;
+ (void)__daemon__appDidEnterBackground;
+ (void)__daemon__appWillEnterForeground;
+ (_Bool)supportsSecureCoding;
+ (void)__setLogger__:(CDUnknownBlockType)arg1;
+ (void)__openXPC_and_CBApplicationDidBecomeActive__;
+ (void)__openXPC__;
+ (void)__open__;
- (void).cxx_destruct;
@property(readonly, nonatomic) id <NSCopying><NSObject><NSSecureCoding> identifier; // @synthesize identifier=_identifier;
@property(readonly, getter=isSnapshot) _Bool snapshot; // @synthesize snapshot=_snapshot;
@property(copy, nonatomic) CDUnknownBlockType controllerPausedHandler; // @synthesize controllerPausedHandler=_controllerPausedHandler;
@property(copy, nonatomic) NSArray *components; // @synthesize components=_components;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *handlerQueue; // @synthesize handlerQueue=_handlerQueue;
- (void)_triggerGameIntent;
- (void)dealloc;
- (id)capture;
- (void)_setSnapshot:(_Bool)arg1;
- (void)_becomeCurrent;
@property(readonly, retain, nonatomic) GCDeviceLight *light;
- (void)removeHapticEngines;
- (void)initializeHapticEngines;
- (id)hapticEngines;
@property(readonly, retain, nonatomic) GCDeviceHaptics *haptics;
@property(readonly, nonatomic) GCMotion *motion;
@property(readonly, nonatomic) GCMicroGamepad *microGamepad;
@property(readonly, nonatomic) GCGamepad *gamepad;
@property(readonly, nonatomic) GCExtendedGamepad *extendedGamepad;
@property(readonly, nonatomic) GCPhysicalInputProfile *physicalInputProfile;
- (id)physicalInputProfileName;
- (void)setIsProxyController:(_Bool)arg1;
- (_Bool)isProxyController;
@property(readonly, copy, nonatomic) GCDeviceBattery *battery;
@property(nonatomic) long long playerIndex;
@property(readonly, nonatomic) GCControllerSettings *settingsForBundleID;
@property(readonly, nonatomic) GCControllerSettings *settings;
@property(readonly, copy) NSString *description;
- (_Bool)isEqualToController:(id)arg1;
@property(readonly, nonatomic, getter=isAttachedToDevice) _Bool attachedToDevice;
- (id)anonymizedIdentifier;
- (id)detailedProductCategory;
@property(readonly, nonatomic) NSString *productCategory;
@property(readonly, copy, nonatomic) NSString *vendorName;
- (void)removeComponent:(id)arg1;
- (id)initWithComponents:(id)arg1;
- (id)initWithIdentifier:(id)arg1 components:(id)arg2;
@property(copy, nonatomic) CDUnknownBlockType __deprecated_controllerPausedHandler;
- (id)_componentOfClass:(Class)arg1;
- (id)_componentWithProtocol:(id)arg1;
- (void)_addComponent:(id)arg1;
- (id)controllerSettings;
@property(readonly, nonatomic) id <GCSystemGestureComponent> systemGestureComponent;
@property(readonly, nonatomic) id <GCControllerMotionConfigurableSensors> motionConfigurableSensors;
@property(readonly, nonatomic, getter=isComponentBased) _Bool componentBased;
- (id)_legacy_batteryStatus;
- (id)_legacy_motion;
- (id)_legacy_mouse;
- (id)_legacy_keyboard;
- (id)_legacy_extendedGamepad;
- (id)_legacy_microGamepad;
- (id)_legacy_gamepad;
- (id)_legacy_physicalInputProfile;
- (id)_legacy_physicalInputProfileName;
- (void)_legacy_setPlayerIndex:(long long)arg1;
- (long long)_legacy_playerIndex;
- (unsigned int)sampleRate;
- (_Bool)isATVRemote;
- (void)clearServiceRef;
- (void)removeServiceRef:(struct __IOHIDServiceClient *)arg1;
- (_Bool)hasServiceRef:(struct __IOHIDServiceClient *)arg1;
- (void)addServiceRef:(id)arg1;
- (void)addServiceRefsWithDevice:(id)arg1;
- (void)addServiceRefs:(id)arg1;
- (void *)createInputBufferForDevice:(struct __IOHIDDevice *)arg1 withSize:(unsigned long long)arg2;
- (void)handleEvent:(struct __IOHIDEvent *)arg1;
- (id)_legacy_description;
- (void)_legacy_invalidateDescription;
- (_Bool)_legacy_isEqualToController:(id)arg1;
- (id)_legacy_productCategory;
- (_Bool)displayTrueSiriRemoteName;
- (void)setVendorName:(id)arg1;
- (id)_legacy_vendorName;
- (_Bool)_legacy_isAttachedToDevice;
@property(nonatomic, getter=isPublished) _Bool published;
@property(nonatomic, getter=areAllHIDDevicesConnected) _Bool allHIDDevicesConnected;
@property(nonatomic, getter=isForwarded) _Bool forwarded;
@property(copy, nonatomic) NSString *debugName;
- (void)setDeviceHash:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long deviceHash;
@property(nonatomic) _Bool physicalDeviceUsesCompass;
@property(retain, nonatomic) NSString *physicalDeviceUniqueID;
- (void)setService:(unsigned int)arg1;
@property(readonly, nonatomic) unsigned int service;
- (void)setHidServices:(id)arg1;
@property(readonly, nonatomic) NSArray *hidServices;
@property(retain, nonatomic) NSString *uniqueIdentifier;
@property(retain, nonatomic) GCPhysicalInputProfile<GCNamedProfile> *profile;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithServiceRef:(struct __IOHIDServiceClient *)arg1;
- (id)initWithProfileClass:(Class)arg1 serviceRef:(struct __IOHIDServiceClient *)arg2;
- (id)initWithProfile:(id)arg1;
- (id)initWithProfileClass:(Class)arg1 services:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

