//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NEIKEv2MOBIKE, NEIKEv2Rekey, NEIKEv2Server, NEIKEv2Session, NEUserNotification, NSArray, NSDictionary, NSObject, NWPath, NWPathEvaluator, NWResolver;
@protocol OS_dispatch_queue, OS_dispatch_semaphore, OS_dispatch_source;

@interface NEIKEv2PacketTunnelProvider
{
    _Bool _isIfCellular;
    _Bool _hasNAT;
    _Bool _dispose;
    _Bool _sessionDidConnect;
    _Bool _mobikeCapable;
    _Bool _authenticationPrompted;
    _Bool _isObserving;
    unsigned int _flags;
    NSArray *_ikeConfig;
    NSArray *_localTrafficSelectors;
    NSArray *_remoteTrafficSelectors;
    NSDictionary *_options;
    struct NEVirtualInterface_s *_virtualInterface;
    NEIKEv2Server *_server;
    NWResolver *_resolver;
    NSObject<OS_dispatch_source> *_resolverWaitTimer;
    NEIKEv2Rekey *_rekey;
    NSObject<OS_dispatch_semaphore> *_getSocketSemaphore;
    NEIKEv2MOBIKE *_mobikeHandle;
    CDUnknownBlockType _startTunnelCompletionHandler;
    CDUnknownBlockType _stopTunnelCompletionHandler;
    CDUnknownBlockType _dnsResolverCompletionHandler;
    long long _tunnelKind;
    NWPath *_path;
    NEUserNotification *_g_notification;
    NEIKEv2Session *_session;
    unsigned long long _ifIndex;
    long long _pathStatus;
    NSObject<OS_dispatch_queue> *_queue;
    NWPathEvaluator *_scopedPathEvaluator;
}

- (void).cxx_destruct;
@property(retain) NWPathEvaluator *scopedPathEvaluator; // @synthesize scopedPathEvaluator=_scopedPathEvaluator;
@property unsigned int flags; // @synthesize flags=_flags;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property long long pathStatus; // @synthesize pathStatus=_pathStatus;
@property unsigned long long ifIndex; // @synthesize ifIndex=_ifIndex;
@property(retain) NEIKEv2Session *session; // @synthesize session=_session;
@property _Bool isObserving; // @synthesize isObserving=_isObserving;
@property(retain) NEUserNotification *g_notification; // @synthesize g_notification=_g_notification;
@property _Bool authenticationPrompted; // @synthesize authenticationPrompted=_authenticationPrompted;
@property(retain) NWPath *path; // @synthesize path=_path;
@property _Bool mobikeCapable; // @synthesize mobikeCapable=_mobikeCapable;
@property _Bool sessionDidConnect; // @synthesize sessionDidConnect=_sessionDidConnect;
@property long long tunnelKind; // @synthesize tunnelKind=_tunnelKind;
@property _Bool dispose; // @synthesize dispose=_dispose;
@property(copy) CDUnknownBlockType dnsResolverCompletionHandler; // @synthesize dnsResolverCompletionHandler=_dnsResolverCompletionHandler;
@property(copy) CDUnknownBlockType stopTunnelCompletionHandler; // @synthesize stopTunnelCompletionHandler=_stopTunnelCompletionHandler;
@property(copy) CDUnknownBlockType startTunnelCompletionHandler; // @synthesize startTunnelCompletionHandler=_startTunnelCompletionHandler;
@property(retain) NEIKEv2MOBIKE *mobikeHandle; // @synthesize mobikeHandle=_mobikeHandle;
@property(retain) NSObject<OS_dispatch_semaphore> *getSocketSemaphore; // @synthesize getSocketSemaphore=_getSocketSemaphore;
@property(retain) NEIKEv2Rekey *rekey; // @synthesize rekey=_rekey;
@property(retain) NSObject<OS_dispatch_source> *resolverWaitTimer; // @synthesize resolverWaitTimer=_resolverWaitTimer;
@property(retain) NWResolver *resolver; // @synthesize resolver=_resolver;
@property(retain) NEIKEv2Server *server; // @synthesize server=_server;
@property _Bool hasNAT; // @synthesize hasNAT=_hasNAT;
@property _Bool isIfCellular; // @synthesize isIfCellular=_isIfCellular;
@property struct NEVirtualInterface_s *virtualInterface; // @synthesize virtualInterface=_virtualInterface;
@property(retain) NSDictionary *options; // @synthesize options=_options;
@property(retain) NSArray *remoteTrafficSelectors; // @synthesize remoteTrafficSelectors=_remoteTrafficSelectors;
@property(retain) NSArray *localTrafficSelectors; // @synthesize localTrafficSelectors=_localTrafficSelectors;
@property(retain) NSArray *ikeConfig; // @synthesize ikeConfig=_ikeConfig;
- (_Bool)NEIKEv2ProviderAuthenticate:(id)arg1;
- (_Bool)tryAlternateServerAddresses;
- (void)setTunnelNetworkSettings:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startRekeyTimer:(_Bool)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)observerHelperHandler:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)handleConfigChange;
- (void)handleDNSResolution;
- (void)handleScopedPathChange;
- (void)watchIKESocketChange;
- (void)handleDefaultPathChange;
- (void)handleInterfaceChange:(_Bool)arg1;
- (void)handleInterfaceDown;
- (void)handleAdditionalServerAddressesNotification:(id)arg1;
- (int)handleRedirectNotification:(id)arg1;
- (void)invokeCancelTunnel:(int)arg1;
- (_Bool)invokeStartTunnelCompletionHandler:(id)arg1;
- (id)createPacketTunnelNetworkSettings;
- (long long)tunnelTeardown;
- (int)tunnelBringup;
- (void)setupIKEv2CallbackBlocks;
- (void)resolveServerAddressIfNeeded:(CDUnknownBlockType)arg1;
- (void)wake;
- (void)wakeIKEv2;
- (void)stopTunnelWithReason:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)stopIKEv2TunnelWithReason:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startTunnelWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startIKEv2TunnelWithOptions:(id)arg1;
- (void)dealloc;
- (void)stopObserving;
- (void)reset:(_Bool)arg1;
- (id)init;
- (void)ignoreSigPipe;
- (id)description;
- (id)stringForTunnelKind;

@end

