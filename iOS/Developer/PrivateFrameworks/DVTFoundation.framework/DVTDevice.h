//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class DVTCPUCount, DVTDeviceType, DVTDispatchLock, DVTExtension, DVTPlatform, NSArray, NSData, NSDictionary, NSError, NSMutableArray, NSMutableSet, NSNumber, NSOrderedSet, NSSet, NSString, NSURL, UTType;
@protocol DVTBasicDevice, OS_dispatch_queue;

@interface DVTDevice : NSObject
{
    NSObject<OS_dispatch_queue> *_instrumentsServerMessageQueue;
    unsigned long long _state;
    NSMutableArray *_deviceOperations;
    unsigned long long _nonBlockingOperationCount;
    DVTDispatchLock *_deviceOperationLock;
    NSMutableSet *_capabilities;
    NSObject<OS_dispatch_queue> *_appListingChannelQueue;
    NSObject<OS_dispatch_queue> *_stateControlQueue;
    _Atomic unsigned int _demandRetainCount;
    _Bool _deviceIsBusy;
    _Bool isInternalBuild;
    _Bool _dvtDevicesWindow_canSSH;
    _Bool _allowsSecureServices;
    _Bool _usedForDevelopment;
    _Bool _canSelectArchitectureToExecute;
    _Bool _isCloudDevice;
    _Bool _isCloudDevicePlaceholder;
    _Bool _supportsSensorReplayFile;
    _Bool _available;
    DVTExtension *_extension;
    NSURL *_deviceLocation;
    NSString *_disambiguousIdentifier;
    NSString *_nativeArchitecture;
    NSString *_operatingSystemVersionWithBuildNumber;
    NSString *_modelUTI;
    NSString *_modelName;
    NSArray *_deviceSummaryPropertyDictionaries;
    NSArray *_deviceSummaryInternalPropertyDictionaries;
    NSString *_dvtDevicesWindow_isWirelessEnabled;
    unsigned long long _visibilityPreference;
    DVTDeviceType *_deviceType;
    NSSet *_translatedArchitectures;
    long long _directSSHPort;
    long long _remoteSSHPort;
    long long _rsyncPort;
    NSString *_name;
    NSString *_modelCode;
    DVTPlatform *_platform;
    NSString *_operatingSystemVersion;
    NSString *_iOSSupportVersion;
    NSString *_operatingSystemBuild;
    DVTCPUCount *_cpuCountDescription;
    NSString *_cpuKind;
    NSNumber *_cpuSpeedMHz;
    NSNumber *_busSpeedMHz;
    NSString *_identifier;
    NSError *_lastPairingError;
}

+ (id)keyPathsForValuesAffectingHasConnection;
+ (id)keyPathsForValuesAffectingIgnored;
+ (id)modelNameFromModelUTI:(id)arg1;
+ (id)modelUTIFromModelCode:(id)arg1;
+ (id)keyPathsForValuesAffectingSupportedArchitectures;
+ (id)keyPathsForValuesAffectingActiveProxiedDevice;
+ (id)deviceFrameworkVersionAnalytics;
+ (id)_knownDeviceLocators;
+ (id)remotePairingVersionScan:(id)arg1;
+ (void)initialize;
- (void).cxx_destruct;
@property(retain) NSError *lastPairingError; // @synthesize lastPairingError=_lastPairingError;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy) NSNumber *busSpeedMHz; // @synthesize busSpeedMHz=_busSpeedMHz;
@property(copy) NSNumber *cpuSpeedMHz; // @synthesize cpuSpeedMHz=_cpuSpeedMHz;
@property(copy) NSString *cpuKind; // @synthesize cpuKind=_cpuKind;
@property(retain) DVTCPUCount *cpuCountDescription; // @synthesize cpuCountDescription=_cpuCountDescription;
@property(copy) NSString *operatingSystemBuild; // @synthesize operatingSystemBuild=_operatingSystemBuild;
@property(copy) NSString *iOSSupportVersion; // @synthesize iOSSupportVersion=_iOSSupportVersion;
@property(copy) NSString *operatingSystemVersion; // @synthesize operatingSystemVersion=_operatingSystemVersion;
@property(retain) DVTPlatform *platform; // @synthesize platform=_platform;
@property(getter=isAvailable) _Bool available; // @synthesize available=_available;
@property(copy, nonatomic) NSString *modelCode; // @synthesize modelCode=_modelCode;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly) long long rsyncPort; // @synthesize rsyncPort=_rsyncPort;
@property(readonly) long long remoteSSHPort; // @synthesize remoteSSHPort=_remoteSSHPort;
@property(readonly) long long directSSHPort; // @synthesize directSSHPort=_directSSHPort;
@property(readonly) _Bool supportsSensorReplayFile; // @synthesize supportsSensorReplayFile=_supportsSensorReplayFile;
@property _Bool isCloudDevicePlaceholder; // @synthesize isCloudDevicePlaceholder=_isCloudDevicePlaceholder;
@property _Bool isCloudDevice; // @synthesize isCloudDevice=_isCloudDevice;
@property _Bool canSelectArchitectureToExecute; // @synthesize canSelectArchitectureToExecute=_canSelectArchitectureToExecute;
@property(copy) NSSet *translatedArchitectures; // @synthesize translatedArchitectures=_translatedArchitectures;
@property(retain) DVTDeviceType *deviceType; // @synthesize deviceType=_deviceType;
@property(nonatomic, getter=isUsedForDevelopment) _Bool usedForDevelopment; // @synthesize usedForDevelopment=_usedForDevelopment;
@property(readonly, nonatomic) _Bool allowsSecureServices; // @synthesize allowsSecureServices=_allowsSecureServices;
@property unsigned long long visibilityPreference; // @synthesize visibilityPreference=_visibilityPreference;
@property(readonly) NSString *dvtDevicesWindow_isWirelessEnabled; // @synthesize dvtDevicesWindow_isWirelessEnabled=_dvtDevicesWindow_isWirelessEnabled;
@property(readonly) _Bool dvtDevicesWindow_canSSH; // @synthesize dvtDevicesWindow_canSSH=_dvtDevicesWindow_canSSH;
@property(readonly) NSArray *deviceSummaryInternalPropertyDictionaries; // @synthesize deviceSummaryInternalPropertyDictionaries=_deviceSummaryInternalPropertyDictionaries;
@property(readonly) NSArray *deviceSummaryPropertyDictionaries; // @synthesize deviceSummaryPropertyDictionaries=_deviceSummaryPropertyDictionaries;
@property(readonly) _Bool isInternalBuild; // @synthesize isInternalBuild;
@property(copy, nonatomic) NSString *modelName; // @synthesize modelName=_modelName;
@property(copy, nonatomic) NSString *modelUTI; // @synthesize modelUTI=_modelUTI;
@property(copy, nonatomic) NSString *operatingSystemVersionWithBuildNumber; // @synthesize operatingSystemVersionWithBuildNumber=_operatingSystemVersionWithBuildNumber;
@property(readonly, copy) NSURL *deviceLocation; // @synthesize deviceLocation=_deviceLocation;
@property(readonly) DVTExtension *extension; // @synthesize extension=_extension;
- (_Bool)hasRetainedDemand;
- (void)releaseDemandWithDelay:(unsigned long long)arg1;
- (void)retainDemand;
@property(readonly) _Bool canConnectOnDemand;
@property(readonly) _Bool supportsDeveloperMode;
@property(readonly) long long developerMode;
- (id)createFileHandleForDebugserver;
- (id)reboot;
- (id)performBatchedRootOperationsWithBlock:(CDUnknownBlockType)arg1;
- (id)uninstallRootsWithIdentifiers:(id)arg1;
- (id)installRootsAtLocalPaths:(id)arg1;
- (id)fetchInstalledRoots;
- (_Bool)supportsInstalledRoots;
- (void)cancelWatchPowerAssertion;
- (void)takeWatchPowerAssertionName:(id)arg1 details:(id)arg2;
- (_Bool)supportsDYLDPrintToStdErr;
- (id)_mobileDevice;
- (id)loggingStream;
- (id)fetchSpecificLaunchFailureReason;
- (id)spawnExecutableAtURL:(id)arg1 withArguments:(id)arg2 environment:(id)arg3 options:(id)arg4;
- (id)launchApplicationAtPath:(id)arg1 withArguments:(id)arg2 environment:(id)arg3 options:(id)arg4;
- (id)launchApplicationWithBundleIdentifier:(id)arg1 withArguments:(id)arg2 environment:(id)arg3 options:(id)arg4;
- (id)installRsyncAtURL:(id)arg1 withOptions:(id)arg2;
- (id)installDSTROOTAtPath:(id)arg1 withOptions:(id)arg2;
- (_Bool)canInstallBuildablesError:(id *)arg1;
- (id)applicationIsInstalledWithBundleIdentifier:(id)arg1;
- (id)uninstallApplicationWithBundleIdentifier:(id)arg1 andOptions:(id)arg2;
- (id)installApplicationAtPath:(id)arg1 withOptions:(id)arg2;
@property(readonly) _Bool canInstallApplication;
- (id)runExecutableAtPath:(id)arg1 withArguments:(id)arg2 environment:(id)arg3 options:(id)arg4 terminationHandler:(CDUnknownBlockType)arg5;
@property(readonly) _Bool canRunExecutables;
- (unsigned long long)makeDeviceReadyForDevelopmentSyncWithError:(id *)arg1;
- (unsigned long long)establishDevelopmentTrustSyncWithError:(id *)arg1;
- (unsigned long long)startDeviceSyncWithError:(id *)arg1;
- (unsigned long long)connectToDeviceSyncWithError:(id *)arg1;
- (unsigned long long)discoverAvailableConnectionsSyncWithError:(id *)arg1;
- (void)makeDeviceReadyForDevelopmentWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)establishDevelopmentTrustWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)startDeviceWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)connectToDeviceWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)discoverAvailableConnectionsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_transitionToState:(unsigned long long)arg1 error:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
@property(nonatomic) unsigned long long state;
@property(readonly) _Bool allowsManagedStateControl;
- (id)shutDownDevice;
- (id)startUpDevice;
@property(readonly) _Bool canStartUpAndShutDown;
- (_Bool)wantsDeviceOperationActivityReporting;
- (void)endDeviceOperation:(id)arg1;
- (void)endDeviceOperation:(id)arg1 error:(id)arg2;
- (id)_startDeviceOperationUserInitiated:(_Bool)arg1 description:(id)arg2 shouldReportAnalyticsWithName:(id)arg3 proxiedDeviceUsed:(id)arg4;
- (id)startUserInitiatedDeviceOperationWithDescription:(id)arg1 analyticsName:(id)arg2;
- (id)startUserInitiatedDeviceOperation;
- (id)startDeviceOperationWithDescription:(id)arg1 analyticsName:(id)arg2 proxiedDeviceUsed:(id)arg3;
- (id)startDeviceOperationWithDescription:(id)arg1 analyticsName:(id)arg2;
- (id)startDeviceOperation;
- (void)takeScreenshotWithCompletionBlock:(CDUnknownBlockType)arg1;
- (id)screenshotController;
@property(readonly) _Bool canTakeScreenshot;
- (void)stopLocationSimulationWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)simulateLocationWithLatitude:(id)arg1 longitude:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)unprepareIfPossible;
- (void)attemptRecoveryFromUnavailabilityError;
@property(readonly) NSString *hostPairingToken;
- (void)unpair;
@property(readonly) _Bool supportsUnpair;
- (void)extendedPairWithPromise:(id)arg1 extendedInformationHandler:(CDUnknownBlockType)arg2;
- (id)_genericDeviceErrorWithMessage:(id)arg1;
@property(readonly) _Bool isPaired;
@property(readonly) _Bool usesPairingRecord;
@property(readonly) _Bool autoPairEnabled;
@property(readonly) _Bool userCanToggleLANConnections;
- (_Bool)disableLANConnectionsWithError:(id *)arg1;
- (id)enableLANConnections;
@property(readonly) _Bool isWirelessEnabled;
@property(copy) NSString *presumedRemoteAddress;
@property(readonly, copy) NSArray *addresses;
@property(readonly, copy) NSString *primaryAddress;
@property(readonly, copy) NSString *hostname;
@property(readonly) _Bool hasConnection;
@property(readonly) _Bool hasWiredConnection;
@property(readonly) _Bool hasWirelessConnection;
@property(readonly) _Bool isWireless;
@property(readonly) _Bool supportsLANConnections;
- (id)crashLogTransferSession;
@property(readonly, nonatomic) _Bool supportsLogFileRetrieval;
@property(readonly) _Bool supportsSimulateVehicularCrash;
@property(readonly) _Bool supportsSimulateMetricPayloads;
- (void)showMessagesExtensionOnProxy:(_Bool)arg1 completed:(CDUnknownBlockType)arg2;
- (void)simulateNotificationWithBundleID:(id)arg1 payload:(id)arg2 onProxy:(_Bool)arg3 completed:(CDUnknownBlockType)arg4;
- (void)pressHomeButtonOnProxy:(_Bool)arg1 completed:(CDUnknownBlockType)arg2;
- (void)showSiriForExtensions:(id)arg1 queryText:(id)arg2 pid:(int)arg3 onProxy:(_Bool)arg4 completed:(CDUnknownBlockType)arg5;
- (void)showQuicklookPreviewForExtension:(id)arg1;
- (void)showWidgetKit:(id)arg1 onProxy:(_Bool)arg2 pid:(int)arg3 completed:(CDUnknownBlockType)arg4;
- (id)_appendEnvSettings:(id)arg1 fromEnv:(id)arg2 toProcessControl:(id)arg3;
- (void)showAppClipWithBundleIdentifer:(id)arg1 pid:(int)arg2 context:(id)arg3 completed:(CDUnknownBlockType)arg4;
- (void)showTodayViewForExtensions:(id)arg1 pid:(int)arg2;
- (id)serviceHubProcessControlChannelOnProxy:(_Bool)arg1;
- (id)serviceHubProcessControlChannel;
- (id)makeServiceHubProcessControlChannelForLauncher:(unsigned long long)arg1 onProxy:(_Bool)arg2;
- (id)makeServiceHubProcessControlChannelForLauncher:(unsigned long long)arg1;
- (_Bool)_shouldAttemptToRetryWatchAppLaunchAttemptForLaunchError:(id)arg1;
- (void)applicationUninstalled:(id)arg1;
- (void)applicationInstalled:(id)arg1;
@property(readonly) unsigned long long supportedLaunchOptionsForProxiedDevice;
@property(readonly) unsigned long long supportedLaunchOptions;
- (_Bool)isAvailableWithError:(id *)arg1;
- (void)cancelPrimaryInstrumentsServer;
- (void)renameDevice:(id)arg1;
@property(readonly) _Bool canRename;
@property(readonly) _Bool canBeWatchCompanion;
- (void)disableDeviceForDevelopment;
- (void)enableDeviceForDevelopment;
- (id)installApplicationsSync:(id)arg1 options:(id)arg2;
- (id)installApplicationSync:(id)arg1 options:(id)arg2;
- (void)requestDebugLaunchOfDaemon:(id)arg1 onPairedDevice:(_Bool)arg2;
- (void)stopDebuggingXPCServices:(id)arg1 forPairedDevice:(_Bool)arg2;
- (void)debugXPCServices:(id)arg1 onPairedDevice:(_Bool)arg2 completionSemaphore:(id)arg3;
- (_Bool)validateDeviceSpecifierOptions:(id)arg1 error:(id *)arg2;
@property(readonly, copy) NSString *nameForDeveloperPortal;
@property(readonly, copy) NSString *platformIdentifier;
@property(readonly) _Bool isRunningSupportedOS;
@property(readonly) _Bool isSupportedHardware;
@property(readonly, getter=isIgnored) _Bool ignored;
- (_Bool)shouldIgnoreGivenVisibilityPreference:(unsigned long long)arg1 automaticallyVisible:(_Bool)arg2;
@property(readonly) _Bool automaticallyVisible;
@property(readonly) _Bool canUserIgnore;
- (void)uninstallProvisioningProfile:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)installProvisioningProfileAtURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)installProvisioningProfiles:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)installProvisioningProfile:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(readonly) NSSet *provisioningProfiles;
@property(readonly) _Bool supportsProvisioning;
@property(readonly) _Bool supportsArchiving;
- (_Bool)canPerformUbiquityFetchEvent;
- (void)performUbiquityFetchEvent;
- (void)snapshotUIForBundleIdentifier:(id)arg1 orPid:(int)arg2 onProxy:(_Bool)arg3 completed:(CDUnknownBlockType)arg4;
- (void)performFetchEventForBundleIdentifier:(id)arg1 orPid:(int)arg2 onProxy:(_Bool)arg3;
- (unsigned long long)backgroundFetchSupportStyle;
@property(readonly) unsigned long long supportsFetchEvents;
- (_Bool)threadSanitizerRequiresDyldInsertLibrary;
- (_Bool)addressSanitizerRequiresDyldInsertLibrary;
@property(readonly) _Bool deferProfileGenerationSetupUntilAfterInstallation;
- (_Bool)supportsPGOReturningError:(id *)arg1;
@property(readonly) _Bool disablesOnlyActiveArch;
@property(readonly) NSString *pathOfLogRedirectDylib;
@property(readonly) _Bool supportsDTServiceHubLogging;
@property(readonly) _Bool supportsDebuggingForAskOnLaunch;
@property(readonly) _Bool supportsUnhostedXPCServiceDebugging;
@property(readonly) _Bool supportsXPCServiceDebugging;
- (_Bool)supportsUISnapshotOnProxy:(_Bool)arg1;
@property(readonly) _Bool canRunMultipleInstancesPerApp;
@property(readonly) _Bool runsRemoteFromHostLauncher;
@property(readonly) _Bool supportsDebugAsDifferentUser;
@property(readonly) _Bool supportsDebuggingDocumentVersioning;
@property(readonly) _Bool supportsResumeAndTurningItOnOrOff;
@property(readonly) _Bool supportsCustomWorkingDirectory;
@property(readonly) _Bool supportsDisplayScaleOption;
- (_Bool)supportSensorReplayFile;
@property(readonly) _Bool supportsRoutingCoverageFile;
@property(readonly) _Bool supportsLocalizationOptions;
@property(readonly) _Bool supportsLocationSimulation;
@property(readonly) NSDictionary *scriptingEnvironment;
- (_Bool)supportsBuildingThinnedResources;
- (id)deviceIdentifierForGPUTracing;
@property(readonly) _Bool supportsApplicationDataUploading;
@property(readonly) _Bool supportsAttachByPIDOrName;
@property(readonly) NSArray *supportedDeviceFamilies;
@property(readonly, copy, nonatomic) NSString *thinningProductType;
@property(readonly, copy, nonatomic) NSString *modelCodename;
@property(readonly, copy, nonatomic) UTType *modelUTType;
- (id)processorDescription;
- (id)coreDeviceIdentifier;
@property(readonly) NSNumber *ecid;
- (void)remotePathForBundleIdentifier:(id)arg1 onProxy:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;
- (void)requestProcessInformationsOnPairedDevice:(_Bool)arg1 handler:(CDUnknownBlockType)arg2;
@property(readonly) NSString *executionDisplayName;
- (id)viewDebuggerDylibPathWithOptions:(id)arg1;
@property(readonly, copy) NSString *extraDebuggingRuntimeDylibPath;
@property(readonly, copy) NSString *recordedFramesLibdispatchIntrospectionDylibPath;
@property(readonly) NSSet *eligibleForAdditionalPlatforms;
@property(readonly) _Bool supportsDaemonDebugging;
@property(readonly) _Bool supportsDebugOverrides;
@property(readonly) _Bool supportsPerformanceAntipatternChecker;
@property(readonly) _Bool supportsMainThreadChecker;
@property(readonly) _Bool supportsRecordedFrames;
@property(readonly) _Bool alwaysAttachesForDebugging;
@property(readonly) _Bool isCoreDevice;
@property(readonly, getter=isConcreteDevice) _Bool concreteDevice;
@property(readonly, getter=isGenericDevice) _Bool genericDevice;
@property(readonly) NSData *displayImageBitmapData;
@property(readonly) NSString *displayOrder;
@property(readonly, copy) NSOrderedSet *supportedArchitectures;
@property(copy) NSString *nativeArchitecture; // @synthesize nativeArchitecture=_nativeArchitecture;
- (void)setDeviceIsBusy:(_Bool)arg1;
@property(readonly) _Bool deviceIsBusy; // @synthesize deviceIsBusy=_deviceIsBusy;
@property(readonly) NSError *unavailabilityError;
@property(readonly) __weak id <DVTBasicDevice> companionDevice;
- (id)prepareSymbolCacheForTargetArch:(id)arg1;
- (id)deviceSupportSymbolsPathForTargetArch:(id)arg1;
@property(readonly, nonatomic) _Bool shouldPrepareDebugSymbols;
@property(readonly) NSString *disambiguousIdentifier; // @synthesize disambiguousIdentifier=_disambiguousIdentifier;
@property(readonly) _Bool isProxiedDevice;
- (void)setActiveProxiedDevice:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setActiveProxiedDevice:(id)arg1;
@property(readonly) _Bool canSetActiveProxiedDevice;
@property(readonly) id <DVTBasicDevice> activeProxiedDevice;
@property(readonly) NSSet *companionDevices;
@property(readonly, copy) NSSet *proxiedDevices;
- (id)servicesMatchingCapability:(id)arg1;
- (id)deviceServicesCategory;
@property(readonly) NSArray *deviceOperations;
- (_Bool)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (void)dealloc;
- (id)initWithDeviceLocation:(id)arg1 extension:(id)arg2;
@property(readonly, copy) NSString *description;
@property(nonatomic, readonly) NSString *nativeArchitectureNonnull;
@property(nonatomic, readonly) DVTPlatform *platformNonnull;

// Remaining properties
@property(readonly, copy) NSSet *capabilities; // @dynamic capabilities;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSMutableSet *mutableCapabilities; // @dynamic mutableCapabilities;
@property(readonly) Class superclass;

@end

