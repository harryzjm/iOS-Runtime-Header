//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CAEAGLLayer, EAGLContext, MISSING_TYPE;
@protocol ETGLSketchRendererDelegate;

@interface ETGLSketchRenderer : NSObject
{
    _Bool _useThisRendererOnlyForWarmup;
    _Bool _isDying;
    _Bool _renderingOffscreen;
    _Bool _useFastVerticalWisp;
    float _currentTimeClock;
    float _currentTimeIndex;
    int _vertexBufferCount;
    int _vertexBufferBegin;
    float _deathTime;
    float _lastBirth;
    unsigned int _shaderProgram;
    unsigned int _vboVertLineId;
    unsigned int _vaoLineID;
    unsigned int _viewRenderbuffer;
    unsigned int _viewFramebuffer;
    unsigned int _backingWidth;
    unsigned int _backingHeight;
    unsigned int _allocatedWidth;
    unsigned int _allocatedHeight;
    double _wispDelay;
    id <ETGLSketchRendererDelegate> _delegate;
    double _lineWidthScaleFactor;
    struct *_allVertices;
    unsigned long long _vertexCount;
    double _cometScaleFactor;
    EAGLContext *_context;
    CAEAGLLayer *_cachedLayer;
    CDUnknownBlockType _completionBlock;
    MISSING_TYPE *_brushColorForInitialColor;
    MISSING_TYPE *_brushColorForFinalColor;
}

+ (void)warmupShaders;
- (void).cxx_destruct;
@property(copy, nonatomic) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
@property(nonatomic) CAEAGLLayer *cachedLayer; // @synthesize cachedLayer=_cachedLayer;
@property(nonatomic) EAGLContext *context; // @synthesize context=_context;
@property(nonatomic) unsigned int allocatedHeight; // @synthesize allocatedHeight=_allocatedHeight;
@property(nonatomic) unsigned int allocatedWidth; // @synthesize allocatedWidth=_allocatedWidth;
@property(nonatomic) double cometScaleFactor; // @synthesize cometScaleFactor=_cometScaleFactor;
@property(nonatomic) unsigned int backingHeight; // @synthesize backingHeight=_backingHeight;
@property(nonatomic) unsigned int backingWidth; // @synthesize backingWidth=_backingWidth;
@property(nonatomic) unsigned int viewFramebuffer; // @synthesize viewFramebuffer=_viewFramebuffer;
@property(nonatomic) unsigned int viewRenderbuffer; // @synthesize viewRenderbuffer=_viewRenderbuffer;
@property(nonatomic) unsigned int vaoLineID; // @synthesize vaoLineID=_vaoLineID;
@property(nonatomic) unsigned int vboVertLineId; // @synthesize vboVertLineId=_vboVertLineId;
@property(nonatomic) unsigned int shaderProgram; // @synthesize shaderProgram=_shaderProgram;
@property(nonatomic) MISSING_TYPE *brushColorForFinalColor; // @synthesize brushColorForFinalColor=_brushColorForFinalColor;
@property(nonatomic) MISSING_TYPE *brushColorForInitialColor; // @synthesize brushColorForInitialColor=_brushColorForInitialColor;
@property(nonatomic) float lastBirth; // @synthesize lastBirth=_lastBirth;
@property(nonatomic) float deathTime; // @synthesize deathTime=_deathTime;
@property(nonatomic) unsigned long long vertexCount; // @synthesize vertexCount=_vertexCount;
@property(nonatomic) int vertexBufferBegin; // @synthesize vertexBufferBegin=_vertexBufferBegin;
@property(nonatomic) int vertexBufferCount; // @synthesize vertexBufferCount=_vertexBufferCount;
@property(nonatomic) struct *allVertices; // @synthesize allVertices=_allVertices;
@property(nonatomic) _Bool useFastVerticalWisp; // @synthesize useFastVerticalWisp=_useFastVerticalWisp;
@property(nonatomic) double lineWidthScaleFactor; // @synthesize lineWidthScaleFactor=_lineWidthScaleFactor;
@property(nonatomic) _Bool renderingOffscreen; // @synthesize renderingOffscreen=_renderingOffscreen;
@property(nonatomic) __weak id <ETGLSketchRendererDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) double wispDelay; // @synthesize wispDelay=_wispDelay;
@property(nonatomic) _Bool isDying; // @synthesize isDying=_isDying;
@property(readonly, nonatomic) float currentTimeIndex; // @synthesize currentTimeIndex=_currentTimeIndex;
@property(readonly, nonatomic) float currentTimeClock; // @synthesize currentTimeClock=_currentTimeClock;
- (void)render;
- (struct CGImage *)createRenderedFrameImageUsingAlpha:(_Bool)arg1;
- (void)_warmupShaders;
- (void)updateVertexBufferWithVertexCount:(unsigned long long)arg1;
- (void)appendDualPointArray:(MISSING_TYPE **)arg1 length:(unsigned long long)arg2 controlPoint:(MISSING_TYPE **)arg3 alternatePoints:(unsigned long long)arg4 alternateLength:(float)arg5 alternateControlPoint:(unsigned long long)arg6 unitSize:(unsigned long long)arg7 segmentIndex:segmentCount: /* Error: Ran out of types for this method. */;
- (void)appendPointArray:(MISSING_TYPE **)arg1 length:(unsigned long long)arg2;
- (void)erase;
- (void)reset;
- (_Bool)resizeFromLayer:(id)arg1;
- (_Bool)resizeFromCachedLayer;
- (void)setupVAOs;
- (int)linkProgramWithVShader:(int)arg1 FShader:(int)arg2;
- (int)loadOneShaderOfType:(unsigned int)arg1 withCString:(const char *)arg2 length:(int)arg3;
- (void)setupShaders;
- (void)setupTexture;
- (void)setupFBOs:(id)arg1;
- (void)setFinalDrawingColor:(MISSING_TYPE **)arg1;
- (void)setInitialDrawingColor:(MISSING_TYPE **)arg1;
- (void)updateGLWithCurrentTime;
- (void)updateGLWithTime:(float)arg1;
- (void)animateOutWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1 andDrawable:(id)arg2;

@end

