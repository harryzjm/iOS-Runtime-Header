//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class ARUIAngularSparkEmitter, CAMediaTimingFunction, MISSING_TYPE, NSArray;
@protocol MTLBuffer;

__attribute__((visibility("hidden")))
@interface ARUISparksCelebration
{
    float _angularRotationDuration;
    float _angularTime;
    float _angularAlpha;
    float _angularAlphaAnimationBeginTime;
    float _angularAlphaAnimationEndTime;
    float _angularAlphaFadeFraction;
    CAMediaTimingFunction *_angularAlphaTimingFunction;
    CAMediaTimingFunction *_angularTimingFunction;
    ARUIAngularSparkEmitter *_angularSparkEmitter;
    NSArray *_kineticSparkEmitters;
    CAMediaTimingFunction *_kineticEasingFunction;
    float _kineticEasingTarget;
    unsigned long long _numberOfEmitters;
    unsigned long long _tangentalParticleCount;
    unsigned long long _burstParticleCount;
    float _completionTime;
    CDUnknownBlockType _completion;
    id <MTLBuffer> _angularVertexBuffer;
    id <MTLBuffer> _angularIndexBuffer;
    unsigned long long _numAngularIndicies;
    unsigned long long _angularParticleCount;
    id <MTLBuffer> _angularSparks;
    id <MTLBuffer> _kineticVertexBuffer;
    id <MTLBuffer> _kineticIndexBuffer;
    unsigned long long _numKineticIndicies;
    unsigned long long _kineticParticleCount;
    id <MTLBuffer> _kineticSparks;
    id <MTLBuffer> _uniformsBuffer;
}

@property(readonly, nonatomic) id <MTLBuffer> uniformsBuffer; // @synthesize uniformsBuffer=_uniformsBuffer;
@property(readonly, nonatomic) id <MTLBuffer> kineticSparks; // @synthesize kineticSparks=_kineticSparks;
@property(readonly, nonatomic) unsigned long long kineticParticleCount; // @synthesize kineticParticleCount=_kineticParticleCount;
@property(readonly, nonatomic) unsigned long long numKineticIndicies; // @synthesize numKineticIndicies=_numKineticIndicies;
@property(readonly, nonatomic) id <MTLBuffer> kineticIndexBuffer; // @synthesize kineticIndexBuffer=_kineticIndexBuffer;
@property(readonly, nonatomic) id <MTLBuffer> kineticVertexBuffer; // @synthesize kineticVertexBuffer=_kineticVertexBuffer;
@property(readonly, nonatomic) float angularTime; // @synthesize angularTime=_angularTime;
@property(readonly, nonatomic) id <MTLBuffer> angularSparks; // @synthesize angularSparks=_angularSparks;
@property(readonly, nonatomic) unsigned long long angularParticleCount; // @synthesize angularParticleCount=_angularParticleCount;
@property(readonly, nonatomic) unsigned long long numAngularIndicies; // @synthesize numAngularIndicies=_numAngularIndicies;
@property(readonly, nonatomic) id <MTLBuffer> angularIndexBuffer; // @synthesize angularIndexBuffer=_angularIndexBuffer;
@property(readonly, nonatomic) id <MTLBuffer> angularVertexBuffer; // @synthesize angularVertexBuffer=_angularVertexBuffer;
- (void).cxx_destruct;
- (void)storeCelebration:(id)arg1 withRing:(id)arg2;
- (void)_applyKineticSparkUpdate:(id)arg1;
- (void)_setupKineticSparkEmitters;
- (void)_applyAngularSparkUpdate:(id)arg1;
- (void)_generateAngularSparks;
- (MISSING_TYPE *)screenBlendedColorFromColor:(unsigned long long)arg1 numberOfIterations: /* Error: Ran out of types for this method. */;
- (unsigned long long)uniformsBufferOffsetForType:(unsigned long long)arg1;
- (void)setTopColor: /* Error: Ran out of types for this method. */;
- (unsigned long long)type;
- (void)endWithCompletion:(CDUnknownBlockType)arg1;
- (void)update:(double)arg1;
- (void *)angularAlphaBytes;
- (void *)angularTimeBytes;
- (id)init;

@end

