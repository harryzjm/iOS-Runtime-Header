//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TSDrawables/TSDDrawableInfo.h>

#import <TSTables/TSCECalculationEngineRegistration-Protocol.h>
#import <TSTables/TSCEColumnRowUIDMapping-Protocol.h>
#import <TSTables/TSDCompatibilityAwareMediaContainer-Protocol.h>
#import <TSTables/TSDContainerInfo-Protocol.h>
#import <TSTables/TSDMixing-Protocol.h>
#import <TSTables/TSDReducibleImageContainer-Protocol.h>
#import <TSTables/TSDReplaceableMediaContainer-Protocol.h>
#import <TSTables/TSDSelectableHintMediaContainer-Protocol.h>
#import <TSTables/TSKModel-Protocol.h>
#import <TSTables/TSKSearchable-Protocol.h>
#import <TSTables/TSSPresetSource-Protocol.h>
#import <TSTables/TSSPropertySource-Protocol.h>
#import <TSTables/TSSStyleClient-Protocol.h>
#import <TSTables/TSTAdditionalHiddenRowColumnProviding-Protocol.h>
#import <TSTables/TSTCompatibilityVersionProviding-Protocol.h>
#import <TSTables/TSTCustomStrokeProviding-Protocol.h>
#import <TSTables/TSTStyleProviding-Protocol.h>
#import <TSTables/TSTTableHiddenRowColumnProviding-Protocol.h>
#import <TSTables/TSTTableInternalGeometryProviding-Protocol.h>
#import <TSTables/TSTTableMergeRangeProviding-Protocol.h>
#import <TSTables/TSTTableStrokeProviding-Protocol.h>
#import <TSTables/TSWPStorageParent-Protocol.h>
#import <TSTables/TSWPTextStatisticsTrackerProvider-Protocol.h>

@class NSArray, NSDictionary, NSObject, NSSet, NSString, NSUUID, TSCECalculationEngine, TSCECoordMapper, TSCEMutableUIDSet, TSCEOwnerUidMapper, TSDFill, TSDInfoGeometry, TSDStroke, TSPObject, TSTArchivedLayoutEngineBundle, TSTCategoryOrder, TSTCategoryOwner, TSTCellStyle, TSTCellWillChangeDistributor, TSTColumnRowUIDMap, TSTConcurrentMutableCellUIDSet, TSTConditionalStyleFormulaOwner, TSTConditionalStyleSet, TSTGroupBy, TSTHiddenStates, TSTHiddenStatesOwner, TSTLayoutEngine, TSTLayoutHint, TSTPencilAnnotationOwner, TSTPivotOwner, TSTPivotRowColumnOrder, TSTSortRuleReferenceTracker, TSTStrokeSidecar, TSTStructuredTextImportRecord, TSTSummaryModel, TSTTableFilterSet, TSTTableGroupSortOrderUID, TSTTableModel, TSTTablePartitioner, TSTTableSortOrder, TSTTableStyle, TSTTableStylePreset, TSTTableTranslator, TSWPParagraphStyle, TSWPShapeStyle;
@protocol TSDInfo, TSDOwningAttachment;

@interface TSTTableInfo : TSDDrawableInfo <TSSPropertySource, TSDReplaceableMediaContainer, TSDReducibleImageContainer, TSDCompatibilityAwareMediaContainer, TSDSelectableHintMediaContainer, TSCECalculationEngineRegistration, TSDContainerInfo, TSDMixing, TSKModel, TSKSearchable, TSSPresetSource, TSSStyleClient, TSCEColumnRowUIDMapping, TSTCompatibilityVersionProviding, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableHiddenRowColumnProviding, TSTAdditionalHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding, TSTTableStrokeProviding, TSWPStorageParent, TSWPTextStatisticsTrackerProvider>
{
    TSTTableModel *_tableModel;
    TSTConditionalStyleSet *_noRuleConditionalStyleSet;
    _Bool _needsFilterSetUpdated;
    _Bool _isCopyContainingCategoryColumn;
    _Bool _hasReference;
    _Bool _isAPivotTable;
    _Bool _wasRemovedFromDocument;
    _Bool _migratingStylesOnly;
    _Bool _documentIsClosing;
    TSTTablePartitioner *_partitioner;
    TSTLayoutEngine *_layoutEngine;
    TSTSummaryModel *_summaryModel;
    TSTGroupBy *_groupBy;
    TSCEMutableUIDSet *_rowUIDsWithPendingGroupingChanges;
    long long _formulaCoordSpace;
    NSDictionary *_dragAndDropDetails;
    TSTLayoutHint *_overrideLayoutHint;
    TSTColumnRowUIDMap *_columnRowUIDMap;
    TSTCategoryOrder *_categoryOrder;
    TSTTableModel *_pivotDataModel;
    TSTPivotRowColumnOrder *_pivotOrder;
    TSTHiddenStates *_hiddenStates;
    TSTTableTranslator *_translator;
    TSCECoordMapper *_fromTableCoordMapperForPasteboard;
    TSCEMutableUIDSet *_rowUIDsForImportedGroupingRows;
    TSTArchivedLayoutEngineBundle *_archivedLayoutEngineBundle;
    struct TSKUIDStruct _groupByUid;
    struct TSKUIDStruct _hiddenStatesUid;
    struct TSKUIDStructTract _tableTranslatorBaseMapForPasteboard;
    struct TSKUIDStructTract _tableTranslatorViewMapForPasteboard;
}

+ (id)displayNameForColumnName:(id)arg1;
+ (unsigned long long)tableAreaForCellID:(struct TSUCellCoord)arg1 inTableWithHeaderColumns:(unsigned int)arg2 headerRows:(unsigned int)arg3 footerRows:(unsigned int)arg4 totalRows:(unsigned int)arg5;
+ (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord)arg1 inTableWithHeaderColumns:(unsigned int)arg2 headerRows:(unsigned int)arg3 footerRows:(unsigned int)arg4 totalRows:(unsigned int)arg5;
+ (struct TSUCellRect)cellRangeForTableArea:(unsigned long long)arg1 givenTableSize:(CDStruct_c0454aff)arg2 numberOfHeaderRows:(unsigned int)arg3 numberOfFooterRows:(unsigned int)arg4 numberOfHeaderColumns:(unsigned int)arg5;
+ (void)upgradeSubOwnerUidForMapperOnCalcEngine:(id)arg1;
+ (void)upgradeTablesIfNeeded:(unsigned long long)arg1 forDocumentRoot:(id)arg2;
+ (void)ensureAllTablesAreRegisteredInDocumentRoot:(id)arg1;
+ (void)performRewritesForInsertedTableInfos:(id)arg1;
+ (_Bool)validateNewName:(id)arg1 forTable:(id)arg2;
+ (id)presetKinds;
+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(unsigned long long)arg3 reservedCount:(unsigned long long)arg4;
+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(unsigned long long)arg3;
+ (id)pivotDetailTableNameFromSourcePivotTableInfo:(id)arg1 pivotSourceCell:(struct TSUCellCoord)arg2;
+ (_Bool)canPartitionForPrinting;
+ (_Bool)canPartitionInline;
+ (_Bool)needsObjectUUID;
+ (id)tableInfoForTableUID:(struct TSKUIDStruct)arg1 withCalcEngine:(id)arg2;
+ (id)tablePrototypeWithIndex:(long long)arg1 context:(id)arg2 geometry:(id)arg3 styles:(id)arg4 forTableInsertOnly:(_Bool)arg5;
+ (id)tablePrototypeWithIndex:(long long)arg1 context:(id)arg2 geometry:(id)arg3 styles:(id)arg4;
+ (id)geometryForPrototypeIndex:(long long)arg1 withCanvasPoint:(struct CGPoint)arg2;
+ (unsigned int)numberOfColumnsForProtoIndex:(unsigned long long)arg1;
+ (unsigned int)numberOfRowsForProtoIndex:(unsigned long long)arg1;
+ (id)localizedDescriptionForProtoIndex:(unsigned long long)arg1;
+ (id)pivotTableNameForSourceTable:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(retain, nonatomic) TSTArchivedLayoutEngineBundle *archivedLayoutEngineBundle; // @synthesize archivedLayoutEngineBundle=_archivedLayoutEngineBundle;
@property(nonatomic) struct TSKUIDStructTract tableTranslatorViewMapForPasteboard; // @synthesize tableTranslatorViewMapForPasteboard=_tableTranslatorViewMapForPasteboard;
@property(nonatomic) struct TSKUIDStructTract tableTranslatorBaseMapForPasteboard; // @synthesize tableTranslatorBaseMapForPasteboard=_tableTranslatorBaseMapForPasteboard;
@property(nonatomic) _Bool documentIsClosing; // @synthesize documentIsClosing=_documentIsClosing;
@property(retain, nonatomic) TSCEMutableUIDSet *rowUIDsForImportedGroupingRows; // @synthesize rowUIDsForImportedGroupingRows=_rowUIDsForImportedGroupingRows;
@property(nonatomic) _Bool migratingStylesOnly; // @synthesize migratingStylesOnly=_migratingStylesOnly;
@property(readonly, nonatomic) _Bool wasRemovedFromDocument; // @synthesize wasRemovedFromDocument=_wasRemovedFromDocument;
@property(retain, nonatomic) TSCECoordMapper *fromTableCoordMapperForPasteboard; // @synthesize fromTableCoordMapperForPasteboard=_fromTableCoordMapperForPasteboard;
@property(retain, nonatomic) TSTTableTranslator *translator; // @synthesize translator=_translator;
@property(nonatomic) struct TSKUIDStruct hiddenStatesUid; // @synthesize hiddenStatesUid=_hiddenStatesUid;
@property(retain, nonatomic) TSTHiddenStates *hiddenStates; // @synthesize hiddenStates=_hiddenStates;
@property(readonly, nonatomic) TSTPivotRowColumnOrder *pivotOrder; // @synthesize pivotOrder=_pivotOrder;
@property(readonly, retain, nonatomic) TSTTableModel *pivotDataModel; // @synthesize pivotDataModel=_pivotDataModel;
@property(readonly, nonatomic) _Bool isAPivotTable; // @synthesize isAPivotTable=_isAPivotTable;
@property(readonly, nonatomic) TSTCategoryOrder *categoryOrder; // @synthesize categoryOrder=_categoryOrder;
@property(readonly, nonatomic) TSTColumnRowUIDMap *columnRowUIDMap; // @synthesize columnRowUIDMap=_columnRowUIDMap;
@property(retain, nonatomic) TSTLayoutHint *overrideLayoutHint; // @synthesize overrideLayoutHint=_overrideLayoutHint;
@property(nonatomic) _Bool hasReference; // @synthesize hasReference=_hasReference;
@property(nonatomic) _Bool isCopyContainingCategoryColumn; // @synthesize isCopyContainingCategoryColumn=_isCopyContainingCategoryColumn;
@property(retain, nonatomic) NSDictionary *dragAndDropDetails; // @synthesize dragAndDropDetails=_dragAndDropDetails;
@property(nonatomic) long long formulaCoordSpace; // @synthesize formulaCoordSpace=_formulaCoordSpace;
@property(retain, nonatomic) TSCEMutableUIDSet *rowUIDsWithPendingGroupingChanges; // @synthesize rowUIDsWithPendingGroupingChanges=_rowUIDsWithPendingGroupingChanges;
@property(retain, nonatomic) TSTGroupBy *groupBy; // @synthesize groupBy=_groupBy;
@property(nonatomic) struct TSKUIDStruct groupByUid; // @synthesize groupByUid=_groupByUid;
@property(readonly, nonatomic) TSTSummaryModel *summaryModel; // @synthesize summaryModel=_summaryModel;
@property(retain, nonatomic) TSTLayoutEngine *layoutEngine; // @synthesize layoutEngine=_layoutEngine;
@property(retain, nonatomic) TSTTablePartitioner *partitioner; // @synthesize partitioner=_partitioner;
@property(readonly, nonatomic) unsigned long long archivingCompatibilityVersion;
- (void)saveToArchiver:(id)arg1;
- (void)saveToArchive:(void *)arg1 archiver:(id)arg2;
- (void)loadFromUnarchiver:(id)arg1;
- (void)loadFromArchive:(const void *)arg1 unarchiver:(id)arg2;
- (Class)iteratorClass;
- (Class)editorClass;
- (Class)layoutClass;
- (Class)repClass;
- (_Bool)verifyPivotTableConnections;
- (_Bool)verifySubOwnerUIDsUsed;
- (void)validate;
- (id)commandForSettingTableDirection:(int)arg1 icc:(id)arg2;
- (void)resetViewMap;
- (id)processRowsWithPendingGroupingChangesAndReturnAffectedCellRegion;
- (void)willMakeGroupingChangesInRowUIDs:(id)arg1;
@property(nonatomic) double categoryColumnWidth;
- (void)setLabelRowHeight:(double)arg1 atCategoryLevel:(unsigned char)arg2;
- (double)labelRowHeightAtCategoryLevel:(unsigned char)arg1;
- (void)setSummaryRowHeight:(double)arg1 atCategoryLevel:(unsigned char)arg2;
- (double)summaryRowHeightAtCategoryLevel:(unsigned char)arg1;
- (_Bool)shouldDisplaySummaryLabelRowAtGroupLevel:(unsigned char)arg1;
- (void)setAggregateType:(unsigned char)arg1 forColumnUID:(struct TSKUIDStruct)arg2 atGroupLevel:(unsigned char)arg3;
- (unsigned char)aggregateTypeForColumnUID:(struct TSKUIDStruct)arg1 atGroupLevel:(unsigned char)arg2;
- (unsigned char)groupLevelForGroupUid:(const struct TSKUIDStruct *)arg1;
- (id)categoryRefReferringToCellRef:(const void *)arg1;
- (_Bool)isGroupCollapsedAndVisible:(struct TSKUIDStruct)arg1 dimension:(long long)arg2;
- (_Bool)isGroupOrParentsCollapsed:(struct TSKUIDStruct)arg1 dimension:(long long)arg2;
@property(readonly, nonatomic) _Bool hasCategoryRules;
@property(readonly, nonatomic, getter=isCategorized) _Bool categorized;
@property(readonly, nonatomic) struct TSKUIDStruct baseTableUID;
- (id)peerCellRegionForCellRegion:(id)arg1;
- (_Bool)hasGroupingArrowInCellRegion:(id)arg1;
- (long long)groupingArrowStateAtCellID:(struct TSUCellCoord)arg1;
- (_Bool)hasGroupingArrowAtCellID:(struct TSUCellCoord)arg1;
- (_Bool)groupingTypesAreUniqueForColumn:(unsigned short)arg1;
- (unsigned long long)groupingColumnLevelCountForColumn:(unsigned short)arg1;
- (id)columnDisplayNameForCategoryLevel:(unsigned char)arg1;
- (id)regionSubtractingCategoryColumnsAndRows:(id)arg1;
- (id)indexesForBodyRowsInGroupWithRowAtIndex:(unsigned int)arg1;
- (struct _NSRange)rowRangeUnderSummaryOrLabelRow:(unsigned int)arg1;
- (id)indexesForGroupingColumnsInRegion:(id)arg1;
- (id)indexesForGroupingColumns;
- (id)indexesForCategoryColumnsInRegion:(id)arg1;
- (id)indexesForCategoryColumns;
- (id)indexesForNonSummaryBodyColumns;
- (id)indexesForBodyAndFooterRows;
- (id)indexesForNonSummaryBodyRows;
- (unsigned int)columnAggregateGroupSize;
- (unsigned int)rowAggregateGroupSize;
- (id)indexesForGrandTotalColumns;
- (id)indexesForGrandTotalRows;
- (id)indexesForLeadingSummaryColumnsAtGroupLevel:(unsigned char)arg1;
- (id)indexesForLeadingColumnsAtGroupLevel:(unsigned char)arg1;
- (id)indexesForLeadingColumnsInRegion:(id)arg1;
- (id)indexesForLeadingColumns;
- (id)indexesForLeadingSummaryRowsAtGroupLevel:(unsigned char)arg1;
- (id)indexesForLeadingRowsAtGroupLevel:(unsigned char)arg1;
- (id)indexesForLeadingRowsInRegion:(id)arg1;
- (id)indexesForLeadingRows;
- (id)indexesForSummaryAndLabelRowsInRegion:(id)arg1;
- (id)indexesForSummaryAndLabelRows;
- (id)indexesForLabelRows;
- (id)indexesForLabelRowsUpToGroupLevel:(unsigned char)arg1 omitGroupsWithUids:(const void *)arg2;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)arg1;
- (id)indexesForLabelRowsAtGroupLevel:(unsigned char)arg1 inRegion:(id)arg2;
- (id)indexesForLabelRowsInRegion:(id)arg1;
- (id)indexesForSummaryRows;
- (id)indexesForSummaryColumnsInRegion:(id)arg1;
- (id)indexesForSummaryColumns;
- (id)indexesForSummaryColumnsFromGroupLevel:(unsigned char)arg1 toGroupLevel:(unsigned char)arg2;
- (id)indexesForSummaryColumnsAtGroupLevel:(unsigned char)arg1;
- (id)indexesForSummaryRowsFromGroupLevel:(unsigned char)arg1 toGroupLevel:(unsigned char)arg2;
- (id)indexesForSummaryRowsUpToGroupLevel:(unsigned char)arg1 omitGroupsWithUids:(const void *)arg2;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)arg1;
- (id)indexesForSummaryRowsAtGroupLevel:(unsigned char)arg1 inRegion:(id)arg2;
- (_Bool)hasSummaryRowsInRegion:(id)arg1;
- (id)indexesForSummaryRowsInRegion:(id)arg1;
- (_Bool)isGroupingColumnCollapsedAndVisible:(unsigned short)arg1;
- (_Bool)isGroupingColumnCollapsed:(unsigned short)arg1;
- (_Bool)isGroupingRowCollapsedAndVisible:(unsigned int)arg1;
- (_Bool)isGroupingRowCollapsed:(unsigned int)arg1;
- (id)expandSummaryGroupUIDs:(id)arg1;
- (id)collapseSummaryGroupUIDs:(id)arg1;
- (id)indexesForColumnsContainedByGroupUIDs:(id)arg1;
- (id)indexesForRowsContainedByGroupUIDs:(id)arg1;
- (id)allColumnUIDsAtGroupLevel:(unsigned char)arg1 withFilter:(CDUnknownBlockType)arg2;
- (id)allRowUIDsAtGroupLevel:(unsigned char)arg1 withFilter:(CDUnknownBlockType)arg2;
- (id)allColumnGroupUIDs;
- (id)allRowGroupUIDs;
- (unsigned short)columnIndexForGroupingColumn:(id)arg1;
@property(readonly, nonatomic) _Bool hasHeaderRowForAggregateNames;
@property(readonly, nonatomic) _Bool hasHeaderColumnForAggregateNames;
- (_Bool)isPivotLeadingColumn:(unsigned short)arg1;
- (_Bool)isPivotLeadingRow:(unsigned int)arg1;
- (_Bool)isPivotGrandTotalColumn:(unsigned short)arg1;
- (_Bool)isPivotGrandTotalRow:(unsigned int)arg1;
- (_Bool)isPivotUnwrapped:(struct TSUCellCoord)arg1;
- (_Bool)isPivotTrailingAligned:(struct TSUCellCoord)arg1;
- (_Bool)isPivotAnyKindOfCell:(struct TSUCellCoord)arg1;
- (_Bool)isCategoryAnyKindOfCell:(struct TSUCellCoord)arg1;
- (_Bool)isCategoryGroupingColumn:(unsigned short)arg1;
- (_Bool)isCategoryGroupValueLabelCell:(struct TSUCellCoord)arg1;
- (_Bool)isCategoryGroupValueCell:(struct TSUCellCoord)arg1;
- (_Bool)isCategoryColumnUneditableCell:(struct TSUCellCoord)arg1;
- (_Bool)isCategoryLabelCell:(struct TSUCellCoord)arg1;
- (_Bool)isSummaryCell:(struct TSUCellCoord)arg1;
- (_Bool)isSummaryColumn:(unsigned short)arg1;
- (_Bool)isCategoryColumn:(unsigned short)arg1;
- (id)populatedCategoryGroupLevelsInColumn:(unsigned short)arg1;
- (unsigned short)categoryColumnIndex;
- (unsigned int)numberOfGroupLevelsShowingLabelsUnderGroupAtIndex:(unsigned int)arg1;
@property(readonly, nonatomic) struct TSUChromeRowIndex numberOfChromeFooterRows;
@property(readonly, nonatomic) struct TSUChromeRowIndex numberOfChromeHeaderRows;
@property(readonly, nonatomic) struct TSUChromeColumnIndex numberOfChromeHeaderColumns;
@property(readonly, nonatomic) struct TSUChromeRowIndex numberOfChromeRows;
@property(readonly, nonatomic) struct TSUChromeColumnIndex numberOfChromeColumns;
@property(readonly, nonatomic) struct TSUModelRowIndex numberOfBaseBodyRows;
@property(readonly, nonatomic) struct TSUModelRowIndex numberOfBaseFooterRows;
@property(readonly, nonatomic) struct TSUModelRowIndex numberOfBaseHeaderRows;
@property(readonly, nonatomic) struct TSUModelColumnIndex numberOfBaseHeaderColumns;
@property(readonly, nonatomic) struct TSUModelRowIndex numberOfBaseRows;
@property(readonly, nonatomic) struct TSUModelColumnIndex numberOfBaseColumns;
- (unsigned int)numberOfCategoryColumns;
- (unsigned int)numberOfCategoryLevels;
- (unsigned char)groupLevelAtRow:(unsigned int)arg1;
- (unsigned char)groupLevelAtSummaryColumn:(unsigned short)arg1;
- (unsigned char)groupLevelAtLabelRow:(unsigned int)arg1;
- (unsigned char)groupLevelAtSummaryRow:(unsigned int)arg1;
- (_Bool)isSummaryOrLabelRow:(unsigned int)arg1;
- (_Bool)isLabelRow:(unsigned int)arg1;
- (_Bool)isSummaryRow:(unsigned int)arg1;
- (id)createDetailTableForPivotTableCell:(struct TSUCellCoord)arg1;
- (void)commitPivotChanges;
- (void)resetPivotOrder;
- (void)resetCellsForNewPivotRules;
- (void)handlePivotSorting:(_Bool)arg1;
- (void)applyPivotWithColumns:(id)arg1 rows:(id)arg2 aggregates:(id)arg3 flatteningDimension:(long long)arg4 optionsMap:(id)arg5 pivotRowColumnRuleChangeUid:(struct TSKUIDStruct)arg6 pivotAggregateRuleChangeUid:(struct TSKUIDStruct)arg7;
- (void)updatePivotDataModel:(id)arg1 pivotDataRefreshUID:(struct TSKUIDStruct)arg2 pivotDataRefreshTimestamp:(double)arg3 uidBodyTract:(struct TSKUIDStructTract)arg4;
- (void)startPivotChanges;
@property(readonly, nonatomic) TSTPivotOwner *pivotOwner;
@property(readonly, nonatomic) _Bool isEmptyPivot;
- (void)setIsCategoryEnabled:(_Bool)arg1;
- (void)applyGroupingColumns:(id)arg1;
- (void)_correctAndCheckStateSuppressingAssertions:(_Bool)arg1;
- (_Bool)checkStateForArchiving:(_Bool)arg1;
- (_Bool)checkState;
@property(readonly, nonatomic) TSTTableTranslator *filteringTableTranslator;
@property(readonly, nonatomic) TSTTableModel *filteringTableModel;
@property(readonly, nonatomic) unsigned char maxColumnLevel;
@property(readonly, nonatomic) unsigned char maxRowLevel;
@property(readonly, nonatomic) unsigned long long numberOfColumnLevels;
@property(readonly, nonatomic) unsigned long long numberOfRowLevels;
@property(readonly, nonatomic) TSTGroupBy *groupByForColumns;
@property(readonly, nonatomic) TSTGroupBy *groupByForRows;
@property(readonly, nonatomic) _Bool isGroupedForColumns;
@property(readonly, nonatomic) _Bool isGroupedForRows;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (void)updateTableRowColumnStylesWithBlock:(CDUnknownBlockType)arg1;
- (void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)textStyleForCellWithEmptyStyleAtCellUID:(struct TSKUIDStructCoord)arg1 isDefault:(out _Bool *)arg2;
- (int)getCell:(id)arg1 atCellUID:(const struct TSKUIDStructCoord *)arg2 suppressCellBorder:(_Bool)arg3;
- (int)getCell:(id)arg1 atCellUID:(const struct TSKUIDStructCoord *)arg2;
- (int)getDefaultCell:(out id)arg1 forCellUID:(const struct TSKUIDStructCoord *)arg2;
- (id)cellTractRefForUIDRectRef:(id)arg1;
- (id)cellRegionForUIDRange:(const void *)arg1;
- (struct TSKUIDStructTract)cellUIDRangeForCellRange:(struct TSUCellRect)arg1;
- (struct TSUCellRect)cellRangeForUIDRange:(const void *)arg1;
- (void)setColumnRowUIDMap:(id)arg1;
- (void)setSummaryModel:(id)arg1;
- (void)setCategoryOrder:(id)arg1;
- (struct TSKUIDStructCoord)cellUIDForCellID:(struct TSUCellCoord)arg1 useCategoriesWildcards:(_Bool)arg2;
- (id)cellRegionFromCellUIDRegion:(id)arg1;
- (id)cellUIDRegionFromCellRegion:(id)arg1;
- (id)p_cellRegionFromWildcardCellUIDs:(vector_ea0127b3)arg1 includeLabelsWithSummaries:(_Bool)arg2 didAddLabels:(_Bool *)arg3;
- (id)cellRegionFromCellUIDLookupList:(id)arg1 includeLabelsWithSummaries:(_Bool)arg2 didAddLabels:(_Bool *)arg3;
- (id)cellRegionFromCellUIDLookupList:(id)arg1;
- (id)cellRegionFromCellUIDList:(id)arg1 includeLabelsWithSummaries:(_Bool)arg2 didAddLabels:(_Bool *)arg3;
- (id)cellRegionFromCellUIDList:(id)arg1;
- (id)cellUIDListFromCellRegion:(id)arg1 useCategoriesWildcards:(_Bool)arg2;
- (id)cellUIDListFromCellRegion:(id)arg1;
- (struct _NSRange)columnRangeForUIDs:(const void *)arg1;
- (struct _NSRange)rowRangeForUIDs:(const void *)arg1;
- (id)columnUuids;
- (id)rowUuids;
- (const void *)columnUIDs;
- (const void *)rowUIDs;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(_Bool)arg2 notFoundUIDs:(id)arg3;
- (struct TSKUIDStruct)firstUidFromUIDSet:(id)arg1 isRows:(_Bool)arg2;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(_Bool)arg2;
- (id)UIDSetForIndexes:(id)arg1 isRows:(_Bool)arg2;
- (TSKUIDStructVectorTemplate_de88e035)prunedRowUIDsFromRowUIDs:(const void *)arg1;
- (TSKUIDStructVectorTemplate_de88e035)prunedColumnUIDsFromColumnUIDs:(const void *)arg1;
- (unsigned short)columnIndexForUUIDBytes:(unsigned char [16])arg1;
- (unsigned int)rowIndexForUUIDBytes:(unsigned char [16])arg1;
- (void)getUUIDBytes:(unsigned char [16])arg1 forColumnIndex:(unsigned short)arg2;
- (void)getUUIDBytes:(unsigned char [16])arg1 forRowIndex:(unsigned int)arg2;
- (TSKUIDStructVectorTemplate_de88e035)orderedColumnUidsFromUids:(const void *)arg1;
- (TSKUIDStructVectorTemplate_de88e035)columnUIDsForColumnRange:(struct _NSRange)arg1;
- (id)mutableColumnIndexesForUIDs:(const void *)arg1;
- (id)columnIndexesForUIDs:(const void *)arg1;
- (TSKUIDStructVectorTemplate_de88e035)columnUIDsForColumnIndexes:(id)arg1;
- (unsigned short)columnIndexForColumnUID:(struct TSKUIDStruct)arg1;
- (struct TSKUIDStruct)columnUIDForColumnIndex:(unsigned short)arg1;
- (TSKUIDStructVectorTemplate_de88e035)orderedRowUidsFromUids:(const void *)arg1;
- (TSKUIDStructVectorTemplate_de88e035)rowUIDsForRowRange:(struct _NSRange)arg1;
- (id)mutableRowIndexesForUIDs:(const void *)arg1;
- (id)rowIndexesForUIDs:(const void *)arg1;
- (TSKUIDStructVectorTemplate_de88e035)rowUIDsForRowIndexes:(id)arg1;
- (unsigned int)rowIndexForRowUID:(struct TSKUIDStruct)arg1;
- (struct TSKUIDStruct)rowUIDForRowIndex:(unsigned int)arg1;
- (void)convertCellUIDLookupList:(id)arg1 toCellRangeVector:(void *)arg2 prunedSummaryCellUIDs:(void *)arg3;
- (_Bool)writeCellIDsInCellUIDList:(id)arg1 toVector:(void *)arg2 prunedCellUIDs:(void *)arg3;
- (struct TSUCellCoord)cellIDForCellUID:(struct TSKUIDStructCoord)arg1;
- (struct TSKUIDStructCoord)cellUIDForCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDForCellContainingRichTextStorage:(id)arg1;
- (_Bool)findChartableRangesFromTableRange:(struct TSCERangeCoordinate)arg1 getBodyRange:(out struct TSCERangeCoordinate *)arg2 headerColumnRange:(out struct TSCERangeCoordinate *)arg3 headerRowRange:(out struct TSCERangeCoordinate *)arg4;
- (void)upgradeFromPreUFF;
- (struct TSUCellRect)minPopulatedCellRange;
- (id)applyCollapseExpandState:(id)arg1 outUndoState:(id *)arg2;
- (struct TSCERangeRef)referenceToHiddenStateFromColumn:(unsigned short)arg1 toColumn:(unsigned short)arg2;
- (struct TSCERangeRef)referenceToHiddenStateFromRow:(unsigned int)arg1 toRow:(unsigned int)arg2;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1 wasCrossDocumentPaste:(_Bool)arg2 wasUndo:(_Bool)arg3;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1;
- (void)reassignPasteboardCustomFormatKeys;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
- (void)setFormulaOwnerUIDsWithMap:(id)arg1 shouldStealReferences:(_Bool)arg2;
- (void)remapTableUIDsInFormulasWithMap:(const void *)arg1 calcEngine:(id)arg2 bakeForBadRefs:(_Bool)arg3;
- (id)cellRegionWithConditionalStyleMatchingCell:(struct TSUCellCoord)arg1;
- (_Bool)hasCellID:(struct TSUCellCoord)arg1;
- (id)cellValueFromCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (int)getValue:(out struct TSCEValue *)arg1 atCellID:(struct TSUCellCoord)arg2 fetchRichTextAttributesIfPlainText:(_Bool)arg3;
- (struct TSCEValue)valueToUseForSummaryCellFormulaError;
- (id)strokeLayerForBottomOfRow:(unsigned int)arg1;
- (id)strokeLayerForTopOfRow:(unsigned int)arg1;
- (id)strokeLayerForRightSideOfColumn:(unsigned short)arg1;
- (id)strokeLayerForLeftSideOfColumn:(unsigned short)arg1;
- (void)_setCellBordersFlatteningFromComplexInfo:(id)arg1 sourceRegion:(id)arg2;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned short)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned short)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned int)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned int)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned int)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned int)arg2 order:(int)arg3;
- (id)cellBorderAtCellID:(struct TSUCellCoord)arg1;
- (int)maxStrokeOrder;
- (id)strokeExporterReturningDefaultStrokes:(_Bool)arg1;
@property(readonly, nonatomic) TSDStroke *footerRowPivotGroupVerticalStroke;
@property(readonly, nonatomic) TSDStroke *headerRowPivotTitleStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnPivotSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *headerRowPivotGroupDeEmphasisStroke;
@property(readonly, nonatomic) TSDStroke *headerRowPivotGroupVerticalStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnPivotGroupDeEmphasisStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnPivotGroupHorizontalStroke;
@property(readonly, nonatomic) TSDStroke *bodyPivotEmphasisVerticalStroke;
@property(readonly, nonatomic) TSDStroke *bodyPivotDeEmphasisHorizontalStroke;
@property(readonly, nonatomic) TSDStroke *bodyPivotGroupVerticalStroke;
@property(readonly, nonatomic) TSDStroke *bodyPivotGroupHorizontalStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel5InteriorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel4InteriorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel3InteriorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel2InteriorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel1InteriorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel5BottomStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel4BottomStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel3BottomStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel2BottomStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel1BottomStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel5LabelSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel4LabelSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel3LabelSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel2LabelSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel1LabelSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel5TopStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel4TopStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel3TopStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel2TopStroke;
@property(readonly, nonatomic) TSDStroke *categoryLevel1TopStroke;
@property(readonly, nonatomic) TSDStroke *footerRowSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBorderStroke;
@property(readonly, nonatomic) TSDStroke *headerRowSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBorderStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBorderStroke;
@property(readonly, nonatomic) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property(readonly, nonatomic) TSDStroke *bodyRowStroke;
@property(readonly, nonatomic) TSDStroke *bodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property(readonly, nonatomic) TSDStroke *defaultVerticalBorderStroke;
@property(readonly, nonatomic) TSDStroke *defaultHorizontalBorderStroke;
- (id)fillForColumn:(unsigned short)arg1;
- (id)fillForRow:(unsigned int)arg1;
@property(readonly, nonatomic) TSDFill *footerRowsFill;
@property(readonly, nonatomic) TSDFill *headerRowsFill;
@property(readonly, nonatomic) TSDFill *headerColumnsFill;
@property(readonly, nonatomic) TSDFill *bodyFill;
@property(readonly, nonatomic) TSDFill *backgroundFill;
- (_Bool)isValidMergeRange:(struct TSUCellRect)arg1;
- (id)mergesIntersectingCellRegion:(id)arg1;
- (id)mergesIntersectingRange:(struct TSUCellRect)arg1;
- (vector_fad096c6)mergeRangesAndCrumbsIntersectingRange:(struct TSUCellRect)arg1;
- (vector_fad096c6)mergeRangesIntersectingCellRegion:(id)arg1;
- (vector_fad096c6)mergeRangesIntersectingRange:(struct TSUCellRect)arg1;
- (void)enumerateMergesIntersectingCellRegion:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)mergeActionForRegion:(id)arg1 nonOriginPartialsOnly:(_Bool)arg2;
- (id)mergeActionForRegion:(id)arg1;
- (id)performActionReturningInverse:(id)arg1;
- (id)removeReturningInverseForRegion:(id)arg1;
- (id)shrinkReturningInverseForRegion:(id)arg1;
- (_Bool)hasMergeRanges;
- (id)expandCellRegionToCoverMergedCells:(id)arg1;
- (struct TSUCellRect)expandCellRangeToCoverMergedCells:(struct TSUCellRect)arg1;
- (_Bool)hasRangeSpanningRowsForCellRange:(struct TSUCellRect)arg1;
- (id)regionForValueOrCommentCellsInRange:(struct TSUCellRect)arg1;
- (id)mergedGridIndicesForDimension:(long long)arg1;
- (_Bool)hasMergeRangesIntersectingCellRegion:(id)arg1;
- (_Bool)hasMergeFragmentAtCellID:(struct TSUCellCoord)arg1;
- (_Bool)isSingleCellOrMergeRange:(struct TSUCellRect)arg1;
- (_Bool)hasMergeRangeSpanningRowsForCellRange:(struct TSUCellRect)arg1;
- (_Bool)mergeRangesPartiallyIntersectCellRegion:(id)arg1;
- (_Bool)mergeRangesPartiallyIntersectCellRange:(struct TSUCellRect)arg1;
- (struct TSUCellCoord)mergeOriginForCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellRect)mergeRangeAtCellID:(struct TSUCellCoord)arg1;
- (_Bool)unmergeCellRange:(struct TSUCellRect)arg1;
- (_Bool)mergeCellRange:(struct TSUCellRect)arg1;
- (id)labelValueViewStringAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (id)cellValueViewStringAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (id)characterFillAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (id)stringAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (_Bool)anyHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (_Bool)anyHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (unsigned short)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleColumnAfterColumnAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned short)arg1;
- (unsigned int)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfVisibleRowAfterRowAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfVisibleRowBeforeRowAtIndex:(unsigned int)arg1;
- (_Bool)hasHiddenColumnAtIndex:(unsigned short)arg1;
- (_Bool)hasHiddenRowAtIndex:(unsigned int)arg1;
- (unsigned int)numberOfVisibleBodyColumns;
- (unsigned int)numberOfVisibleBaseBodyRows;
- (unsigned int)numberOfUserVisibleBodyRows;
- (unsigned int)numberOfVisibleBodyRows;
- (_Bool)isCellRangeHidden:(struct TSUCellRect)arg1;
- (_Bool)anyHiddenRowsInCellRange:(struct TSUCellRect)arg1 forAction:(unsigned char)arg2;
- (unsigned char)hidingActionForColumnAtIndex:(unsigned short)arg1;
- (unsigned char)hidingActionForRowAtIndex:(unsigned int)arg1;
- (id)indexesOfCollapsedRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfVisibleRowsInRowRange:(id)arg1;
- (id)indexesOfUserVisibleRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfVisibleRowsInCellRegion:(id)arg1;
- (id)indexesOfVisibleRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfFilteredRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfUserHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfVisibleColumnsInColumnRange:(id)arg1;
- (id)indexesOfVisibleColumnsInCellRegion:(id)arg1;
- (id)indexesOfVisibleColumnsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfFilteredColumnsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfUserHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (_Bool)hasHiddenColumnAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (_Bool)hasHiddenRowAtIndex:(unsigned int)arg1 forAction:(unsigned char)arg2;
- (unsigned int)numberOfHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (unsigned int)numberOfUserHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (unsigned int)numberOfHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (_Bool)hasHiddenColumnsOrRows;
- (unsigned int)numberOfUserHiddenColumns;
- (unsigned int)numberOfUserHiddenRows;
- (unsigned int)numberOfHiddenColumns;
- (unsigned int)numberOfHiddenRows;
- (_Bool)showColumnAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (_Bool)showRowAtIndex:(unsigned int)arg1 forAction:(unsigned char)arg2;
- (_Bool)hideColumnAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (_Bool)hideRowAtIndex:(unsigned int)arg1 forAction:(unsigned char)arg2;
- (void)swapRowAtIndex:(unsigned int)arg1 withRowAtIndex:(unsigned int)arg2;
- (void)moveColumnRange:(struct _NSRange)arg1 toColumnIndex:(unsigned short)arg2;
- (void)moveRowRange:(struct _NSRange)arg1 toRowIndex:(unsigned int)arg2;
- (void)removeColumnsAtIndexes:(id)arg1;
- (_Bool)hasDeferredImportActions;
- (void)processDeferredImportActions;
- (void)importDeferredRemoveGroupingRowsAtIndexes:(id)arg1;
- (void)removeRowsAtIndexes:(id)arg1;
- (void)removeColumnsAtIndex:(unsigned short)arg1 count:(unsigned int)arg2;
- (void)removeRowsAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (int)insertRowsAtIndex:(unsigned int)arg1 uids:(const void *)arg2 metadatas:(id)arg3 tableArea:(unsigned long long)arg4 unsetFilterHidingAction:(_Bool)arg5;
- (int)insertRowsAtIndex:(unsigned int)arg1 uids:(const void *)arg2 metadatas:(id)arg3 tableArea:(unsigned long long)arg4;
- (int)insertColumnsAtIndex:(unsigned short)arg1 uids:(const void *)arg2 metadatas:(id)arg3 tableArea:(unsigned long long)arg4;
- (void)insertColumnsAtIndex:(unsigned short)arg1 count:(unsigned int)arg2 addBefore:(_Bool)arg3;
- (void)insertRowsAtIndex:(unsigned int)arg1 count:(unsigned int)arg2 addBefore:(_Bool)arg3;
@property(readonly, nonatomic) struct TSUCellRect baseColumnRange;
@property(readonly, nonatomic) struct TSUCellRect categoryColumnRange;
@property(readonly, nonatomic) struct TSUCellRect bottomCornerRange;
@property(readonly, nonatomic) struct TSUCellRect topCornerRange;
@property(readonly, nonatomic) struct TSUCellRect footerRowRange;
@property(readonly, nonatomic) struct TSUCellRect actualHeaderColumnRange;
@property(readonly, nonatomic) struct TSUCellRect headerColumnRange;
@property(readonly, nonatomic) struct TSUCellRect headerRowRange;
@property(readonly, nonatomic) struct TSUCellRect bodyRowRange;
@property(readonly, nonatomic) struct TSUCellRect bodyColumnRange;
- (struct TSUCellRect)bodyRangeForLowestLevelGroupEnclosingCellAtCellID:(struct TSUCellCoord)arg1;
@property(readonly, nonatomic) struct TSUCellRect bodyRange;
@property(readonly, nonatomic) struct TSUCellRect range;
- (double)computeDefaultFontHeightForTableStyleArea:(unsigned long long)arg1;
- (void)computeDefaultRowHeight;
- (void)setHeight:(double)arg1 ofRowAtIndex:(unsigned int)arg2;
- (void)setWidth:(double)arg1 ofColumnAtIndex:(unsigned short)arg2;
- (double)widthOfColumnAtIndex:(unsigned short)arg1 isDefault:(out _Bool *)arg2;
- (double)heightOfRowAtIndex:(unsigned int)arg1 isDefault:(out _Bool *)arg2;
- (struct TSUCellCoord)cellIDBelowCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDAboveCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDRightOfCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDLeftOfCellID:(struct TSUCellCoord)arg1;
- (unsigned long long)numberOfCells;
- (id)chromeLabelForCellID:(struct TSUCellCoord)arg1;
- (id)chromeLabelForRow:(unsigned int)arg1;
- (id)chromeLabelForColumn:(unsigned short)arg1;
- (id)cellRangeName:(struct TSCERangeCoordinate)arg1 usedSymbolicName:(out _Bool *)arg2;
- (id)pivotLeadingRowDisplayNameAtIndex:(unsigned int)arg1;
- (id)pivotHeaderRowDisplayNameAtIndex:(unsigned int)arg1;
- (id)pivotLeadingColumnDisplayNameAtIndex:(unsigned short)arg1;
- (id)pivotHeaderColumnDisplayNameAtIndex:(unsigned short)arg1;
- (id)columnNameForColumnIndex:(unsigned short)arg1 withFallbackFormat:(id)arg2;
- (id)columnNameForColumnIndex:(unsigned short)arg1;
- (id)rowNameForCellID:(struct TSUCellCoord)arg1 restrictToBodyRange:(_Bool)arg2;
- (id)columnNameForCellID:(struct TSUCellCoord)arg1 restrictToBodyRange:(_Bool)arg2;
@property(readonly, nonatomic) _Bool hasMigratableStylesInCells;
- (id)noRuleConditionalStyleSet;
- (id)conditionalStyleSetAtCellID:(struct TSUCellCoord)arg1;
- (id)textStyleAtCellUID:(const struct TSKUIDStructCoord *)arg1 isDefault:(out _Bool *)arg2;
- (id)cellStyleAtCellUID:(const struct TSKUIDStructCoord *)arg1 isDefault:(out _Bool *)arg2;
- (id)textStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out _Bool *)arg2;
- (id)cellStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out _Bool *)arg2;
- (id)defaultTextStyleForTableStyleArea:(unsigned long long)arg1;
- (id)defaultTextStyleForCellID:(struct TSUCellCoord)arg1 useSoftDefault:(_Bool)arg2 outSource:(out unsigned long long *)arg3;
- (id)defaultTextStyleForCellID:(struct TSUCellCoord)arg1;
- (id)defaultCellStyleForTableStyleArea:(unsigned long long)arg1;
- (id)defaultCellStyleForCellID:(struct TSUCellCoord)arg1 useSoftDefault:(_Bool)arg2 outSource:(out unsigned long long *)arg3;
- (id)defaultCellStyleForCellID:(struct TSUCellCoord)arg1;
- (id)textStyleOfColumnAtIndex:(unsigned short)arg1 isDefault:(out _Bool *)arg2;
- (id)cellStyleOfColumnAtIndex:(unsigned short)arg1 isDefault:(out _Bool *)arg2;
- (int)setTextStyle:(id)arg1 ofColumnAtUID:(const struct TSKUIDStruct *)arg2;
- (int)setCellStyle:(id)arg1 ofColumnAtUID:(const struct TSKUIDStruct *)arg2;
- (id)textStyleOfRowAtIndex:(unsigned int)arg1 isDefault:(out _Bool *)arg2;
- (id)cellStyleOfRowAtIndex:(unsigned int)arg1 isDefault:(out _Bool *)arg2;
- (int)setTextStyle:(id)arg1 ofRowAtUID:(const struct TSKUIDStruct *)arg2;
- (int)setCellStyle:(id)arg1 ofRowAtUID:(const struct TSKUIDStruct *)arg2;
- (unsigned char)cellValueTypeAtCellUID:(const struct TSKUIDStructCoord *)arg1;
- (unsigned char)cellValueTypeAtCellID:(struct TSUCellCoord)arg1;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 holdingReadLockWithAccessController:(id)arg3;
- (id)concurrentCellMapForRegion:(id)arg1 suppressMergeContent:(_Bool)arg2;
- (id)cellMapForRegion:(id)arg1 uidBased:(_Bool)arg2 suppressMergeContent:(_Bool)arg3 useCategoriesWildcards:(_Bool)arg4;
- (void)flattenGroupValuesIfNeededForCell:(id)arg1 viewCellCoord:(struct TSUViewCellCoord)arg2 summaryAndLabelRows:(id)arg3 categoryColumns:(id)arg4;
@property(readonly, nonatomic) _Bool isValidForInteraction;
@property(readonly, nonatomic) _Bool hasImportWarnings;
- (int)setCellsWithCellMap:(id)arg1 ignoreFormulas:(_Bool)arg2 skipDirtyingNonFormulaCells:(_Bool)arg3;
- (int)setCell:(id)arg1 atCellUID:(const struct TSKUIDStructCoord *)arg2 ignoreFormula:(_Bool)arg3 clearImportWarnings:(_Bool)arg4;
- (int)setCell:(id)arg1 atCellUID:(const struct TSKUIDStructCoord *)arg2 ignoreFormula:(_Bool)arg3 clearImportWarnings:(_Bool)arg4 formulaReplacer:(id)arg5;
- (int)setCell:(id)arg1 atCellCoord:(struct TSUCellCoord)arg2;
- (id)formulaAtCellID:(struct TSUCellCoord)arg1;
- (void)convertFormulasToUidForm:(id)arg1 atCellID:(struct TSUCellCoord)arg2 preserveHostCell:(_Bool)arg3;
- (_Bool)hasFormulaAtCellUID:(const struct TSKUIDStructCoord *)arg1;
- (_Bool)hasFormulaAtCellID:(struct TSUCellCoord)arg1;
- (id)cellAtCellID:(struct TSUCellCoord)arg1;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 suppressCellBorder:(_Bool)arg3;
- (_Bool)cellExistsAtCellID:(struct TSUCellCoord)arg1;
- (int)getDefaultCell:(out id)arg1 forCellID:(struct TSUCellCoord)arg2;
- (int)getDefaultCell:(id)arg1 forTableStyleArea:(unsigned long long)arg2;
- (id)tableAreasForCellRange:(struct TSUCellRect)arg1;
- (unsigned long long)tableStyleAreaForRow:(unsigned int)arg1;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord)arg1;
- (void)updateCalcEngineForTableSize;
- (unsigned long long)tableStyleAreaForCellUID:(struct TSKUIDStructCoord)arg1;
- (unsigned long long)tableAreaForColumn:(unsigned short)arg1;
- (unsigned long long)tableAreaForRow:(unsigned int)arg1;
- (unsigned long long)tableAreaForDroppingRowAtIndex:(unsigned int)arg1;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord)arg1;
- (id)cellRegionForTableStyleArea:(unsigned long long)arg1;
- (struct TSUCellRect)cellRangeForTableArea:(unsigned long long)arg1;
- (_Bool)cellIDIsLegal:(struct TSUCellCoord)arg1;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(_Bool)arg2 needsNewName:(_Bool)arg3 avoidNames:(id)arg4;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(_Bool)arg2 needsNewName:(_Bool)arg3;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(_Bool)arg2;
- (_Bool)hasUntitledTableNameFormat;
- (int)parseNumberFromTableName:(id)arg1;
- (id)bandedFillObject;
- (_Bool)useBandedFill;
- (_Bool)canTranspose;
- (id)allBodyValuesAsPregArgDataListForColumnIndex:(struct TSUViewColumnIndex)arg1;
- (_Bool)hasFilterRulesAffectingInsertRows;
- (_Bool)hasFilterRulesInBaseColumns:(id)arg1;
- (void)dirtyFilterState;
- (void)filterSetUpdated;
- (_Bool)hasActiveFilters;
- (void)setFilterSetType:(int)arg1;
- (void)enableFilterSet:(_Bool)arg1;
- (void)setNeedsFilterFormulaRewriteForImport:(_Bool)arg1;
- (_Bool)needsFilterFormulaRewriteForImport;
- (id)duplicateFilterSetInUidForm;
- (id)duplicateFilterSet;
- (void)resetSortRuleReferenceTrackerForInsert;
- (void)notifyAboutStructuredTextImportState;
- (void)getTextPropertiesWithCell:(id)arg1 cellID:(struct TSUCellCoord)arg2 wraps:(_Bool *)arg3 alignment:(int *)arg4 verticalAlignment:(int *)arg5 padding:(id *)arg6;
- (void)modifiedTextPropertiesForCategoryOrPivotCellAtCellID:(struct TSUCellCoord)arg1 wraps:(_Bool *)arg2 padding:(id *)arg3 alignment:(int *)arg4;
- (void)applyWritingDirection:(int)arg1 toCell:(id)arg2 cellID:(struct TSUCellCoord)arg3;
- (int)writingDirectionForCellwithTableDefault:(id)arg1;
@property(readonly, nonatomic) TSCEOwnerUidMapper *identityOwnerUIDMapper;
@property(readonly, nonatomic) TSCEOwnerUidMapper *ownerUIDMapper;
- (void)bakeFormulas;
- (void)setDrawableIsBeingCopied:(_Bool)arg1;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)arg1;
- (void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)arg1;
@property(retain, nonatomic) TSTTableStyle *tableStyle;
- (void)setStyleNetwork:(id)arg1;
- (id)allAnnotations;
- (id)commentHostingAtCellID:(struct TSUCellCoord)arg1;
- (id)commentHostingAtCellID:(struct TSUCellCoord)arg1 forCommentStorage:(id)arg2;
- (void)clearCommentHostingMapForCommentStorage:(id)arg1;
- (void)postCommentNotificationForStorage:(id)arg1 atCellID:(struct TSUCellCoord)arg2 notificationKey:(id)arg3;
- (int)removeCommentStorageAtCellUID:(const struct TSKUIDStructCoord *)arg1;
- (int)setCommentStorage:(id)arg1 atCellUID:(const struct TSKUIDStructCoord *)arg2;
- (_Bool)hasCommentAtCellID:(struct TSUCellCoord)arg1;
- (_Bool)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1 objectComparisonBlock:(CDUnknownBlockType)arg2;
- (void)upgradeFormatsForCustomFormatListU2_0;
- (void)prepareForPasteWithSourceOffset:(struct TSUColumnRowOffset)arg1 bakeFormulas:(_Bool)arg2;
- (void)didReplaceTextsInStoragesWithPlaceHolderString;
- (void)p_initializeDefaultHeight:(double)arg1 andWidth:(double)arg2;
@property(readonly, nonatomic) _Bool supportsMultipleColumns;
@property(readonly, nonatomic) _Bool preventsChangeTracking;
@property(readonly, nonatomic) _Bool preventsComments;
@property(readonly, nonatomic) _Bool textIsLinked;
- (_Bool)textIsVerticalAtCharIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) _Bool autoListTermination;
@property(readonly, nonatomic) _Bool autoListRecognition;
- (void)didCopy;
- (void)willCopyWithOtherDrawables:(id)arg1;
- (void)assertCollaborationConvergence;
- (void)removeAnnotationsFromColumnsAtIndexes:(id)arg1;
- (void)removeAnnotationsFromRowsAtIndexes:(id)arg1;
- (id)typeName;
- (_Bool)allowsTitle;
- (_Bool)canCommentInCaptionOrTitle;
- (_Bool)allowsCaption;
- (_Bool)contentsAreRightToLeft;
- (id)geometryForRTLTableWithGeometry:(id)arg1;
- (void)setInsertionCenterPosition:(struct CGPoint)arg1;
- (_Bool)shouldCancelScrollingToSelectionPath:(id)arg1 forChanges:(id)arg2;
- (id)presetKind;
- (_Bool)prohibitsModificationToChildren;
- (id)infoForSelectionPath:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *childInfos;
- (id)mergedContainedStorages;
- (void)replaceReferencedStylesUsingBlock:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) NSSet *referencedStyles;
- (void)enumerateAllAnnotationsInModelWithHitBlock:(CDUnknownBlockType)arg1;
- (id)searchForAnnotationsWithHitBlock:(CDUnknownBlockType)arg1;
- (void)acceptVisitor:(id)arg1;
- (id)childEnumeratorForUserFlags:(unsigned long long)arg1;
- (id)childEnumerator;
- (_Bool)canAspectRatioLockBeChangedByUser;
- (void)scaleInfoGeometry:(struct CGSize)arg1;
@property(nonatomic) long long contentWritingDirection;
@property(copy, nonatomic) TSDInfoGeometry *geometry; // @dynamic geometry;
- (void)setPrimitiveGeometry:(id)arg1;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (void)p_bakeMixedCellStrokesIntoTable:(id)arg1 outgoingTable:(id)arg2 incomingTable:(id)arg3 fraction:(double)arg4;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (_Bool)suppliesFinalTextures;
- (_Bool)requiresStagesBuildingInReverse;
- (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)arg1;
- (id)textureDeliveryStylesLocalized:(_Bool)arg1 animationFilter:(id)arg2;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)arg1 animationFilter:(id)arg2;
- (void)p_setFilterSet:(id)arg1;
@property(copy, nonatomic) TSTTableFilterSet *filterSet;
- (id)filteringDisplayColumnNameForBaseColumnIndex:(struct TSUModelColumnIndex)arg1;
- (id)filteringColumnNameForBaseColumnIndex:(struct TSUModelColumnIndex)arg1;
- (id)filteringColumnNameForColumnIndex:(unsigned short)arg1;
@property(readonly, nonatomic) struct TSUCellRect filteringBaseColumnRange;
@property(readonly, nonatomic) struct TSUCellRect filteringBodyRowRange;
@property(readonly, nonatomic) struct TSUCellRect filteringBodyRange;
@property(readonly, nonatomic) struct TSUCellRect filteringRange;
@property(retain, nonatomic) TSTStructuredTextImportRecord *textImportRecord;
- (void)notifyTableOfNewResults;
- (id)objectToArchiveInDependencyTracker;
- (struct TSKUIDStruct)formulaOwnerUID;
- (id)formulaOwner;
- (_Bool)registerLast;
- (void)performReadForOneOffFormulaEvaluation:(id)arg1 forCellCoord:(struct TSUCellCoord)arg2;
- (unsigned short)ownerKind;
- (void)unregisterFromCalcEngine:(id)arg1;
- (void)registerWithCalcEngineForDocumentLoad:(id)arg1 ownerKind:(unsigned short)arg2;
- (int)registerWithCalcEngine:(id)arg1;
- (_Bool)isRegisteredWithCalcEngine:(id)arg1;
@property(nonatomic) TSTTableGroupSortOrderUID *groupSortOrder;
@property(readonly, nonatomic) unsigned long long tableSizeClass;
- (id)allRichTextStorages;
- (_Bool)hasFormulas;
@property(readonly, retain, nonatomic) NSArray *columnWidths;
@property(readonly, retain, nonatomic) NSArray *rowHeights;
- (unsigned long long)numberOfPopulatedCells;
- (id)newCell;
- (unsigned long long)numberOfComments;
@property(nonatomic) _Bool wasUnarchivedFromAProvidedTable;
@property(nonatomic) _Bool presetNeedsStrongOwnership;
@property(readonly, nonatomic) TSTCellWillChangeDistributor *cellWillChangeDistributor;
@property(readonly, nonatomic) TSTStrokeSidecar *strokeSidecar;
@property(readonly, nonatomic) TSTSortRuleReferenceTracker *sortRuleReferenceTracker;
@property(copy, nonatomic) TSTTableSortOrder *sortOrder;
@property(readonly, nonatomic) TSTPencilAnnotationOwner *pencilAnnotationOwner;
- (void)upgradeHiddenStates;
@property(readonly, nonatomic) TSTHiddenStatesOwner *hiddenStatesOwner;
@property(readonly, nonatomic) TSTCategoryOwner *categoryOwner;
@property(readonly, nonatomic) struct TSKUIDStruct conditionalStyleFormulaOwnerUID;
@property(readonly, nonatomic) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner;
@property(readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateNonoverflowingAfterRecalc;
@property(readonly, nonatomic) TSTConcurrentMutableCellUIDSet *cellsToInvalidateAfterRecalc;
@property(retain, nonatomic) TSTCellStyle *pivotHeaderColumnSummaryCellStyle;
@property(retain, nonatomic) TSTCellStyle *pivotBodySummaryColumnCellStyle;
@property(retain, nonatomic) TSTCellStyle *pivotBodySummaryRowCellStyle;
@property(retain, nonatomic) TSWPShapeStyle *tableNameShapeStyle;
@property(retain, nonatomic) TSWPParagraphStyle *tableNameStyle;
@property(retain, nonatomic) TSWPParagraphStyle *labelLevel5TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *labelLevel4TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *labelLevel3TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *labelLevel2TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *labelLevel1TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *categoryLevel5TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *categoryLevel4TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *categoryLevel3TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *categoryLevel2TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *categoryLevel1TextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *footerRowTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *headerColumnTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *headerRowTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *bodyTextStyle;
@property(retain, nonatomic) TSTCellStyle *labelLevel5CellStyle;
@property(retain, nonatomic) TSTCellStyle *labelLevel4CellStyle;
@property(retain, nonatomic) TSTCellStyle *labelLevel3CellStyle;
@property(retain, nonatomic) TSTCellStyle *labelLevel2CellStyle;
@property(retain, nonatomic) TSTCellStyle *labelLevel1CellStyle;
@property(retain, nonatomic) TSTCellStyle *categoryLevel5CellStyle;
@property(retain, nonatomic) TSTCellStyle *categoryLevel4CellStyle;
@property(retain, nonatomic) TSTCellStyle *categoryLevel3CellStyle;
@property(retain, nonatomic) TSTCellStyle *categoryLevel2CellStyle;
@property(retain, nonatomic) TSTCellStyle *categoryLevel1CellStyle;
@property(retain, nonatomic) TSTCellStyle *footerRowCellStyle;
@property(retain, nonatomic) TSTCellStyle *headerColumnCellStyle;
@property(retain, nonatomic) TSTCellStyle *headerRowCellStyle;
@property(retain, nonatomic) TSTCellStyle *bodyCellStyle;
@property(retain, nonatomic) TSTTableStylePreset *tableStylePreset;
@property(nonatomic) _Bool styleApplyClearsAll;
@property(readonly, nonatomic) _Bool hasAlternatingRows;
@property(readonly, nonatomic) _Bool hasTableBorder;
@property(readonly, nonatomic) int tableWritingDirection;
@property(nonatomic) _Bool repeatingHeaderColumnsEnabled;
@property(nonatomic) _Bool repeatingHeaderRowsEnabled;
@property(readonly, nonatomic) TSDStroke *tableNameBorderStroke;
@property(nonatomic) _Bool tableNameBorderEnabled;
@property(nonatomic) double tableNameHeight;
@property(nonatomic) _Bool tableNameEnabled;
@property(retain, nonatomic) NSString *tableName;
@property(nonatomic) double defaultColumnWidth;
@property(nonatomic) double defaultRowHeight;
@property(nonatomic) _Bool headerColumnsFrozen;
@property(nonatomic) _Bool headerRowsFrozen;
@property(readonly, nonatomic) unsigned int maxNumberOfHeaderColumns;
@property(readonly, nonatomic) unsigned int minNumberOfHeaderColumns;
- (void)setShouldUseWideRows:(_Bool)arg1;
- (_Bool)shouldUseWideRows;
@property(nonatomic) unsigned int numberOfFooterRows;
@property(nonatomic) unsigned int numberOfHeaderColumns;
@property(nonatomic) unsigned int numberOfHeaderRows;
@property(readonly, nonatomic) unsigned int numberOfFooterOrGrandTotalRows;
@property(readonly, nonatomic) unsigned int numberOfGrandTotalColumns;
- (struct TSCERangeCoordinate)tableRangeCoordinate;
@property(readonly, nonatomic) unsigned short numberOfColumns;
@property(readonly, nonatomic) unsigned int numberOfRows;
@property(nonatomic) _Bool wasCut;
@property(readonly, nonatomic) struct TSKUIDStruct filteringTableUID;
@property(readonly, nonatomic) NSString *pivotSourceRangeName;
@property(readonly, nonatomic) _Bool pivotSourceIsRangeBased;
@property(readonly, nonatomic) TSTTableInfo *pivotSourceTableInfo;
@property(readonly, nonatomic) NSString *pivotSourceTableName;
@property(readonly, nonatomic) NSUUID *pivotSourceNSTableUID;
@property(readonly, nonatomic) struct TSKUIDStruct pivotSourceTableUID;
@property(readonly, nonatomic) NSUUID *nsFilteringTableUID;
@property(readonly, nonatomic) NSUUID *nsTableUID;
- (void)clearFromGroupByUID;
- (void)clearFromTableUID;
@property(nonatomic) struct TSKUIDStruct fromGroupByUID;
@property(nonatomic) struct TSKUIDStruct fromTableUID;
@property(nonatomic) struct TSKUIDStruct tableUID;
@property(nonatomic) TSCECalculationEngine *calcEngine;
@property(readonly, nonatomic) _Bool isRegisteredWithCalcEngine;
- (void)p_updateStorageParentInfoForModels;
@property(readonly, nonatomic, getter=isNewlyImported) _Bool newlyImported;
@property(readonly, nonatomic, getter=isReimportable) _Bool reimportable;
- (_Bool)supportsRichTextUndoAtCellID:(struct TSUCellCoord)arg1;
- (_Bool)supportsAttachedComments;
- (unsigned int)elementKind;
- (id)p_layoutEngineCreateIfNeeded:(_Bool)arg1;
- (void)clearPartitioner;
- (_Bool)isSelectable;
- (_Bool)supportsHyperlinks;
- (id)resolver;
- (id)baseTableModel;
- (Class)tableModelClass;
- (_Bool)isSafeToConvertToText;
- (_Bool)isSafeToConvertToAttributedString;
- (_Bool)isSafeToConvertToImageForImagePaste;
- (_Bool)isSafeToConvertToImage;
- (double)layoutEngineEffectiveTableNameHeight;
- (void)shiftGeometryToIncludeTableNameHeight;
- (id)componentRootObject;
- (id)additionalObjectsToCopy;
- (id)p_negativeImageFill;
- (id)p_positiveImageFill;
- (id)p_fillResourceWithFilename:(id)arg1;
- (void)p_setFillOnCell:(id)arg1 positive:(_Bool)arg2;
- (void)p_setFormula:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)p_setFormulaWithSymbolString:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)p_setFormulaWithSymbolCellCoord:(struct TSUCellCoord)arg1 andAttributeCellCoord:(struct TSUCellCoord)arg2 atCellID:(struct TSUCellCoord)arg3;
- (void)p_setPopupMenuOnCell:(id)arg1 withItems:(id)arg2 andSelectedIndex:(double)arg3;
- (id)p_popupItemsForStrings:(id)arg1;
- (void)p_setupTableModelforStockPrototype;
- (void)p_setupTableModelforStockSwatch;
- (void)p_setupTableModelforNewForm;
- (void)setupTableModelForPrototypeIndex:(long long)arg1 forTableInsertOnly:(_Bool)arg2;
@property(readonly, copy) NSString *description;
- (id)copyWithContext:(id)arg1;
- (void)dealloc;
- (void)willClose;
- (void)releaseLayoutEngine;
- (id)_initWithContext:(id)arg1 fromSourceInfo:(id)arg2 cellRegion:(id)arg3 tableModel:(id)arg4 waitForCalcEngine:(_Bool)arg5 formulaCoordSpace:(long long)arg6;
- (id)_initWithContext:(id)arg1 flatteningFromComplexInfo:(id)arg2 cellRegion:(id)arg3 waitForCalcEngine:(_Bool)arg4 flatteningOptions:(long long)arg5 isSnapshot:(_Bool)arg6;
- (id)initWithContext:(id)arg1 fromSourceInfo:(id)arg2 cellRegion:(id)arg3 waitForCalcEngine:(_Bool)arg4 flattenCategories:(long long)arg5 isSnapshot:(_Bool)arg6;
- (id)initAsDetailTableWithContext:(id)arg1 sourcePivotTableInfo:(id)arg2 pivotSourceCell:(struct TSUCellCoord)arg3;
- (_Bool)hasUsefulPivotSourceCellsInBodyRange:(struct TSUCellRect)arg1;
- (id)initPivotTableWithContext:(id)arg1 sourceTableInfo:(id)arg2;
- (id)initPivotTableWithContext:(id)arg1 sourceTableInfo:(id)arg2 sourceBodyRange:(struct TSUCellRect)arg3 sourceHeaderRowRange:(struct _NSRange)arg4 optionalDataModel:(id)arg5;
- (id)initPivotTableWithContext:(id)arg1 sourceTableInfo:(id)arg2 sourceBodyRange:(struct TSUCellRect)arg3 sourceHeaderRowRange:(struct _NSRange)arg4;
- (id)initWithContext:(id)arg1 otherTableInfo:(id)arg2;
- (id)initWithContext:(id)arg1 geometry:(id)arg2;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 styles:(id)arg3;
- (id)initForTestingWithContext:(id)arg1 rows:(unsigned int)arg2 columns:(unsigned int)arg3;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned int)arg3 columns:(unsigned int)arg4;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned int)arg3 columns:(unsigned int)arg4 stylePreset:(id)arg5;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned int)arg3 columns:(unsigned int)arg4 styles:(id)arg5;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned int)arg3 columns:(unsigned int)arg4 stylePreset:(id)arg5 styles:(id)arg6;
- (float)floatValueForProperty:(int)arg1;
- (id)objectForProperty:(int)arg1;
- (_Bool)containsProperty:(int)arg1;
- (void)prepareToApplyConcurrentCellMap:(id)arg1;
- (id)applyConcurrentCellMapToBaseTable:(id)arg1 options:(unsigned long long)arg2 requestPruneMap:(_Bool)arg3 stylesContainer:(id)arg4 migrationHelper:(id)arg5;
- (void)p_performCommentStorageDOLC:(id)arg1;
- (id)cellAfterApplyDiff:(id)arg1 toCell:(id)arg2 atCellUID:(const struct TSKUIDStructCoord *)arg3 migrationMap:(id)arg4 inverseCellDiff:(id)arg5 concurrentStylesheet:(id)arg6 defaultCellStyle:(id)arg7 defaultTextStyle:(id)arg8;
- (id)applyCellDiff:(id)arg1 atCellUID:(const struct TSKUIDStructCoord *)arg2 migrationMap:(id)arg3 inverseCellDiff:(id)arg4 defaultCellStyle:(id)arg5 defaultTextStyle:(id)arg6;
- (void)applyCellMap:(id)arg1 outPrunedCellMap:(id)arg2 outInverseCellMap:(id)arg3 options:(unsigned long long)arg4 stylesContainer:(id)arg5;
- (id)applyCellDiffMap:(id)arg1 migrationHelper:(id)arg2 updateProperties:(id)arg3;
- (void)p_postCommentNotificationFromDiff:(id)arg1 inverseDiff:(id)arg2 cellID:(struct TSUCellCoord)arg3;
- (long long)mediaCompatibilityTypeForData:(id)arg1 associatedHint:(id)arg2;
- (id)compatibilityCheckerForData:(id)arg1 associatedHint:(id)arg2;
- (struct CGSize)targetSizeForImageData:(id)arg1 associatedHint:(id)arg2;
- (int)p_fillPropertyForStyle:(id)arg1;
- (void)enumerateCellStringsForRows:(unsigned int)arg1 rowCount:(unsigned int)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)enumerateCellStringsUsingBlock:(CDUnknownBlockType)arg1;
- (void)iterateCellsInRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 clampingRange:(struct TSUCellRect)arg4 usingBlock:(CDUnknownBlockType)arg5;
- (void)iterateCellsInRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)iterateCellsInRange:(struct TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)iterateCellsWithFlags:(unsigned long long)arg1 searchFlags:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)p_iterateCellsAndTerminateWithIterator:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)cellIteratorWithRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 clampingRange:(struct TSUCellRect)arg4;
- (id)cellIteratorWithRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3;
- (id)cellIteratorWithRange:(struct TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3;
- (id)cellIteratorWithFlags:(unsigned long long)arg1 searchFlags:(unsigned long long)arg2;
- (id)changeDescriptorsForReorganizingFromRowUids:(const void *)arg1 toRowUids:(const void *)arg2;
- (id)mappingFromRowUids:(const void *)arg1 toRowUids:(const void *)arg2;
- (void)rearrangeWithMapping:(id)arg1;
- (id)sortTagsForSortingRows:(id)arg1 byColumns:(const void *)arg2;
- (id)sortTagsForSortingColumns:(id)arg1 byRows:(const void *)arg2;
- (id)mappingForSortingRows:(id)arg1 withRules:(id)arg2;
- (id)mappingForSortingColumns:(id)arg1 withRules:(id)arg2;
- (id)p_mappingForSortingRowsOrColumns:(id)arg1 withRules:(id)arg2 dimension:(long long)arg3;

// Remaining properties
@property(readonly, nonatomic, getter=isAnchoredToText) _Bool anchoredToText; // @dynamic anchoredToText;
@property(readonly, nonatomic, getter=isAttachedToBodyText) _Bool attachedToBodyText;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, nonatomic, getter=isFloatingAboveText) _Bool floatingAboveText; // @dynamic floatingAboveText;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic, getter=isInlineWithText) _Bool inlineWithText; // @dynamic inlineWithText;
@property(readonly, nonatomic, getter=isInlineWithTextWithWrap) _Bool inlineWithTextWithWrap;
@property(readonly, nonatomic) _Bool isMaster;
@property(nonatomic) _Bool matchesObjectPlaceholderGeometry;
@property(nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment; // @dynamic owningAttachment;
@property(readonly, nonatomic) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse; // @dynamic owningAttachmentNoRecurse;
@property(nonatomic) NSObject<TSDInfo> *parentInfo; // @dynamic parentInfo;
@property(readonly, nonatomic) _Bool storageChangesInvalidateWrap;
@property(readonly) Class superclass;
@property(readonly, nonatomic) _Bool supportsDropCapsInChildStorages;
@property(readonly, nonatomic) _Bool supportsVerticalTextLayoutInChildStorages;

@end

