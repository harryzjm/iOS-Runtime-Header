//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSMutableDictionary, TSDInfoGeometry, TSTLayout, TSTTableInfo, TSUPointerKeyDictionary;

@interface TSTTablePartitioner : NSObject
{
    _Bool _tableIsLTR;
    _Bool _layoutIsLTR;
    TSTTableInfo *_tableInfo;
    TSDInfoGeometry *_infoGeometry;
    TSTLayout *_scaledLayout;
    double _firstPartitionWidth;
    TSUPointerKeyDictionary *_hintMatricesByCanvas;
    NSMutableDictionary *_partitioningPassCache;
    struct CGSize _scaleToFit;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NSMutableDictionary *partitioningPassCache; // @synthesize partitioningPassCache=_partitioningPassCache;
@property(retain, nonatomic) TSUPointerKeyDictionary *hintMatricesByCanvas; // @synthesize hintMatricesByCanvas=_hintMatricesByCanvas;
@property(nonatomic) double firstPartitionWidth; // @synthesize firstPartitionWidth=_firstPartitionWidth;
@property(nonatomic) _Bool layoutIsLTR; // @synthesize layoutIsLTR=_layoutIsLTR;
@property(nonatomic) _Bool tableIsLTR; // @synthesize tableIsLTR=_tableIsLTR;
@property(retain, nonatomic) TSTLayout *scaledLayout; // @synthesize scaledLayout=_scaledLayout;
@property(copy, nonatomic) TSDInfoGeometry *infoGeometry; // @synthesize infoGeometry=_infoGeometry;
@property(nonatomic) struct CGSize scaleToFit; // @synthesize scaleToFit=_scaleToFit;
@property(nonatomic) __weak TSTTableInfo *tableInfo; // @synthesize tableInfo=_tableInfo;
- (void)p_flushCacheAfterPartitioningFinished:(id)arg1 lastHint:(id)arg2 horizontally:(_Bool)arg3;
- (id)hintCacheKeyForHint:(id)arg1;
- (id)hintCacheKeyForPartitioningPass:(id)arg1 andHintID:(struct TSUCellCoord)arg2;
- (id)partitioningPassForHint:(id)arg1 withPreviousHint:(id)arg2;
- (id)partitioningPassForFirstPartitionSize:(struct CGSize)arg1;
@property(readonly, nonatomic) struct CGRect totalPartitionFrame;
- (void)setLayoutPartititionsRightToLeft:(_Bool)arg1 contentPartitionsRightToLeft:(_Bool)arg2;
- (void)resetScaleToFit;
@property(readonly, nonatomic) _Bool scaleIsValid;
- (_Bool)shouldReuseLayout:(id)arg1 forSize:(struct CGSize)arg2 parentLayout:(id)arg3 hint:(id)arg4;
- (id)hintForLayout:(id)arg1;
- (_Bool)p_didFinishPartitioningHint:(id)arg1 horizontally:(_Bool)arg2;
- (_Bool)didHint:(id)arg1 syncWithNextHint:(id)arg2 horizontally:(_Bool)arg3;
- (id)layoutForHint:(id)arg1 parentLayout:(id)arg2;
- (id)nextLayoutForSize:(struct CGSize)arg1 parentLayout:(id)arg2 previousHint:(id)arg3 horizontally:(_Bool)arg4 outFinished:(out _Bool *)arg5;
- (id)nextHintForSize:(struct CGSize)arg1 parentLayout:(id)arg2 previousHint:(id)arg3 horizontally:(_Bool)arg4 outFinished:(out _Bool *)arg5;
- (struct TSUCellRect)calculateCellRangeForNextPartition:(unsigned short)arg1 nextPartitionRange:(struct TSUCellRect)arg2 additionalHeightForCaption:(double)arg3 availableSizeRemaining:(struct CGSize)arg4 previousHint:(id)arg5;
- (struct TSUCellRect)measureCellRangeForNextPartitionOfSize:(struct CGSize)arg1 previousHint:(id)arg2 horizontally:(_Bool)arg3;
- (void)validateScaledLayout;
@property(readonly, nonatomic) double inlineTableWidth;
- (id)initWithInfo:(id)arg1;

@end

