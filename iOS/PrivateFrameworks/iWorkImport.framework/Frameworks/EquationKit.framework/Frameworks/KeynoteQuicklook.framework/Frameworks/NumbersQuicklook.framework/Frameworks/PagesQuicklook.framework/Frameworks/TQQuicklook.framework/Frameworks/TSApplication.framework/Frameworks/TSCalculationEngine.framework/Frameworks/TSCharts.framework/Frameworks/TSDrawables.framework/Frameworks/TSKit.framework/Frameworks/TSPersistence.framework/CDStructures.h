//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ArchiveInfo {
    CDUnknownFunctionPointerType *_vptr$MessageLite;
    struct InternalMetadata _internal_metadata_;
    struct HasBits<1UL> _has_bits_;
    struct CachedSize _cached_size_;
    struct RepeatedPtrField<TSP::MessageInfo> message_infos_;
    unsigned long long identifier_;
    _Bool should_merge_;
};

struct Arena;

struct ArenaStringPtr {
    struct TaggedPtr<std::string> tagged_ptr_;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct CachedSize {
    struct atomic<int> size_;
};

struct ComponentExternalReferenceInfo {
    long long _field1;
    _Bool _field2;
    _Bool _field3;
};

struct ComponentInfo;

struct DataCollaborationProperties {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    int _field4;
    long long _field5;
    _Bool _field6;
};

struct DataProperties {
    int _field1;
    id _field2;
    unsigned long long _field3;
    id _field4;
    unsigned int _field5;
};

struct Descriptor;

struct DescriptorPool;

struct DigestMap<TSP::DataCollaborationProperties> {
    struct __hash_table<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>, std::allocator<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct DigestMap<TSP::DataProperties> {
    struct __hash_table<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>, std::allocator<std::__hash_value_type<TSPDigest *, TSP::DataProperties>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataProperties>, TSP::TSPDigestHash, TSP::TSPDigestEqualTo, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<TSPDigest *, std::__hash_value_type<TSPDigest *, TSP::DataProperties>, TSP::TSPDigestEqualTo, TSP::TSPDigestHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct DispatchDataInputStream {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    id _field5;
    unsigned long long _field6;
    char *_field7;
};

struct DocumentRevision;

struct FieldInfo {
    CDUnknownFunctionPointerType *_vptr$MessageLite;
    struct InternalMetadata _internal_metadata_;
    struct HasBits<1UL> _has_bits_;
    struct CachedSize _cached_size_;
    struct RepeatedField<unsigned long long> object_references_;
    struct atomic<int> _object_references_cached_byte_size_;
    struct RepeatedField<unsigned long long> data_references_;
    struct atomic<int> _data_references_cached_byte_size_;
    struct RepeatedField<unsigned int> known_field_version_;
    struct atomic<int> _known_field_version_cached_byte_size_;
    struct ArenaStringPtr known_field_feature_identifier_;
    struct FieldPath *path_;
    int type_;
    int unknown_field_rule_;
    int known_field_rule_;
};

struct FieldPath;

struct FinalizeHandlerItem;

struct HasBits<1UL> {
    unsigned int has_bits_[1];
};

struct IdentifierMap<TSP::ComponentProperties> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::ComponentProperties>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ComponentProperties>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ComponentProperties>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::ComponentProperties>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ComponentProperties>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ComponentProperties>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSP::ComponentPropertiesSnapshot> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSP::ExternalReferenceInfo> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSP::FinalizeHandlerItem> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSP::ObjectInfo> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::ObjectInfo>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ObjectInfo>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ObjectInfo>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::ObjectInfo>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ObjectInfo>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ObjectInfo>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSP::ReferenceMapInfo> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSP::WrittenComponentInfo> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSP::WrittenObjectInfo> {
    struct __hash_table<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<TSPData *__weak> {
    struct __hash_table<std::__hash_value_type<const long long, TSPData *__weak>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSPData *__weak>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSPData *__weak>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, TSPData *__weak>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, TSPData *__weak>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, TSPData *__weak>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<__unsafe_unretained Class> {
    struct __hash_table<std::__hash_value_type<const long long, __unsafe_unretained Class>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, __unsafe_unretained Class>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, __unsafe_unretained Class>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, __unsafe_unretained Class>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, __unsafe_unretained Class>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, __unsafe_unretained Class>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<bool> {
    struct __hash_table<std::__hash_value_type<const long long, bool>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, bool>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, bool>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, bool>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, bool>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, bool>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct IdentifierMap<long long> {
    struct __hash_table<std::__hash_value_type<const long long, long long>, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, long long>, std::hash<long long>, std::equal_to<const long long>, true>, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, long long>, std::equal_to<const long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<const long long, long long>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const long long, std::__hash_value_type<const long long, long long>, std::hash<long long>, std::equal_to<const long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const long long, std::__hash_value_type<const long long, long long>, std::equal_to<const long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct InternalMetadata {
    void *ptr_;
};

struct Message {
    CDUnknownFunctionPointerType *_field1;
    struct InternalMetadata _field2;
};

struct MessageFactory;

struct MessageInfo {
    CDUnknownFunctionPointerType *_vptr$MessageLite;
    struct InternalMetadata _internal_metadata_;
    struct HasBits<1UL> _has_bits_;
    struct CachedSize _cached_size_;
    struct RepeatedField<unsigned int> version_;
    struct atomic<int> _version_cached_byte_size_;
    struct RepeatedPtrField<TSP::FieldInfo> field_infos_;
    struct RepeatedField<unsigned long long> object_references_;
    struct atomic<int> _object_references_cached_byte_size_;
    struct RepeatedField<unsigned long long> data_references_;
    struct atomic<int> _data_references_cached_byte_size_;
    struct RepeatedField<unsigned int> diff_merge_version_;
    struct atomic<int> _diff_merge_version_cached_byte_size_;
    struct RepeatedPtrField<TSP::FieldPath> fields_to_remove_;
    struct RepeatedField<unsigned int> diff_read_version_;
    struct atomic<int> _diff_read_version_cached_byte_size_;
    struct FieldPath *diff_field_path_;
    unsigned int type_;
    unsigned int length_;
    unsigned int base_message_index_;
};

struct ObjectSerializationDirectory {
    CDUnknownFunctionPointerType *_vptr$MessageLite;
    struct InternalMetadata _internal_metadata_;
    struct RepeatedPtrField<TSP::ObjectSerializationDirectory_Entry> entries_;
    struct CachedSize _cached_size_;
};

struct ObjectSerializationMetadata {
    CDUnknownFunctionPointerType *_vptr$MessageLite;
    struct InternalMetadata _internal_metadata_;
    struct HasBits<1UL> _has_bits_;
    struct CachedSize _cached_size_;
    struct RepeatedField<unsigned int> version_;
    struct atomic<int> _version_cached_byte_size_;
    struct RepeatedPtrField<TSP::DataInfo> datas_;
    struct RepeatedPtrField<TSP::ObjectUUIDMapEntry> external_object_uuid_map_entries_;
    struct RepeatedField<unsigned int> read_version_;
    struct atomic<int> _read_version_cached_byte_size_;
    struct UUID *source_document_uuid_;
    struct UUID *version_uuid_;
    struct ComponentInfo *component_;
    struct Reference *data_metadata_map_;
};

struct ObjectStackEntry;

struct ObjectStateIdentifier {
    _Bool _field1;
    long long _field2;
    _Bool _field3;
    id _field4;
};

struct PackageMetadata {
    CDUnknownFunctionPointerType *_vptr$MessageLite;
    struct InternalMetadata _internal_metadata_;
    struct HasBits<1UL> _has_bits_;
    struct CachedSize _cached_size_;
    struct RepeatedPtrField<TSP::ComponentInfo> components_;
    struct RepeatedPtrField<TSP::DataInfo> datas_;
    struct RepeatedField<unsigned int> read_version_;
    struct atomic<int> _read_version_cached_byte_size_;
    struct RepeatedField<unsigned int> write_version_;
    struct atomic<int> _write_version_cached_byte_size_;
    struct RepeatedField<unsigned int> file_format_version_;
    struct atomic<int> _file_format_version_cached_byte_size_;
    struct RepeatedPtrField<TSP::ComponentInfo> versioned_components_;
    struct DocumentRevision *revision_;
    struct Reference *data_metadata_map_;
    unsigned long long last_object_identifier_;
    unsigned long long save_token_;
    int preferred_package_type_;
};

struct Reference;

struct Reflection {
    struct Descriptor *_field1;
    struct ReflectionSchema _field2;
    struct DescriptorPool *_field3;
    struct MessageFactory *_field4;
    int _field5;
};

struct ReflectionSchema {
    struct Message *_field1;
    unsigned int *_field2;
    unsigned int *_field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
};

struct Rep;

struct RepeatedExternalReferenceCompletionInfo;

struct RepeatedField<long long> {
    int current_size_;
    int total_size_;
    void *arena_or_elements_;
};

struct RepeatedField<std::string> {
    int current_size_;
    int total_size_;
    void *arena_or_elements_;
};

struct RepeatedField<unsigned int> {
    int current_size_;
    int total_size_;
    void *arena_or_elements_;
};

struct RepeatedField<unsigned long long> {
    int current_size_;
    int total_size_;
    void *arena_or_elements_;
};

struct RepeatedPtrField<TSP::ComponentInfo> {
    struct Arena *arena_;
    int current_size_;
    int total_size_;
    struct Rep *rep_;
};

struct RepeatedPtrField<TSP::DataInfo> {
    struct Arena *arena_;
    int current_size_;
    int total_size_;
    struct Rep *rep_;
};

struct RepeatedPtrField<TSP::FieldInfo> {
    struct Arena *arena_;
    int current_size_;
    int total_size_;
    struct Rep *rep_;
};

struct RepeatedPtrField<TSP::FieldPath> {
    struct Arena *arena_;
    int current_size_;
    int total_size_;
    struct Rep *rep_;
};

struct RepeatedPtrField<TSP::MessageInfo> {
    struct Arena *arena_;
    int current_size_;
    int total_size_;
    struct Rep *rep_;
};

struct RepeatedPtrField<TSP::ObjectSerializationDirectory_Entry> {
    struct Arena *arena_;
    int current_size_;
    int total_size_;
    struct Rep *rep_;
};

struct RepeatedPtrField<TSP::ObjectUUIDMapEntry> {
    struct Arena *arena_;
    int current_size_;
    int total_size_;
    struct Rep *rep_;
};

struct SnappySource {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    id _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    char *_field8;
};

struct TSPObjectLocation {
    long long _field1;
    long long _field2;
};

struct TaggedPtr<std::string> {
    void *ptr_;
};

struct UUID;

struct UUIDData<TSP::UUIDData> {
    union {
        unsigned char _field1[16];
        struct {
            unsigned char _field1;
            unsigned char _field2;
            unsigned char _field3;
            unsigned char _field4;
            unsigned char _field5;
            unsigned char _field6;
            unsigned char _field7;
            unsigned char _field8;
            unsigned char _field9;
            unsigned char _field10;
            unsigned char _field11;
            unsigned char _field12;
            unsigned char _field13;
            unsigned char _field14;
            unsigned char _field15;
            unsigned char _field16;
        } _field2;
        CDStruct_af2b86c8 _field3;
    } _field1;
};

struct UnarchiverReference;

struct UnarchiverRepeatedReference;

struct UnknownFieldSet;

struct ViewStateMetadata {
    CDUnknownFunctionPointerType *_vptr$MessageLite;
    struct InternalMetadata _internal_metadata_;
    struct HasBits<1UL> _has_bits_;
    struct CachedSize _cached_size_;
    struct RepeatedField<unsigned int> version_;
    struct atomic<int> _version_cached_byte_size_;
    struct RepeatedPtrField<TSP::ObjectUUIDMapEntry> external_object_uuid_map_entries_;
    struct RepeatedField<unsigned int> read_version_;
    struct atomic<int> _read_version_cached_byte_size_;
    struct ComponentInfo *component_;
    struct UUID *version_uuid_;
};

struct WrittenComponentInfo {
    id _field1;
    id _field2;
    _Bool _field3;
    _Bool _field4;
    id _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    id _field9;
    id _field10;
    _Bool _field11;
    unsigned char _field12;
    long long _field13;
    unsigned long long _field14;
    unsigned long long _field15;
    unsigned long long _field16;
    unsigned long long _field17;
    _Bool _field18;
    id _field19;
    id _field20;
    id _field21;
    id _field22;
    id _field23;
    id _field24;
    id _field25;
    id _field26;
};

struct WrittenObjectInfo;

struct ZeroCopyInputStream {
    CDUnknownFunctionPointerType *_field1;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> {
        _Atomic int __a_value;
    } __a_;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct deque<TSP::WrittenObjectInfo, std::allocator<TSP::WrittenObjectInfo>> {
    struct __split_buffer<TSP::WrittenObjectInfo *, std::allocator<TSP::WrittenObjectInfo *>> {
        struct WrittenObjectInfo **__first_;
        struct WrittenObjectInfo **__begin_;
        struct WrittenObjectInfo **__end_;
        struct __compressed_pair<TSP::WrittenObjectInfo **, std::allocator<TSP::WrittenObjectInfo *>> {
            struct WrittenObjectInfo **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<TSP::WrittenObjectInfo>> {
        unsigned long long __value_;
    } __size_;
};

struct map<int, TSPFieldTreeNode *, std::less<int>, std::allocator<std::pair<const int, TSPFieldTreeNode *>>> {
    struct __tree<std::__value_type<int, TSPFieldTreeNode *>, std::__map_value_compare<int, std::__value_type<int, TSPFieldTreeNode *>, std::less<int>, true>, std::allocator<std::__value_type<int, TSPFieldTreeNode *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, TSPFieldTreeNode *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, TSPFieldTreeNode *>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<long long, TSP::DescriptionPrinterMessage, std::less<long long>, std::allocator<std::pair<const long long, TSP::DescriptionPrinterMessage>>> {
    struct __tree<std::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__map_value_compare<long long, std::__value_type<long long, TSP::DescriptionPrinterMessage>, std::less<long long>, true>, std::allocator<std::__value_type<long long, TSP::DescriptionPrinterMessage>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<long long, TSP::DescriptionPrinterMessage>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<long long, std::__value_type<long long, TSP::DescriptionPrinterMessage>, std::less<long long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, std::map<long long, TSPComponent *>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::map<long long, TSPComponent *>>>> {
    struct __tree<std::__value_type<unsigned int, std::map<long long, TSPComponent *>>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, std::map<long long, TSPComponent *>>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, std::map<long long, TSPComponent *>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<long long, TSPComponent *>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, std::map<long long, TSPComponent *>>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct queue<TSP::WrittenObjectInfo, std::deque<TSP::WrittenObjectInfo>> {
    struct deque<TSP::WrittenObjectInfo, std::allocator<TSP::WrittenObjectInfo>> c;
};

struct shared_ptr<TSP::ArchiveInfo> {
    struct ArchiveInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<google::protobuf::Message> {
    struct Message *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<google::protobuf::UnknownFieldSet> {
    struct UnknownFieldSet *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<TSP::IdentifierMap<bool>, std::default_delete<TSP::IdentifierMap<bool>>> {
    struct __compressed_pair<TSP::IdentifierMap<bool>*, std::default_delete<TSP::IdentifierMap<bool>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<google::protobuf::Message, std::default_delete<google::protobuf::Message>> {
    struct __compressed_pair<google::protobuf::Message *, std::default_delete<google::protobuf::Message>> {
        struct Message *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataCollaborationProperties>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSPDigest *, TSP::DataProperties>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentProperties>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ComponentPropertiesSnapshot>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ExternalReferenceInfo>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::FinalizeHandlerItem>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ObjectInfo>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::ReferenceMapInfo>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenComponentInfo>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSP::WrittenObjectInfo>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, TSPData *__weak>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, __unsafe_unretained Class>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, bool>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const long long, long long>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::unordered_map<const TSP::FieldPath, TSP::FieldInfoRuleAttributesForVersionRequirements, TSP::FieldPathHash, TSP::FieldPathEqualTo>, std::default_delete<std::unordered_map<const TSP::FieldPath, TSP::FieldInfoRuleAttributesForVersionRequirements, TSP::FieldPathHash, TSP::FieldPathEqualTo>>> {
    struct __compressed_pair<std::unordered_map<const TSP::FieldPath, TSP::FieldInfoRuleAttributesForVersionRequirements, TSP::FieldPathHash, TSP::FieldPathEqualTo>*, std::default_delete<std::unordered_map<const TSP::FieldPath, TSP::FieldInfoRuleAttributesForVersionRequirements, TSP::FieldPathHash, TSP::FieldPathEqualTo>>> {
        void *__value_;
    } __ptr_;
};

struct unordered_map<const std::array<unsigned char, 20>, TSPData *__weak, TSP::DigestHash, TSP::DigestEqualTo, std::allocator<std::pair<const std::array<unsigned char, 20>, TSPData *__weak>>> {
    struct __hash_table<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, std::__unordered_map_hasher<const std::array<unsigned char, 20>, std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestHash, TSP::DigestEqualTo, true>, std::__unordered_map_equal<const std::array<unsigned char, 20>, std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestEqualTo, TSP::DigestHash, true>, std::allocator<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const std::array<unsigned char, 20>, std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestHash, TSP::DigestEqualTo, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const std::array<unsigned char, 20>, std::__hash_value_type<const std::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestEqualTo, TSP::DigestHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<TSP::FinalizeHandlerItem *, std::allocator<TSP::FinalizeHandlerItem *>> {
    struct FinalizeHandlerItem **__begin_;
    struct FinalizeHandlerItem **__end_;
    struct __compressed_pair<TSP::FinalizeHandlerItem **, std::allocator<TSP::FinalizeHandlerItem *>> {
        struct FinalizeHandlerItem **__value_;
    } __end_cap_;
};

struct vector<TSP::ObjectStackEntry, std::allocator<TSP::ObjectStackEntry>> {
    struct ObjectStackEntry *__begin_;
    struct ObjectStackEntry *__end_;
    struct __compressed_pair<TSP::ObjectStackEntry *, std::allocator<TSP::ObjectStackEntry>> {
        struct ObjectStackEntry *__value_;
    } __end_cap_;
};

struct vector<TSP::RepeatedExternalReferenceCompletionInfo, std::allocator<TSP::RepeatedExternalReferenceCompletionInfo>> {
    struct RepeatedExternalReferenceCompletionInfo *__begin_;
    struct RepeatedExternalReferenceCompletionInfo *__end_;
    struct __compressed_pair<TSP::RepeatedExternalReferenceCompletionInfo *, std::allocator<TSP::RepeatedExternalReferenceCompletionInfo>> {
        struct RepeatedExternalReferenceCompletionInfo *__value_;
    } __end_cap_;
};

struct vector<TSP::UnarchiverReference, std::allocator<TSP::UnarchiverReference>> {
    struct UnarchiverReference *__begin_;
    struct UnarchiverReference *__end_;
    struct __compressed_pair<TSP::UnarchiverReference *, std::allocator<TSP::UnarchiverReference>> {
        struct UnarchiverReference *__value_;
    } __end_cap_;
};

struct vector<TSP::UnarchiverRepeatedReference, std::allocator<TSP::UnarchiverRepeatedReference>> {
    struct UnarchiverRepeatedReference *__begin_;
    struct UnarchiverRepeatedReference *__end_;
    struct __compressed_pair<TSP::UnarchiverRepeatedReference *, std::allocator<TSP::UnarchiverRepeatedReference>> {
        struct UnarchiverRepeatedReference *__value_;
    } __end_cap_;
};

struct vector<std::unique_ptr<TSP::PersistedObjectUUIDMapOperation>, std::allocator<std::unique_ptr<TSP::PersistedObjectUUIDMapOperation>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::unique_ptr<TSP::PersistedObjectUUIDMapOperation>*, std::allocator<std::unique_ptr<TSP::PersistedObjectUUIDMapOperation>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<void (^)(), std::allocator<void (^)()>> {
    CDUnknownBlockType *__begin_;
    CDUnknownBlockType *__end_;
    struct __compressed_pair<void (^__strong *)(), std::allocator<void (^)()>> {
        CDUnknownBlockType *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long version;
    unsigned long long compatibleVersion;
} CDStruct_af2b86c8;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

// Template types
typedef struct UUIDData<TSP::UUIDData> {
    union {
        unsigned char _field1[16];
        struct {
            unsigned char _field1;
            unsigned char _field2;
            unsigned char _field3;
            unsigned char _field4;
            unsigned char _field5;
            unsigned char _field6;
            unsigned char _field7;
            unsigned char _field8;
            unsigned char _field9;
            unsigned char _field10;
            unsigned char _field11;
            unsigned char _field12;
            unsigned char _field13;
            unsigned char _field14;
            unsigned char _field15;
            unsigned char _field16;
        } _field2;
        CDStruct_af2b86c8 _field3;
    } _field1;
} UUIDData_d8cf1c72;

typedef struct shared_ptr<TSP::ArchiveInfo> {
    struct ArchiveInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_bafc106c;

typedef struct shared_ptr<google::protobuf::Message> {
    struct Message *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_cd1ed623;

typedef struct unique_ptr<TSP::IdentifierMap<bool>, std::default_delete<TSP::IdentifierMap<bool>>> {
    struct __compressed_pair<TSP::IdentifierMap<bool>*, std::default_delete<TSP::IdentifierMap<bool>>> {
        void *__value_;
    } __ptr_;
} unique_ptr_3df01401;

typedef struct unique_ptr<google::protobuf::Message, std::default_delete<google::protobuf::Message>> {
    struct __compressed_pair<google::protobuf::Message *, std::default_delete<google::protobuf::Message>> {
        struct Message *__value_;
    } __ptr_;
} unique_ptr_f0def102;

