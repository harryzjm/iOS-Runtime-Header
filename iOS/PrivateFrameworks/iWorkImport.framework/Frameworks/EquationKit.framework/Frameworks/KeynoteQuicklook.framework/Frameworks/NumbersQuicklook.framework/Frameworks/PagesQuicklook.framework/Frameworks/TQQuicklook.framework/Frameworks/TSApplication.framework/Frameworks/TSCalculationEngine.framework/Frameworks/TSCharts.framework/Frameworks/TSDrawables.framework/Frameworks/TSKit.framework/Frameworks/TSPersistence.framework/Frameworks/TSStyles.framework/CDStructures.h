//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct InternalMetadata {
    void *_field1;
};

struct Message {
    CDUnknownFunctionPointerType *_field1;
    struct InternalMetadata _field2;
};

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct map<Class, int, std::less<Class>, std::allocator<std::pair<const Class, int>>> {
    struct __tree<std::__value_type<Class, int>, std::__map_value_compare<Class, std::__value_type<Class, int>, std::less<Class>, true>, std::allocator<std::__value_type<Class, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<Class, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<Class, std::__value_type<Class, int>, std::less<Class>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, std::pair<Class, std::string>, std::less<int>, std::allocator<std::pair<const int, std::pair<Class, std::string>>>> {
    struct __tree<std::__value_type<int, std::pair<Class, std::string>>, std::__map_value_compare<int, std::__value_type<int, std::pair<Class, std::string>>, std::less<int>, true>, std::allocator<std::__value_type<int, std::pair<Class, std::string>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, std::pair<Class, std::string>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, std::pair<Class, std::string>>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

