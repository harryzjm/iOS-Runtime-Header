//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TSPersistence/TSPObject.h>

#import <TSTables/TSCEFormulaOwning-Protocol.h>
#import <TSTables/TSCEHeaderNameProtocol-Protocol.h>
#import <TSTables/TSTCellWillChangeProtocol-Protocol.h>

@class NSCharacterSet, NSMutableSet, NSObject, NSString, TSCECalculationEngine, TSCENameTrie;
@protocol OS_dispatch_queue;

@interface TSTHeaderNameMgr : TSPObject <TSCEHeaderNameProtocol, TSTCellWillChangeProtocol, TSCEFormulaOwning>
{
    TSCECalculationEngine *_calcEngine;
    TSCECalculationEngine *_weakCalcEngine;
    NSObject<OS_dispatch_queue> *_headerNameMgrQueue;
    struct TSKUIDStruct _ownerUID;
    struct TSUCellCoord _nextPrecedentCoord;
    struct TSUCellCoord _allHeaderPerTablesPrecedent;
    struct TSUCellCoord _needsTileSplittingPrecedent;
    struct vector<TSTHeaderNameMgrTile *, std::allocator<TSTHeaderNameMgrTile *>> _nameFragmentTiles;
    struct unordered_map<TSUCellCoord, TSTHeaderNameMgrEntry *, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, TSTHeaderNameMgrEntry *>>> _fragPrecedentToEntry;
    struct unordered_map<TSCEUidCellRef, TSCECellCoordSet, std::hash<TSCEUidCellRef>, std::equal_to<TSCEUidCellRef>, std::allocator<std::pair<const TSCEUidCellRef, TSCECellCoordSet>>> _fragPrecedentsUsedByCellRef;
    struct unordered_map<TSKUIDStruct, TSTHeaderPerTable *, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSTHeaderPerTable *>>> _perTableInfo;
    struct unordered_map<TSUCellCoord, TSKUIDStruct, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, TSKUIDStruct>>> _headerPerTablePrecedentToTableUID;
    TSCENameTrie *_namePrefixIndex;
    NSMutableSet *_tilesToConsiderSplitting;
    _Bool _isClosing;
    struct TSKUIDStruct _nrm_ownerUID;
    NSCharacterSet *_whitespaceToBreakAt;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct TSCERangeRef)baseHeaderRowsForCell:(const struct TSCECellRef *)arg1;
- (struct TSCERangeRef)baseHeaderColumnsForCell:(const struct TSCECellRef *)arg1;
- (void)invalidateForCalcEngine:(id)arg1;
- (void)writeResultsForCalcEngine:(id)arg1;
- (struct TSCERecalculationState)evaluateFormulaAt:(struct TSUCellCoord)arg1 withCalcEngine:(id)arg2 recalcOptions:(struct TSCERecalculationState)arg3;
- (long long)evaluationMode;
- (id)linkedResolver;
- (unsigned short)ownerKind;
- (void)unregisterFromCalcEngine;
- (int)registerWithCalcEngine:(id)arg1;
- (struct TSCECellRefSet)allHeaderCellRefsLimitedToTable:(const struct TSKUIDStruct *)arg1;
- (struct TSCECellRefSet)headerCellsMatching:(id)arg1 limitToTable:(const struct TSKUIDStruct *)arg2 includePrefixes:(_Bool)arg3;
- (id)subsetForReferenceName:(id)arg1 limitToTable:(const struct TSKUIDStruct *)arg2 includePrefixes:(_Bool)arg3;
- (void)p_processWorkForTable:(const struct TSKUIDStruct *)arg1;
- (void)willRemoveRows:(const void *)arg1 tableUID:(const struct TSKUIDStruct *)arg2;
- (void)willApplyConcurrentCellMap:(id)arg1 tableUID:(const struct TSKUIDStruct *)arg2;
- (void)willApplyBaseCellMap:(id)arg1 tableUID:(const struct TSKUIDStruct *)arg2;
- (void)willApplyCell:(id)arg1 baseCellCoord:(struct TSUModelCellCoord)arg2 tableUID:(const struct TSKUIDStruct *)arg3;
- (void)p_willApplyCell:(id)arg1 baseCellCoord:(struct TSUModelCellCoord)arg2 tableUID:(const struct TSKUIDStruct *)arg3;
@property(readonly, copy) NSString *description;
- (id)anyRefForRangeForHeaderCell:(const struct TSCECellRef *)arg1 usePreserveFlags:(_Bool)arg2;
- (_Bool)referenceNameIsUnique:(id)arg1 forReference:(const void *)arg2 contextTable:(const struct TSKUIDStruct *)arg3;
- (id)stringInHeaderCell:(const struct TSCECellRef *)arg1;
- (struct TSCERangeRef)spanningRangeForHeaderCell:(const struct TSCECellRef *)arg1;
- (struct TSCECellRefSet)nameFragmentPrecedentsForReferenceString:(id)arg1;
- (void)clearTextAtCellCoord:(const struct TSKUIDStructCoord *)arg1 tableUID:(const struct TSKUIDStruct *)arg2;
- (void)p_updateWithWordFragments:(const void *)arg1 atCellCoord:(const struct TSKUIDStructCoord *)arg2 tableUID:(const struct TSKUIDStruct *)arg3;
- (void)p_updateText:(id)arg1 atCellCoord:(const struct TSKUIDStructCoord *)arg2 tableUID:(const struct TSKUIDStruct *)arg3;
- (void)updateText:(id)arg1 atCellCoord:(const struct TSKUIDStructCoord *)arg2 tableUID:(const struct TSKUIDStruct *)arg3;
- (void)updateWithIndexingChunks:(id)arg1;
- (void *)fragmentEntryForString:(id)arg1 createIfMissing:(_Bool)arg2;
- (void)handleFullTile:(id)arg1;
- (id)findTileForString:(id)arg1 findClosest:(_Bool)arg2 foundAtOffset:(unsigned long long *)arg3;
- (id)findTileForString:(id)arg1 findClosest:(_Bool)arg2;
- (id)tileForEntry:(void *)arg1;
- (void *)fragmentEntryForNameFragmentPrecedent:(const struct TSUCellCoord *)arg1;
- (void)unpackEntryAfterUnarchive:(void *)arg1;
- (void)loadFromUnarchiver:(id)arg1;
- (void)saveToArchiver:(id)arg1;
- (void)updateTableUIDFrom:(const struct TSKUIDStruct *)arg1 toTableUID:(const struct TSKUIDStruct *)arg2;
- (void)endTrackingNamesInTable:(const struct TSKUIDStruct *)arg1;
- (void)beginTrackingNamesInTable:(const struct TSKUIDStruct *)arg1;
- (void)updateTrackedHeadersForDocumentLocaleChange:(const struct TSKUIDStruct *)arg1;
- (void)updateTrackedHeaders:(const struct TSKUIDStruct *)arg1;
- (void)updateTrackedHeaders:(const struct TSKUIDStruct *)arg1 checkForEmptyHeaders:(_Bool)arg2;
- (struct TSTHeaderPerTable *)perTableEntryForTable:(const struct TSKUIDStruct *)arg1 createIfMissing:(_Bool)arg2;
- (vector_dba3087d)wordFragmentsFromString:(id)arg1 savePreserveFlags:(_Bool)arg2;
- (void)usedPrecedentCoord:(const struct TSUCellCoord *)arg1;
- (struct TSUCellCoord)getNextPrecedentCoord:(_Bool)arg1;
- (void)setNRM_formulaOwnerUID:(const struct TSKUIDStruct *)arg1;
- (struct TSKUIDStruct)NRM_formulaOwnerUID;
- (struct TSKUIDStruct)formulaOwnerUID;
- (struct TSKUIDStruct)ownerUID;
- (void)setCalcEngine:(id)arg1;
@property(readonly, nonatomic) TSCECalculationEngine *calcEngine;
- (void)setEntry:(void *)arg1 forPrecedentCoord:(const struct TSUCellCoord *)arg2;
- (id)headerNameMgrQueue;
- (unsigned long long)numberOfTiles;
@property(readonly, nonatomic) _Bool isClosing;
- (void)willClose;
- (void)addChangedTile:(id)arg1;
- (void)waitForQueueToDrain;
- (id)namePrefixIndex;
- (void)dealloc;
- (void)setup;
- (id)initWithContext:(id)arg1;
- (id)initWithContext:(id)arg1 calcEngine:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

