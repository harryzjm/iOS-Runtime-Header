//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct TSCEBaseFormat {
    unsigned char _field1;
    unsigned char _field2;
    _Bool _field3;
};

struct TSCECellRef {
    struct TSUCellCoord _field1;
    struct TSKUIDStruct _field2;
};

struct TSCEDurationFormat {
    unsigned int :1;
    unsigned int :6;
    unsigned int :6;
    unsigned int :3;
};

struct TSCEFormat {
    id _field1;
    unsigned int _field2;
    unsigned char _field3;
    struct TSCEDurationFormat _field4;
    struct TSCEBaseFormat _field5;
    struct TSCEFractionFormat _field6;
    struct TSCENumberFormat _field7;
};

struct TSCEFractionFormat {
    char _field1;
};

struct TSCEGrid {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct TSCEFormat _field3;
};

struct TSCENumberFormat {
    unsigned char _field1;
    unsigned int :3;
    unsigned int :1;
    unsigned int :1;
    unsigned short _field2;
};

struct TSCERangeCoordinate {
    struct TSUCellCoord _topLeft;
    struct TSUCellCoord _bottomRight;
};

struct TSCERangeRef {
    struct TSCERangeCoordinate range;
    struct TSKUIDStruct _tableUID;
};

struct TSCERecalculationState {
    unsigned char _field1;
};

struct TSCEValue {
    union {
        struct {
            struct {
                unsigned long long _field1[2];
            } _field1;
            unsigned char _field2[24];
            unsigned short _field3;
            _Bool _field4;
        } _field1;
        unsigned long long _field2[9];
    } _field1;
    unsigned char _field2;
};

struct TSKUIDStruct {
    unsigned long long _lower;
    unsigned long long _upper;
};

struct TSUCellCoord {
    unsigned int row;
    unsigned short column;
    _Bool _preserveRow;
    _Bool _preserveColumn;
};

struct TSUCellRect {
    struct TSUCellCoord _field1;
    CDStruct_c0454aff _field2;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct map<TSUCellCoord, SFUtility::ObjcSharedPtr<NSObject>, std::less<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, SFUtility::ObjcSharedPtr<NSObject>>>> {
    struct __tree<std::__value_type<TSUCellCoord, SFUtility::ObjcSharedPtr<NSObject>>, std::__map_value_compare<TSUCellCoord, std::__value_type<TSUCellCoord, SFUtility::ObjcSharedPtr<NSObject>>, std::less<TSUCellCoord>, true>, std::allocator<std::__value_type<TSUCellCoord, SFUtility::ObjcSharedPtr<NSObject>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<TSUCellCoord, SFUtility::ObjcSharedPtr<NSObject>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<TSUCellCoord, std::__value_type<TSUCellCoord, SFUtility::ObjcSharedPtr<NSObject>>, std::less<TSUCellCoord>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<TSUCellCoord, std::less<TSUCellCoord>, std::allocator<TSUCellCoord>> {
    struct __tree<TSUCellCoord, std::less<TSUCellCoord>, std::allocator<TSUCellCoord>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<TSUCellCoord, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<TSUCellCoord>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_set<TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<TSUCellCoord>> {
    struct __hash_table<TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<TSUCellCoord>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *>*>, std::allocator<std::__hash_node<TSUCellCoord, void *>>> {
            struct __hash_node_base<std::__hash_node<TSUCellCoord, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<TSUCellCoord>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<TSUCellCoord>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<TNChartFormulaType, std::allocator<TNChartFormulaType>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<TNChartFormulaType *, std::allocator<TNChartFormulaType>> {
        unsigned long long *_field1;
    } _field3;
};

struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> {
        id *_field1;
    } _field3;
};

struct vector<TSCERangeCoordinate, std::allocator<TSCERangeCoordinate>> {
    struct TSCERangeCoordinate *__begin_;
    struct TSCERangeCoordinate *__end_;
    struct __compressed_pair<TSCERangeCoordinate *, std::allocator<TSCERangeCoordinate>> {
        struct TSCERangeCoordinate *__value_;
    } __end_cap_;
};

struct vector<TSCERangeRef, std::allocator<TSCERangeRef>> {
    struct TSCERangeRef *_field1;
    struct TSCERangeRef *_field2;
    struct __compressed_pair<TSCERangeRef *, std::allocator<TSCERangeRef>> {
        struct TSCERangeRef *_field1;
    } _field3;
};

struct vector<TSUCellCoord, std::allocator<TSUCellCoord>> {
    struct TSUCellCoord *__begin_;
    struct TSUCellCoord *__end_;
    struct __compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>> {
        struct TSUCellCoord *__value_;
    } __end_cap_;
};

struct vector<std::pair<TSCEValue, TSUCellCoord>, std::allocator<std::pair<TSCEValue, TSUCellCoord>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<TSCEValue, TSUCellCoord>*, std::allocator<std::pair<TSCEValue, TSUCellCoord>>> {
        void *_field1;
    } _field3;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
} CDStruct_c0454aff;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    struct TSUCellCoord topLeft;
    struct TSUCellCoord bottomRight;
} CDStruct_39acd760;

// Template types
typedef struct set<TSUCellCoord, std::less<TSUCellCoord>, std::allocator<TSUCellCoord>> {
    struct __tree<TSUCellCoord, std::less<TSUCellCoord>, std::allocator<TSUCellCoord>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<TSUCellCoord, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<TSUCellCoord>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} set_c723b88d;

typedef struct vector<TNChartFormulaType, std::allocator<TNChartFormulaType>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<TNChartFormulaType *, std::allocator<TNChartFormulaType>> {
        unsigned long long *_field1;
    } _field3;
} vector_e593cd82;

typedef struct vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>> {
        id *_field1;
    } _field3;
} vector_0812e05b;

typedef struct vector<TSCERangeRef, std::allocator<TSCERangeRef>> {
    struct TSCERangeRef *_field1;
    struct TSCERangeRef *_field2;
    struct __compressed_pair<TSCERangeRef *, std::allocator<TSCERangeRef>> {
        struct TSCERangeRef *_field1;
    } _field3;
} vector_6746e8cd;

typedef struct vector<std::pair<TSCEValue, TSUCellCoord>, std::allocator<std::pair<TSCEValue, TSUCellCoord>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<TSCEValue, TSUCellCoord>*, std::allocator<std::pair<TSCEValue, TSUCellCoord>>> {
        void *_field1;
    } _field3;
} vector_85027ebd;

typedef struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
} vector_2056c7c2;

