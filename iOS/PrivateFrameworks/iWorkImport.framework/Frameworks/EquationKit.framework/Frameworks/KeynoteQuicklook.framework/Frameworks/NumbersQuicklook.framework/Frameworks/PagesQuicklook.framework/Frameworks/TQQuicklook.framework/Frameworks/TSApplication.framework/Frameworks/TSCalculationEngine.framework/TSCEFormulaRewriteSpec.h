//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSMutableArray, TSCECoordMapper, TSCEFormulaRewriteInfo_RowColumnInfo, TSCEFormulaRewrite_MergeOriginMovedInfo, TSCEFormulaRewrite_RegionMergedInfo, TSCEFormulaRewrite_RegionMovedInfo, TSCEFormulasForUndo, TSCEGroupByChange, TSCERewriteGroupNodeUIDInfo, TSCERewriteTableUIDInfo, TSCETableTransposedInfo, TSKShuffleMapping;

@interface TSCEFormulaRewriteSpec : NSObject
{
    unsigned int _rewriteType;
    struct TSKUIDStruct _tableUID;
    struct TSKUIDStruct _conditionalStyleOwnerUID;
    struct TSKUIDStruct _groupByUid;
    struct TSUCellRect _tableRange;
    _Bool _isInverse;
    _Bool _canBeNested;
    _Bool _willModifyWasCalled;
    _Bool _didModifyWasCalled;
    TSCETableTransposedInfo *_transposedInfo;
    TSCEFormulaRewriteInfo_RowColumnInfo *_rowColumnInfo;
    TSCEFormulaRewrite_RegionMovedInfo *_regionMovedInfo;
    TSCEFormulaRewrite_RegionMergedInfo *_mergeInfo;
    TSCEFormulaRewrite_MergeOriginMovedInfo *_mergeOriginMovedInfo;
    TSKShuffleMapping *_shuffleMap;
    TSCERewriteTableUIDInfo *_tableUIDInfo;
    TSCERewriteGroupNodeUIDInfo *_groupNodeUIDInfo;
    TSCEGroupByChange *_groupByChange;
    TSCEFormulasForUndo *_formulasForUndo;
    id _warningSetsForUndo;
    struct unordered_map<TSCECellRef, TSTConditionalStyleSet *, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSTConditionalStyleSet *>>> _conditionalStylesForUndo;
    NSMutableArray *_nestedRewrites;
    struct unordered_map<TSCECellRef, TSUCellRect, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSUCellRect>>> _mergeRangesContainingFormulas;
    struct os_unfair_lock_s _coordMappersLock;
    struct unordered_map<TSKUIDStruct, TSCECoordMapper *, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECoordMapper *>>> _coordMappersByTableUID;
    TSCEFormulaRewriteSpec *_rewriteSpecBaseToChrome;
    TSCEFormulaRewriteSpec *_rewriteSpecChromeToBase;
    TSCECoordMapper *_coordMapper;
    TSCECoordMapper *_srcCoordMapper;
    struct TSKUIDStruct _fromTableUID;
    struct TSKUIDStruct _groupByUID;
}

+ (_Bool)rewriteTypeUsesAmendRewriteSpec:(unsigned int)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(retain, nonatomic) TSCECoordMapper *srcCoordMapper; // @synthesize srcCoordMapper=_srcCoordMapper;
@property(retain, nonatomic) TSCECoordMapper *coordMapper; // @synthesize coordMapper=_coordMapper;
@property(nonatomic) _Bool canBeNested; // @synthesize canBeNested=_canBeNested;
@property(retain, nonatomic) id warningSetsForUndo; // @synthesize warningSetsForUndo=_warningSetsForUndo;
@property(retain, nonatomic) TSCEFormulasForUndo *formulasForUndo; // @synthesize formulasForUndo=_formulasForUndo;
@property(retain, nonatomic) TSKShuffleMapping *shuffleMap; // @synthesize shuffleMap=_shuffleMap;
@property(retain, nonatomic) TSCEGroupByChange *groupByChange; // @synthesize groupByChange=_groupByChange;
@property(retain, nonatomic) TSCERewriteGroupNodeUIDInfo *groupNodeUIDInfo; // @synthesize groupNodeUIDInfo=_groupNodeUIDInfo;
@property(retain, nonatomic) TSCERewriteTableUIDInfo *tableUIDInfo; // @synthesize tableUIDInfo=_tableUIDInfo;
@property(retain, nonatomic) TSCEFormulaRewrite_MergeOriginMovedInfo *mergeOriginMovedInfo; // @synthesize mergeOriginMovedInfo=_mergeOriginMovedInfo;
@property(retain, nonatomic) TSCEFormulaRewrite_RegionMergedInfo *mergeInfo; // @synthesize mergeInfo=_mergeInfo;
@property(retain, nonatomic) TSCEFormulaRewrite_RegionMovedInfo *regionMovedInfo; // @synthesize regionMovedInfo=_regionMovedInfo;
@property(retain, nonatomic) TSCEFormulaRewriteInfo_RowColumnInfo *rowColumnInfo; // @synthesize rowColumnInfo=_rowColumnInfo;
@property(retain, nonatomic) TSCETableTransposedInfo *transposedInfo; // @synthesize transposedInfo=_transposedInfo;
@property(retain, nonatomic) TSCEFormulaRewriteSpec *rewriteSpecChromeToBase; // @synthesize rewriteSpecChromeToBase=_rewriteSpecChromeToBase;
@property(retain, nonatomic) TSCEFormulaRewriteSpec *rewriteSpecBaseToChrome; // @synthesize rewriteSpecBaseToChrome=_rewriteSpecBaseToChrome;
@property(nonatomic) struct TSKUIDStruct groupByUID; // @synthesize groupByUID=_groupByUID;
@property(nonatomic) struct TSKUIDStruct conditionalStyleOwnerUID; // @synthesize conditionalStyleOwnerUID=_conditionalStyleOwnerUID;
@property(nonatomic) struct TSKUIDStruct fromTableUID; // @synthesize fromTableUID=_fromTableUID;
@property(nonatomic) struct TSKUIDStruct tableUID; // @synthesize tableUID=_tableUID;
@property(readonly, nonatomic) _Bool didModifyWasCalled; // @synthesize didModifyWasCalled=_didModifyWasCalled;
@property(readonly, nonatomic) _Bool willModifyWasCalled; // @synthesize willModifyWasCalled=_willModifyWasCalled;
@property(nonatomic) _Bool isInverse; // @synthesize isInverse=_isInverse;
@property(readonly, nonatomic) unsigned int rewriteType; // @synthesize rewriteType=_rewriteType;
- (TSKUIDStructVectorTemplate_de88e035)expandedRowColumnUuids;
- (struct TSCERangeCoordinate)affectedRange;
- (void)clearTableIndexes;
- (void)didModifyTable:(id)arg1 calcEngine:(id)arg2;
- (void)didModifyTable:(id)arg1;
- (void)didModifySrcTable:(id)arg1 dstTable:(id)arg2;
- (void)willModifySrcTable:(id)arg1 srcUidResolver:(id)arg2 dstTable:(id)arg3 dstUidResolver:(id)arg4;
- (id)amendRewriteWithCalcEngine:(id)arg1;
- (id)prepareToRewriteWithCalcEngine:(id)arg1;
- (id)nestedRewrites;
- (void)addNestedRewrite:(id)arg1;
- (void)willModifyTable:(id)arg1 uidResolver:(id)arg2 calcEngine:(id)arg3;
- (id)restoreViewTractRefFromUndoTractList:(id)arg1 calcEngine:(id)arg2 containingCellRef:(const struct TSCECellRef *)arg3;
- (_Bool)adjustViewTractRef:(id)arg1 calcEngine:(id)arg2 containingCellRef:(const struct TSCECellRef *)arg3 undoTractList:(id *)arg4;
- (void)loadMergeRangesContainingFormulasInTable:(id)arg1 calcEngine:(id)arg2;
- (struct TSUCellRect)mergeRangeAtOriginalCellRef:(const struct TSCECellRef *)arg1;
- (struct TSCECellRef)flattenedCellRefForCategoryRef:(id)arg1 calcEngine:(id)arg2;
- (struct TSCECellRef)originalCellRefForUpdatedCellRef:(const struct TSCECellRef *)arg1;
- (struct TSCECellRef)updatedCellRefForOriginalCellRef:(const struct TSCECellRef *)arg1;
- (struct TSUCellRect)tableRangeForTable:(const struct TSKUIDStruct *)arg1 calcEngine:(id)arg2;
- (_Bool)isForTable:(const struct TSKUIDStruct *)arg1;
- (struct TSKUIDStruct)affectedConditionalStyleOwnerUID;
- (unordered_set_f120dcbf)affectedOwnerUIDs;
- (struct TSKUIDStruct)affectedOwnerUID;
- (id)description;
- (id)miniDescription;
- (void)addCoordMapper:(id)arg1;
- (id)coordMapperForTableUID:(const struct TSKUIDStruct *)arg1 calcEngine:(id)arg2;
- (void *)conditionalStylesForUndo;
@property(nonatomic) struct TSKUIDStruct insertOppositeUid;
@property(nonatomic) struct TSKUIDStruct insertAtUid;
- (id)initWithRewriteType:(unsigned int)arg1;

@end

