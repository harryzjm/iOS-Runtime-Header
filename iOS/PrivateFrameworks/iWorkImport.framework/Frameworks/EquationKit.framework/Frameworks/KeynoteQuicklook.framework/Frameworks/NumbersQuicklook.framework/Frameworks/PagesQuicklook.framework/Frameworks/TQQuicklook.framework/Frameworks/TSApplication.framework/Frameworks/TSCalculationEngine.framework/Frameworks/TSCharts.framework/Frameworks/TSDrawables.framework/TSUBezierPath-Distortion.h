//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TSUtility/TSUBezierPath.h>

@class NSArray, NSString;

@interface TSUBezierPath (Distortion)
+ (id)tracedPathForInstantAlphaBinaryBitmap:(id)arg1 pointSpacing:(double)arg2;
+ (id)tracedPathForImage:(struct CGImage *)arg1 alphaThreshold:(double)arg2 pointSpacing:(double)arg3;
+ (CDStruct_46b2202e)lineEndPositioningOnPath:(id)arg1 atHead:(_Bool)arg2 headPoint:(struct CGPoint)arg3 tailPoint:(struct CGPoint)arg4 headLineEnd:(id)arg5 tailLineEnd:(id)arg6 stroke:(id)arg7;
+ (id)createClippedPath:(id)arg1 headPositioning:(CDStruct_46b2202e)arg2 tailPositioning:(CDStruct_46b2202e)arg3 stroke:(id)arg4;
+ (CDStruct_46b2202e)makeDefaultPositioning;
+ (struct CGPoint)p_findPointWithGreatestSlopeFromStartPoint:(struct CGPoint)arg1 toPointA:(struct CGPoint)arg2 orPointB:(struct CGPoint)arg3;
+ (id)bezierPathWithConvexHullOfPoints:(struct CGPoint *)arg1 count:(unsigned long long)arg2;
+ (id)p_normalizeSubpaths:(id)arg1;
+ (id)p_mergeIntersectingSubpaths:(id)arg1 stopAfterFoundTwo:(_Bool)arg2;
+ (id)smoothBezierPath:(id)arg1 withThreshold:(double)arg2;
+ (id)exteriorOfBezierPath:(id)arg1;
+ (id)outsideEdgeOfBezierPath:(id)arg1;
+ (id)appendBezierPaths:(id)arg1;
+ (id)excludeBezierPaths:(id)arg1;
+ (id)p_subtractBezierPaths:(id)arg1 usingGPC:(_Bool)arg2;
+ (id)subtractPolygonalBezierPaths:(id)arg1;
+ (id)subtractBezierPaths:(id)arg1;
+ (id)p_intersectBezierPaths:(id)arg1 usingGPC:(_Bool)arg2;
+ (id)intersectBezierPaths:(id)arg1;
+ (id)p_uniteBezierPaths:(id)arg1 usingGPC:(_Bool)arg2;
+ (id)unitePolygonalBezierPaths:(id)arg1;
+ (id)uniteBezierPaths:(id)arg1;
+ (id)p_usingGPCBooleanBezierPaths:(id)arg1 operation:(int)arg2;
+ (_Bool)p_allPathsAreFlat:(id)arg1;
+ (id)p_usingLivarotStrokeBezierPath:(id)arg1 withThreshold:(double)arg2;
+ (id)p_usingLivarotBooleanBezierPaths:(id)arg1 operation:(int)arg2;
+ (struct CGRect)p_pathToBounds:(Path_1b135553 *)arg1;
+ (id)p_pathToBezier:(Path_1b135553 *)arg1;
+ (Path_1b135553 *)p_bezierToPath:(id)arg1;
- (id)chisel;
- (void)recursiveSubdivideOntoPath:(id)arg1 withScaling:(CDStruct_c3b9c2ee)arg2 inElementRange:(struct _NSRange)arg3 into:(id)arg4;
- (void)recursiveSubdivideOntoPath:(id)arg1 withScaling:(CDStruct_c3b9c2ee)arg2 into:(id)arg3;
- (void)recursiveSubdivideOntoPath:(id)arg1 into:(id)arg2;
- (double)curvatureAt:(double)arg1 fromElement:(long long)arg2;
- (double)curvatureAt:(double)arg1;
- (struct CGPoint)myGradientAt:(double)arg1 fromElement:(long long)arg2;
- (struct CGPoint)myGradientAt:(double)arg1;
- (struct CGPoint)rawGradientAt:(double)arg1 fromElement:(long long)arg2;
- (double)elementPercentageFromElement:(long long)arg1 forOverallPercentage:(double)arg2;
- (struct CGPoint)transformedTotalCoordinate:(struct CGPoint)arg1 betweenElement:(long long)arg2 andElement:(long long)arg3 withPressure:(id)arg4 getElement:(long long *)arg5 getPercentage:(double *)arg6;
- (struct CGPoint)transformedTotalCoordinate:(struct CGPoint)arg1 inElement:(long long)arg2 withPressure:(id)arg3;
- (struct CGPoint)transformedCoordinate:(struct CGPoint)arg1 withPressure:(id)arg2;
- (struct CGPoint)gradientAt:(double)arg1;
- (struct CGPoint)gradientAt:(double)arg1 fromElement:(long long)arg2;
- (struct CGPoint)pointAt:(double)arg1;
- (struct CGPoint)pointAt:(double)arg1 fromElement:(long long)arg2;
- (long long)elementPercentage:(double *)arg1 forOverallPercentage:(double)arg2 startingElementIndex:(long long)arg3 lengthToStartingElement:(double)arg4;
- (long long)elementPercentage:(double *)arg1 forOverallPercentage:(double)arg2;
- (struct CGPoint)nearestAngleOnPathToLine:(struct CGPoint [2])arg1;
- (struct CGPoint)nearestPointOnPathToLine:(struct CGPoint [2])arg1;
- (id)copyFromSegment:(int)arg1 t:(double)arg2 toSegment:(int)arg3 t:(double)arg4;
- (void)appendBezierPath:(id)arg1 fromSegment:(long long)arg2 t:(double)arg3 toSegment:(long long)arg4 t:(double)arg5 withoutMove:(_Bool)arg6;
- (void)appendBezierPath:(id)arg1 fromSegment:(long long)arg2 toSegment:(long long)arg3;
- (void)addIntersectionsWithLine:(struct CGPoint [2])arg1 to:(id)arg2;
- (void)addIntersectionsWithPath:(id)arg1 to:(id)arg2;
- (void)addIntersectionsWithPath:(id)arg1 to:(id)arg2 allIntersections:(_Bool)arg3 reversed:(_Bool)arg4;
- (void)getStartPoint:(struct CGPoint *)arg1 andEndPoint:(struct CGPoint *)arg2;
- (void)saveToArchive:(Path_a116956f *)arg1;
- (id)initWithArchive:(const Path_a116956f *)arg1;
@property(readonly, nonatomic) NSString *inferredAccessibilityDescription;
@property(readonly, nonatomic) double flattenedArea;
- (id)copyWithPointsInRange:(struct _NSRange)arg1;
- (id)p_copyWithPointsInRange:(struct _NSRange)arg1 countingSubpaths:(unsigned long long *)arg2;
- (void)appendPointsInRange:(struct _NSRange)arg1 fromBezierPath:(id)arg2;
- (id)aliasedPathWithViewScale:(float)arg1 effectiveStrokeWidth:(float)arg2;
- (id)aliasedPathInContext:(struct CGContext *)arg1 effectiveStrokeWidth:(float)arg2;
- (id)p_aliasedPathInContext:(struct CGContext *)arg1 viewScale:(float)arg2 effectiveStrokeWidth:(float)arg3;
- (struct CGPoint)roundPoint:(struct CGPoint)arg1 inContext:(struct CGContext *)arg2 strokeWidth:(int)arg3;
- (void)addPathToContext:(struct CGContext *)arg1;
- (_Bool)intersectsRect:(struct CGRect)arg1 hasFill:(_Bool)arg2;
@property(readonly, nonatomic) _Bool isLineSegment;
@property(readonly, nonatomic) _Bool isOpen;
- (id)pathByWobblingByUpTo:(double)arg1 subdivisions:(unsigned long long)arg2;
- (void)clearStroke:(struct CGContext *)arg1;
- (id)intersectBezierPath:(id)arg1;
- (id)subtractPolygonalBezierPath:(id)arg1;
- (id)subtractBezierPath:(id)arg1;
- (id)uniteWithPolygonalBezierPath:(id)arg1;
- (id)uniteWithBezierPath:(id)arg1;
- (id)p_strokedPathByUsingCG;
- (id)p_strokedCopyAttemptingUsingLivarotFirst:(_Bool)arg1 livarotOverrideThresholds:(id)arg2;
- (id)strokedCopyAttemptingUsingLivarotFirst;
- (id)strokedCopy;
- (id)p_bezierPathByOffsettingPath:(double)arg1 joinStyle:(unsigned long long)arg2 attemptWithLivarotFirst:(_Bool)arg3 livarotOverrideThresholds:(id)arg4;
- (id)bezierPathByOffsettingPath:(double)arg1 joinStyle:(unsigned long long)arg2 attemptingUsingLivarotFirstWithThresholds:(id)arg3;
- (id)bezierPathByOffsettingPath:(double)arg1 joinStyle:(unsigned long long)arg2;
- (id)pathByNormalizingClosedPathToRemoveSelfIntersections;
- (id)p_elementCountForSubpaths;
- (id)pathSplitAtSubpathBoundariesWithSoftElementLimit:(unsigned long long)arg1 hardElementLimit:(unsigned long long)arg2;
- (id)arrayOfSubpathsWithEffectivelyEmptySubpathsRemoved:(_Bool)arg1;
@property(readonly, nonatomic) unsigned long long totalSubpathCountIncludingEffectivelyEmptySubpaths;
@property(readonly, nonatomic) NSArray *visuallyDistinctSubregions;
@property(readonly, nonatomic) _Bool hasAtLeastTwoVisuallyDistinctSubregions;
@property(readonly, nonatomic) _Bool containsElementsOtherThanMoveAndClose;
@property(readonly, nonatomic) _Bool isEffectivelyClosed;
- (void)iterateOverPathWithPointDistancePerIteration:(double)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (struct CGPoint)pointAlongPathAtPercentage:(double)arg1;
- (struct CGPoint)pointAlongPathAtPercentage:(double)arg1 withFlattenedPath:(id)arg2 andLength:(double *)arg3 atStartIndex:(unsigned long long *)arg4;
- (double)distanceToPoint:(struct CGPoint)arg1 elementIndex:(unsigned long long *)arg2 tValue:(double *)arg3 threshold:(double)arg4 findClosestMatch:(_Bool)arg5;
- (struct CGRect)boundsIncludingTSDStroke:(id)arg1;
- (struct CGRect)boundsIncludingStroke;
- (struct CGRect)boundsIncludingStrokeWidth:(double)arg1 joinStyle:(unsigned long long)arg2 capStyle:(unsigned long long)arg3 miterLimit:(double)arg4 needsToExtendJoins:(_Bool)arg5;
- (void)takeAttributesFromStroke:(id)arg1;
@property(readonly, nonatomic) _Bool isCompound;
- (void)alignBoundsToOrigin;
- (double)yValueFromXValue:(double)arg1;
- (id)pathByCreatingHoleInPathAtPoint:(struct CGPoint)arg1 withDiameter:(CDUnknownBlockType)arg2 andThreshold:(double)arg3 updatingPatternOffsetsBySubpath:(id)arg4;
- (id)pathBySplittingAtPointOnPath:(struct CGPoint)arg1 controlPointDistanceEqual:(_Bool)arg2;
- (id)p_pathBySplittingAtPointGuaranteedToBeOnPath:(struct CGPoint)arg1 controlPointDistanceEqual:(_Bool)arg2 elementIndex:(long long)arg3 parametricValue:(double)arg4;
- (double)yValueFromXValue:(double)arg1 elementIndex:(long long *)arg2 parametricValue:(double *)arg3;
- (id)bezierPathByFittingCurve:(id)arg1;
- (id)bezierPathByFittingCurve;
@end

