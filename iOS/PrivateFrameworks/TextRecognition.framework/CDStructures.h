//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CRTableStructureMerge;

struct CRTableStructureRecognizerInputFeatures {
    vector_fef9a72d _field1;
    vector_fef9a72d _field2;
    struct vImage_Buffer _field3;
};

struct CRTableStructureRecognizerResultParsed {
    unsigned long long _field1;
    unsigned long long _field2;
    _Bool _field3;
    vector_0e047154 _field4;
    vector_0e047154 _field5;
    struct vector<CRTableStructureMerge, std::allocator<CRTableStructureMerge>> _field6;
};

struct EspressoModelWrapper;

struct TextBoxesOffsets {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct unique_ptr<CoreRecognition::EspressoModelWrapper, std::default_delete<CoreRecognition::EspressoModelWrapper>> {
    struct __compressed_pair<CoreRecognition::EspressoModelWrapper *, std::default_delete<CoreRecognition::EspressoModelWrapper>> {
        struct EspressoModelWrapper *__value_;
    } __ptr_;
};

struct vImage_Buffer {
    void *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct vector<CRTableStructureMerge, std::allocator<CRTableStructureMerge>> {
    struct CRTableStructureMerge *_field1;
    struct CRTableStructureMerge *_field2;
    struct __compressed_pair<CRTableStructureMerge *, std::allocator<CRTableStructureMerge>> {
        struct CRTableStructureMerge *_field1;
    } _field3;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
};

struct vector<unsigned int, std::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    MISSING_TYPE *_field1[3];
} CDStruct_d80e62f2;

// Template types
typedef struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
} vector_0e047154;

typedef struct vector<float, std::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *_field1;
    } _field3;
} vector_fef9a72d;

typedef struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
} vector_cd3186ef;

typedef struct vector<unsigned int, std::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
} vector_32ba81c5;

typedef struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *_field1;
    } _field3;
} vector_6118216b;

