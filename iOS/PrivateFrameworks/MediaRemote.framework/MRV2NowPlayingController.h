//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MediaRemote/MREndpointObserver-Protocol.h>
#import <MediaRemote/MRNowPlayingControllerImpl-Protocol.h>

@class MRAVEndpointObserver, MRNowPlayingControllerConfiguration, MRNowPlayingControllerDestination, MRNowPlayingControllerHelper, MSVVariableIntervalTimer, NSMutableArray, NSString;
@protocol OS_dispatch_queue;

@interface MRV2NowPlayingController : NSObject <MREndpointObserver, MRNowPlayingControllerImpl>
{
    _Bool _registeredForNotifications;
    _Bool _registeredForEndpointChanges;
    _Bool _registeredForEndpointInvalidations;
    _Bool _registeredForPlayerPathInvalidations;
    _Bool _updateLoadingEnabled;
    _Bool _endpointChanged;
    _Bool _endpointInvalidated;
    _Bool _playerPathInvalidated;
    _Bool _beginLoadingInvalidated;
    _Bool _loading;
    _Bool _requestingQueue;
    int _incrementingRequestID;
    MRNowPlayingControllerHelper *helper;
    MRNowPlayingControllerDestination *_destination;
    MRNowPlayingControllerConfiguration *_configuration;
    id _playerPathInvalidationObserver;
    MRAVEndpointObserver *_endpointObserver;
    NSMutableArray *_deferredContentItemsToMerge;
    MRNowPlayingControllerDestination *_pendingDestination;
    MSVVariableIntervalTimer *_loadRetryTimer;
    NSObject<OS_dispatch_queue> *_queue;
}

- (void).cxx_destruct;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(nonatomic) int incrementingRequestID; // @synthesize incrementingRequestID=_incrementingRequestID;
@property(retain, nonatomic) MSVVariableIntervalTimer *loadRetryTimer; // @synthesize loadRetryTimer=_loadRetryTimer;
@property(copy, nonatomic) MRNowPlayingControllerDestination *pendingDestination; // @synthesize pendingDestination=_pendingDestination;
@property(nonatomic) _Bool requestingQueue; // @synthesize requestingQueue=_requestingQueue;
@property(nonatomic, getter=isLoading) _Bool loading; // @synthesize loading=_loading;
@property(nonatomic) _Bool beginLoadingInvalidated; // @synthesize beginLoadingInvalidated=_beginLoadingInvalidated;
@property(nonatomic) _Bool playerPathInvalidated; // @synthesize playerPathInvalidated=_playerPathInvalidated;
@property(nonatomic) _Bool endpointInvalidated; // @synthesize endpointInvalidated=_endpointInvalidated;
@property(nonatomic) _Bool endpointChanged; // @synthesize endpointChanged=_endpointChanged;
@property(nonatomic) _Bool updateLoadingEnabled; // @synthesize updateLoadingEnabled=_updateLoadingEnabled;
@property(nonatomic) _Bool registeredForPlayerPathInvalidations; // @synthesize registeredForPlayerPathInvalidations=_registeredForPlayerPathInvalidations;
@property(nonatomic) _Bool registeredForEndpointInvalidations; // @synthesize registeredForEndpointInvalidations=_registeredForEndpointInvalidations;
@property(nonatomic) _Bool registeredForEndpointChanges; // @synthesize registeredForEndpointChanges=_registeredForEndpointChanges;
@property(nonatomic) _Bool registeredForNotifications; // @synthesize registeredForNotifications=_registeredForNotifications;
@property(retain, nonatomic) NSMutableArray *deferredContentItemsToMerge; // @synthesize deferredContentItemsToMerge=_deferredContentItemsToMerge;
@property(retain, nonatomic) MRAVEndpointObserver *endpointObserver; // @synthesize endpointObserver=_endpointObserver;
@property(retain, nonatomic) id playerPathInvalidationObserver; // @synthesize playerPathInvalidationObserver=_playerPathInvalidationObserver;
@property(copy, nonatomic) MRNowPlayingControllerConfiguration *configuration; // @synthesize configuration=_configuration;
@property(copy, nonatomic) MRNowPlayingControllerDestination *destination; // @synthesize destination=_destination;
@property(retain, nonatomic) MRNowPlayingControllerHelper *helper; // @synthesize helper;
@property(readonly, nonatomic) _Bool needsImmediateReload;
@property(readonly, nonatomic) _Bool shouldObserveInvalidations;
- (void)setIsLoading:(_Bool)arg1;
@property(readonly, nonatomic) NSString *needsImmediateReloadReason;
- (void)_configureReloadTimerForError:(id)arg1;
- (void)_handleRetryTimerElapsed;
- (void)_handlePlayerPathInvalidatedWithPlayerPath:(id)arg1;
- (void)_handleEndpointInvalidated;
- (void)_handleEndpointChangedToEndpoint:(id)arg1;
- (void)_handleEndpointChanged;
- (void)_unregisterNotificationHandlers;
- (void)_registerNotificationHandlersForResolvedPlayerPath:(id)arg1;
- (void)_unregisterForPlayerPathInvalidations;
- (void)_registerForPlayerPathInvalidationsForUnresolvedPlayerPath:(id)arg1;
- (void)_unregisterForEndpointInvalidations;
- (void)_registerForEndpointInvalidations:(id)arg1;
- (void)_unregisterForEndpointChanges;
- (void)_registerForEndpointChangesForOutputDeviceUID:(id)arg1;
- (void)endpointDidDisconnect:(id)arg1;
- (void)_handleActiveSystemEndpointChangedNotification:(id)arg1;
- (void)_handleSupportedCommandsChangedNotification:(id)arg1;
- (void)_handlePlaybackStateChangedNotification:(id)arg1;
- (void)_requestPlaybackQueueArtworkForIdentifiers:(id)arg1;
- (void)_handlePlaybackQueueContentItemsArtworkChangedNotification:(id)arg1;
- (void)_handlePlaybackQueueContentItemsChangedNotification:(id)arg1;
- (void)_handlePlaybackQueueChangedNotification:(id)arg1;
- (void)_notifyDelegateOfError:(id)arg1;
- (void)_notifyDelegateOfInvalidation;
- (void)_notifyDelegateOfPlayerPathChange:(id)arg1;
- (void)_notifyDelegateOfUpdatedClientProperties:(id)arg1;
- (void)_notifyDelegateOfUpdatedPlayerLastPlayingDate:(id)arg1;
- (void)_notifyDelegateOfSupportedCommandsChange:(id)arg1;
- (void)_notifyDelegateOfUpdatedArtwork:(id)arg1;
- (void)_notifyDelegateOfUpdatedContentItemsWithContentItems:(id)arg1;
- (void)_notifyDelegateOfPlaybackQueueChange:(id)arg1;
- (void)_notifyDelegateOfPlaybackStateChange:(unsigned int)arg1;
- (void)_notifyDelegateOfNewResponse:(id)arg1;
- (void)onQueue_setResolvedPlayerPath:(id)arg1;
- (void)_onQueue_clearStateForResolvedPlayerPath;
- (void)_onQueue_clearStateForUnresolvedPlayerPath;
- (void)_onQueue_clearStateForEndpoint;
- (void)_onQueue_clearStateForOutputDeviceUID;
- (void)_onQueue_clearAllState;
- (void)_resolvePlayerPath:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_createUnresolvedPlayerPathForEndpoint:(id)arg1 client:(id)arg2 player:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_onQueue_retrieveEndpointForUID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_requestClientPropertiesForPlayerPath:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_requestPlayerLastPlayingDateForPlayerPath:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_requestSupportedCommandsForPlayerPath:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_requestContentItemArtwork:(id)arg1 forPlayerPath:(id)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_requestPlaybackQueueForPlayerPath:(id)arg1 request:(id)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)_loadNowPlayingStateForPlayerPath:(id)arg1 error:(id *)arg2;
- (void)_loadNowPlayingStateForResolvedPlayerPath:(id)arg1 requestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_resolveForUnresolvedPlayerPath:(id)arg1 requestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_resolveForEndpoint:(id)arg1 client:(id)arg2 player:(id)arg3 requestID:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)_resolveForOutputDeviceUID:(id)arg1 client:(id)arg2 player:(id)arg3 requestID:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)_resolveForConfiguration:(id)arg1 requestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_loadNowPlayingStateForConfiguration:(id)arg1 requestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_reloadWithReason:(id)arg1;
@property(readonly, copy) NSString *debugDescription;
- (void)destinationWithCompletion:(CDUnknownBlockType)arg1;
- (void)endLoadingUpdates;
- (void)beginLoadingUpdates;
- (void)dealloc;
- (id)initWithConfiguration:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

