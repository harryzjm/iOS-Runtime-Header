//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <FrontBoard/FBProcessBootstrapping-Protocol.h>
#import <FrontBoard/FBSProcess-Protocol.h>
#import <FrontBoard/FBSProcessInternal-Protocol.h>
#import <FrontBoard/RBSProcessMatching-Protocol.h>

@class BSAuditToken, BSMachPortTaskNameRight, BSProcessHandle, FBProcessCPUStatistics, FBProcessExecutionContext, FBProcessExitContext, FBProcessState, FBProcessWatchdog, FBProcessWatchdogEventContext, FBSApplicationInfo, FBSProcessExecutionProvision, FBSProcessTerminationRequest, FBSProcessWatchdogPolicy, FBWorkspace, NSError, NSMutableArray, NSMutableSet, NSString, RBSAssertion, RBSProcessHandle, RBSProcessIdentity, RBSProcessState, RBSTarget;
@protocol BSInvalidatable, FBProcessDelegate;

@interface FBProcess : NSObject <FBProcessBootstrapping, FBSProcessInternal, RBSProcessMatching, FBSProcess>
{
    int _pid;
    long long _versionedPID;
    RBSProcessIdentity *_identity;
    BSProcessHandle *_handle;
    RBSProcessHandle *_rbsHandle;
    NSString *_bundleIdentifier;
    NSString *_executablePath;
    BSAuditToken *_auditToken;
    FBWorkspace *_workspace;
    FBProcessExecutionContext *_executionContext;
    struct os_unfair_recursive_lock_s _lock;
    struct os_unfair_lock_s _observerLock;
    struct os_unfair_lock_s _bootstrapLock;
    NSString *_description;
    NSError *_bootstrapError;
    NSMutableSet *_observerLock_observers;
    id <BSInvalidatable> _lock_workspaceAssertion;
    RBSAssertion *_lock_launchAssertion;
    RBSAssertion *_lock_continuousAssertion;
    RBSAssertion *_lock_gracefulExitAssertion;
    NSMutableArray *_lock_launchCompletionBlocks;
    FBSApplicationInfo *_lock_applicationInfo;
    FBProcessState *_lock_state;
    RBSProcessState *_lock_rbsState;
    unsigned char _lock_sceneState;
    FBProcessCPUStatistics *_lock_watchdogCPUStatistics;
    FBSProcessTerminationRequest *_lock_terminationRequest;
    FBProcessWatchdogEventContext *_lock_terminationWatchdogContext;
    long long _terminationReason;
    NSMutableArray *_lock_terminateRequestCompletionBlocks;
    FBProcessWatchdog *_lock_watchdog;
    FBSProcessWatchdogPolicy *_sceneCreateWatchdogPolicy;
    FBSProcessExecutionProvision *_lock_latestViolatedProvision;
    _Bool _lock_pendingExit;
    _Bool _lock_invalidated;
    _Bool _lock_attemptedBootstrap;
    _Bool _lock_waitForDebugger;
    _Bool _lock_updatingState;
    _Bool _lock_didExit;
    _Bool _lock_launchFinalized;
    _Bool _lock_launchSuccess;
    _Bool _lock_submittedLaunchRequest;
    long long _lock_executableLivesOnSystemPartition;
    long long _lock_platformBinary;
    long long _lock_backgroundingPolicy;
    _Bool _calloutQueue_sentDidExit;
    _Bool _calloutQueue_sentAppWillLaunch;
    _Bool _calloutQueue_sentAppDidLaunch;
    id <FBProcessDelegate> _lock_delegate;
    FBProcessExitContext *_lock_exitContext;
    double _execTime;
    RBSTarget *_target;
}

+ (id)calloutQueue;
- (void).cxx_destruct;
@property(readonly, nonatomic) long long versionedPID; // @synthesize versionedPID=_versionedPID;
@property(readonly, nonatomic) FBWorkspace *workspace; // @synthesize workspace=_workspace;
@property(readonly, nonatomic) RBSProcessIdentity *identity; // @synthesize identity=_identity;
@property(readonly, nonatomic) BSProcessHandle *handle; // @synthesize handle=_handle;
@property(readonly, nonatomic) BSAuditToken *auditToken; // @synthesize auditToken=_auditToken;
@property(readonly, nonatomic) RBSProcessHandle *rbsHandle; // @synthesize rbsHandle=_rbsHandle;
@property(readonly, nonatomic) RBSTarget *target; // @synthesize target=_target;
@property(readonly, nonatomic) double execTime; // @synthesize execTime=_execTime;
@property(readonly, copy, nonatomic) NSString *executablePath; // @synthesize executablePath=_executablePath;
@property(readonly, copy, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(readonly, copy, nonatomic) FBProcessExecutionContext *executionContext; // @synthesize executionContext=_executionContext;
@property(readonly, nonatomic) int pid; // @synthesize pid=_pid;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)succinctDescriptionBuilder;
- (id)succinctDescription;
- (id)processPredicate;
- (_Bool)matchesProcess:(id)arg1;
- (_Bool)_watchdog:(id)arg1 shouldTerminateWithDeclineReason:(out id *)arg2;
- (id)_watchdog:(id)arg1 terminationRequestForViolatedProvision:(id)arg2 error:(id)arg3;
- (void)_watchdogStopped:(id)arg1;
- (void)_watchdogStarted:(id)arg1;
- (void)_terminateWithRequest:(id)arg1 forWatchdog:(id)arg2;
@property(readonly, retain, nonatomic) BSMachPortTaskNameRight *taskNameRight;
- (void)_lock_consumeLock_performGracefulKill;
- (void)_lock_consumeLock_executeTerminationRequest;
- (void)_killForReason:(long long)arg1 andReport:(_Bool)arg2 withDescription:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_terminateWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (long long)_watchdogReportType;
- (_Bool)_shouldWatchdogWithDeclineReason:(id *)arg1;
- (_Bool)_startWatchdogTimerForContext:(id)arg1;
- (id)_newWatchdogForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_launchDidComplete:(_Bool)arg1;
- (void)_noteProcessDidExit:(id)arg1;
- (void)_noteLaunchDidComplete;
- (void)_bootstrapDidComplete;
- (id)_createBootstrapContext;
- (void)_finishInit;
- (void)_rebuildState:(id)arg1;
- (void)_rebuildState;
- (void)_processDidExitWithContext:(id)arg1;
- (id)_observers;
- (id)_watchdogProvider;
- (void)_noteStateDidUpdate:(id)arg1;
- (_Bool)_wantsStateUpdates;
- (void)_setSceneLifecycleState:(unsigned char)arg1;
- (void)_configureIntrinsicsFromHandle:(id)arg1;
- (void)_bootstrapAndExec;
- (void)_updateStateWithBlock:(CDUnknownBlockType)arg1;
- (void)_notePendingExitForReason:(id)arg1;
- (void)_executeBlockAfterLaunchCompletes:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic, getter=isPlatformBinary) _Bool platformBinary;
@property(readonly, nonatomic) _Bool executableLivesOnSystemPartition;
@property(readonly, nonatomic) __weak id <FBProcessDelegate> delegate; // @synthesize delegate=_lock_delegate;
- (long long)visibility;
- (long long)taskState;
- (void)invalidate;
- (void)noteProcessPublished;
- (void)bootstrapWithDelegate:(id)arg1;
- (void)bootstrapLock:(CDUnknownBlockType)arg1;
- (id)valueForEntitlement:(id)arg1;
- (_Bool)hasEntitlement:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
@property(readonly, nonatomic) FBProcessExitContext *exitContext; // @synthesize exitContext=_lock_exitContext;
@property(readonly, nonatomic) FBSApplicationInfo *applicationInfo; // @synthesize applicationInfo=_lock_applicationInfo;
@property(readonly, copy, nonatomic) FBProcessState *state;
@property(readonly, nonatomic, getter=isPendingExit) _Bool pendingExit;
@property(readonly, nonatomic, getter=isBeingDebugged) _Bool beingDebugged;
@property(readonly, nonatomic, getter=isRunning) _Bool running;
@property(readonly, nonatomic, getter=isForeground) _Bool foreground;
@property(readonly, nonatomic, getter=isFinishedLaunching) _Bool finishedLaunching;
- (_Bool)finishedLaunching;
@property(readonly, nonatomic, getter=isCurrentProcess) _Bool currentProcess;
@property(readonly, copy, nonatomic) NSString *name;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)_initWithHandle:(id)arg1 identity:(id)arg2 executionContext:(id)arg3;
- (id)initWithIdentity:(id)arg1 executionContext:(id)arg2;
- (id)initWithHandle:(id)arg1;
- (id)init;
- (_Bool)isExtensionProcess;
- (_Bool)isSystemApplicationProcess;
- (_Bool)isApplicationProcess;

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

