//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import "UIPopoverBackgroundView.h"

@class UIColor, UIView;

__attribute__((visibility("hidden")))
@interface _UIPopoverStandardChromeView : UIPopoverBackgroundView
{
    _Bool useShortMode;
    _Bool _debugMode;
    UIView *viewToMaskWhenContentExtendsOverArrow;
    unsigned long long _arrowDirection;
    double _arrowOffset;
    UIColor *_arrowBackgroundColor;
    UIColor *_popoverBackgroundColor;
    long long _backgroundStyle;
    UIColor *_contentBlendingColor;
}

+ (double)arrowHeight;
+ (struct UIEdgeInsets)contentViewInsets;
+ (Class)legacyChromeViewClass;
+ (Class)standardChromeViewClass;
- (void).cxx_destruct;
@property(readonly, nonatomic) UIColor *contentBlendingColor; // @synthesize contentBlendingColor=_contentBlendingColor;
@property(nonatomic) long long backgroundStyle; // @synthesize backgroundStyle=_backgroundStyle;
@property(copy, nonatomic) UIColor *popoverBackgroundColor; // @synthesize popoverBackgroundColor=_popoverBackgroundColor;
@property(copy, nonatomic) UIColor *arrowBackgroundColor; // @synthesize arrowBackgroundColor=_arrowBackgroundColor;
- (void)setArrowOffset:(double)arg1;
- (double)arrowOffset;
- (void)setArrowDirection:(unsigned long long)arg1;
- (unsigned long long)arrowDirection;
@property(nonatomic) __weak UIView *viewToMaskWhenContentExtendsOverArrow; // @synthesize viewToMaskWhenContentExtendsOverArrow;
@property(nonatomic, getter=isDebugModeEnabled) _Bool debugModeEnabled; // @synthesize debugModeEnabled=_debugMode;
@property(nonatomic) _Bool useShortMode; // @synthesize useShortMode;
- (long long)_resolvedBackgroundStyle;
- (struct CGRect)_contentViewFrame;
- (struct UIEdgeInsets)safeAreaInsetsForContentView;
- (_Bool)_shouldUseEqualContentInsetsOnAllSides;
- (void)setBackgroundStyle:(long long)arg1 animated:(_Bool)arg2;
- (void)_updateArrowImages;
- (_Bool)isRightArrowPinnedToBottom;
- (_Bool)isRightArrowPinnedToTop;
- (double)maxNonPinnedOffset;
- (double)minNonPinnedOffset;
- (_Bool)usesImagesForShapeMasking;
- (_Bool)wouldPinForOffset:(double)arg1;
- (_Bool)isPinned;
- (id)initWithFrame:(struct CGRect)arg1;

@end

