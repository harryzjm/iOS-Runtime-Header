//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct MMap;

struct MREInstance {
    struct unique_ptr<shazam::MMap, std::__1::default_delete<shazam::MMap>> _field1;
    struct unique_ptr<Searcher, std::__1::default_delete<Searcher>> _field2;
};

struct Searcher;

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct error_category;

struct error_code {
    int _field1;
    struct error_category *_field2;
};

struct exception {
    CDUnknownFunctionPointerType *_field1;
};

struct system_error {
    CDUnknownFunctionPointerType *_field1;
    struct __libcpp_refstring {
        char *_field1;
    } _field2;
    struct error_code _field3;
};

struct unique_ptr<Searcher, std::__1::default_delete<Searcher>> {
    struct __compressed_pair<Searcher *, std::__1::default_delete<Searcher>> {
        struct Searcher *_field1;
    } _field1;
};

struct unique_ptr<shazam::MMap, std::__1::default_delete<shazam::MMap>> {
    struct __compressed_pair<shazam::MMap *, std::__1::default_delete<shazam::MMap>> {
        struct MMap *_field1;
    } _field1;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_7c0a1c0b;

