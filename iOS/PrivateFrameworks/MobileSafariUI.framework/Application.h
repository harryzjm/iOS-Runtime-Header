//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <UIKit/UIApplication.h>

#import <MobileSafariUI/BKSMousePointerDeviceObserver-Protocol.h>
#import <MobileSafariUI/MCProfileConnectionObserver-Protocol.h>
#import <MobileSafariUI/PageLoadTestRunnerDelegate-Protocol.h>
#import <MobileSafariUI/SFUIApplicationModifierFlagsProviding-Protocol.h>
#import <MobileSafariUI/SFWebExtensionsControllerDelegate-Protocol.h>
#import <MobileSafariUI/TabSnapshotCacheStressTestRunnerDelegate-Protocol.h>
#import <MobileSafariUI/UIApplicationDelegate-Protocol.h>
#import <MobileSafariUI/UIApplicationDelegatePrivate-Protocol.h>
#import <MobileSafariUI/WBDatabaseLockAcquisitorDelegate-Protocol.h>
#import <MobileSafariUI/_SFDownloadDelegate-Protocol.h>
#import <MobileSafariUI/_SFNavigationIntentHandling-Protocol.h>

@class AutomationController, BookmarksDatabaseHealthReporter, BrowserController, BrowserWindowController, ForYouRecommendationMediator, NSArray, NSMutableArray, NSMutableSet, NSString, ReadingListLeadImageCache, SBSAssertion, UIWindow, WBDatabaseLockAcquisitor, WBSAllowedLegacyTLSHostManager, WBSCyclerConnectionManager, WBSForYouRecentParsecResultsManager, WBSFormAutoFillCorrectionsHistoryObserver, WBSParsecABGroupManager, WBSPhishingClassifierController, WBSavedStateManager, WBTabGroupManager;
@protocol BSInvalidatable, WBSCloudHistoryServiceProtocol, WBSPhishingClassifier, WBStateProvider;

@interface Application : UIApplication <PageLoadTestRunnerDelegate, TabSnapshotCacheStressTestRunnerDelegate, MCProfileConnectionObserver, UIApplicationDelegatePrivate, WBDatabaseLockAcquisitorDelegate, SFUIApplicationModifierFlagsProviding, _SFDownloadDelegate, BKSMousePointerDeviceObserver, SFWebExtensionsControllerDelegate, UIApplicationDelegate, _SFNavigationIntentHandling>
{
    _Bool _isReadingDefaults;
    _Bool _shouldReadDefaultsOnResume;
    _Bool _isRunningShowBookmarksTest;
    _Bool _startedBookmarksTest;
    _Bool _isRunningCanvasTest;
    _Bool _willEnterSuspendedState;
    NSMutableSet *_pointerDevices;
    struct os_unfair_lock_s _pointerDeviceLock;
    id <BSInvalidatable> _pointerDeviceObserverToken;
    _Bool _finishedLaunching;
    id <WBSCloudHistoryServiceProtocol> _cloudHistory;
    _Bool _resigningActive;
    NSString *_openURLOriginBundleIdentifier;
    WBSFormAutoFillCorrectionsHistoryObserver *_formAutoFillCorrectionsHistoryObserver;
    BookmarksDatabaseHealthReporter *_bookmarksDatabaseHealthReporter;
    unsigned long long _bookmarksDatabaseBackgroundTaskIdentifier;
    WBDatabaseLockAcquisitor *_bookmarksDatabaseBackgroundTaskLockAcquisitor;
    SBSAssertion *_wallpaperSuspensionAssertion;
    WBSCyclerConnectionManager *_cyclerConnectionManager;
    ReadingListLeadImageCache *_readingListImageCache;
    NSMutableArray *_activeDownloads;
    ForYouRecommendationMediator *_forYouRecommendationMediator;
    WBSForYouRecentParsecResultsManager *_forYouRecentParsecResultsManager;
    WBSParsecABGroupManager *_abGroupManager;
    WBSPhishingClassifierController *_phishingClassifier;
    WBSAllowedLegacyTLSHostManager *_cachedLegacyTLSHostManager;
    id <WBStateProvider> _tabCollection;
    WBSavedStateManager *_savedStateManager;
    WBTabGroupManager *_tabGroupManager;
    WBTabGroupManager *_ephemeralTabGroupManager;
    AutomationController *_automationController;
    long long _currentKeyboardModifierFlags;
    BrowserWindowController *_browserWindowController;
    ForYouRecommendationMediator *_existingForYouRecommendationMediator;
}

+ (void)setBrowserControllerUIDelegateProvider:(CDUnknownBlockType)arg1;
+ (CDUnknownBlockType)browserControllerUIDelegateProvider;
+ (id)contextClient;
+ (unsigned long long)systemMemorySize;
+ (void)initialize;
+ (id)sharedApplication;
+ (id)sharedTestRunner;
+ (void)commandLineTestOption:(int)arg1 arg:(const char *)arg2;
+ (void)postTestNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
+ (void)postTestNotificationName:(id)arg1 object:(id)arg2;
- (void).cxx_destruct;
@property(nonatomic) __weak ForYouRecommendationMediator *existingForYouRecommendationMediator; // @synthesize existingForYouRecommendationMediator=_existingForYouRecommendationMediator;
@property(readonly, nonatomic) BrowserWindowController *browserWindowController; // @synthesize browserWindowController=_browserWindowController;
@property(readonly, nonatomic) long long currentKeyboardModifierFlags; // @synthesize currentKeyboardModifierFlags=_currentKeyboardModifierFlags;
- (void)mousePointerDevicesDidDisconnect:(id)arg1;
- (void)mousePointerDevicesDidConnect:(id)arg1;
@property(readonly, nonatomic) _Bool hasPointerDevice;
- (void)sfWebExtensionsControllerDidChangeExtensionForPermissionBanner:(id)arg1;
- (void)sfWebExtensionsControllerContentBlockerListDidChange:(id)arg1;
- (void)sfWebExtensionsControllerCompileContentBlocker:(id)arg1 identifier:(id)arg2 rules:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)sfWebExtensionsControllerLastFocusedWindow:(id)arg1;
- (id)sfWebExtensionsControllerAllWindows:(id)arg1;
- (id)sfWebExtensionsController:(id)arg1 navigationIntentUUIDForWindow:(id)arg2;
- (id)sfWebExtensionsController:(id)arg1 windowForWebView:(id)arg2 extension:(id)arg3;
- (id)sfWebExtensionsController:(id)arg1 windowWithID:(double)arg2;
- (void)sfWebExtensionsController:(id)arg1 captureVisibleTab:(id)arg2 format:(id)arg3 quality:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (_Bool)sfWebExtensionsController:(id)arg1 canSendMessageFromWebView:(id)arg2;
- (void)sfWebExtensionsController:(id)arg1 relateParentTab:(id)arg2 toTab:(id)arg3;
- (id)sfWebExtensionsController:(id)arg1 duplicateTab:(id)arg2;
- (void)sfWebExtensionsController:(id)arg1 createNewTabInWindow:(id)arg2 tabIndex:(id)arg3 url:(id)arg4 makeActive:(_Bool)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (id)sfWebExtensionsController:(id)arg1 tabForWebView:(id)arg2;
- (id)sfWebExtensionsController:(id)arg1 reusableTabWithID:(double)arg2;
- (id)sfWebExtensionsController:(id)arg1 tabWithID:(double)arg2;
- (void)extensionsController:(id)arg1 closeOpenExtensionTabsWithBaseURI:(id)arg2;
- (void)extensionBaseURIMapChangedForExtensionsController:(id)arg1;
- (void)handleNavigationIntent:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)dispatchNavigationIntent:(id)arg1;
- (void)_getBookmarksDataClassEnabledWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_historyHostnamesWereRemoved:(id)arg1;
- (void)_historyWasCleared:(id)arg1;
@property(readonly, nonatomic) WBSAllowedLegacyTLSHostManager *legacyTLSHostManager;
- (void)_updateCloudFeatureAvailability;
- (void)_resetCloudHistoryAccountIfNeeded;
@property(readonly, nonatomic) _Bool isCloudHistoryEnabled;
- (void)downloadShouldContinueAfterReceivingResponse:(id)arg1 decisionHandler:(CDUnknownBlockType)arg2;
- (void)downloadDidReceiveResponse:(id)arg1;
- (void)downloadDidStart:(id)arg1;
- (void)downloadDidFail:(id)arg1;
- (void)downloadDidFinish:(id)arg1;
@property(readonly, nonatomic) WBTabGroupManager *ephemeralTabGroupManager;
@property(readonly, nonatomic) WBTabGroupManager *tabGroupManager;
@property(readonly, nonatomic) WBSavedStateManager *savedStateManager;
- (id)tabCollection;
@property(readonly, nonatomic) WBSParsecABGroupManager *abGroupManager;
@property(readonly, nonatomic) id <WBSPhishingClassifier> phishingClassifier;
@property(readonly, nonatomic) WBSForYouRecentParsecResultsManager *forYouRecentParsecResultsManager;
- (id)createRecommendationMediatorOrReuseExistingOneIfPossible;
- (void)_downloadDidStopNotification:(id)arg1;
- (void)_downloadDidStartNotification:(id)arg1;
- (void)_export30DaysWorthOfHistoryAfterUpgrade;
@property(readonly, nonatomic) ReadingListLeadImageCache *readingListLeadImageCache;
- (void)_pruneExpiredScenes;
- (void)application:(id)arg1 didDiscardSceneSessions:(id)arg2;
- (void)applicationWillTerminate;
- (void)_reportLaunchAnalyticsSoon;
- (void)_showSearchEngineAlertIfNeeded;
- (_Bool)application:(id)arg1 didFinishLaunchingWithOptions:(id)arg2;
- (void)_handleHIDEvent:(struct __IOHIDEvent *)arg1;
- (void)_prewarmAutomationControllerIfEnabled;
@property(readonly, nonatomic) AutomationController *automationController; // @synthesize automationController=_automationController;
- (void)updateTabCount;
- (void)auditTabCount;
- (_Bool)canAddNewTabForPrivateBrowsing:(_Bool)arg1;
@property(readonly, nonatomic) unsigned long long maximumTabCount;
- (unsigned long long)_maximumTabCount;
- (unsigned long long)_numberOfTabsForPrivateBrowsing:(_Bool)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_addDefaultsObserver;
- (void)_managedProfileConfigurationDidUpdate;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;
- (void)profileConnectionDidReceiveRestrictionChangedNotification:(id)arg1 userInfo:(id)arg2;
- (void)_appleKeyboardsChanged:(id)arg1;
- (void)_reloadSearchEngines;
- (void)userDefaultsDidChange:(id)arg1;
- (void)buildMenuWithBuilder:(id)arg1;
- (void)handleKeyUIEvent:(id)arg1;
- (void)_saveBrowserState;
- (void)didReceiveMemoryWarning;
- (void)databaseLockAcquisitor:(id)arg1 acquiredLock:(_Bool)arg2;
- (void)_performBookmarksDatabaseTasksInBackground;
- (void)_suspendOrResumeWallpaperAnimationIfNeeded;
- (void)_reportBookmarksDatabaseHealth;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (_Bool)_usesLoweredSearchBar;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_updateKeyboardCorrectionLearningAllowed;
- (void)saveChangesToCloudHistoryStore;
- (void)applicationWillSuspend;
- (void)_readDefaults;
@property(readonly, nonatomic) _Bool usesPrivateBrowsingModeInAnyWindow;
@property(readonly, nonatomic) _Bool usesDefaultBrowsingModeInAllWindows;
- (id)_browserControllerForExternalNavigation;
@property(readonly, nonatomic) BrowserController *primaryBrowserController;
@property(readonly, nonatomic) NSArray *browserControllers;
- (_Bool)runMemoryOrIOTestWithType:(unsigned long long)arg1;
- (_Bool)startHistoryLoadTest;
- (id)_generateMemoryFootprintResults:(id)arg1;
- (_Bool)startHistoryTest;
- (_Bool)_resetHistoryWithCompressedDatabaseAtURL:(id)arg1 error:(id *)arg2;
- (void)_doSearchTestOnCVC:(id)arg1 WithTestStrings:(id)arg2 andDispatchGroup:(id)arg3;
- (void)startSearchPerformanceUnifiedFieldKeyTimeTest;
- (void)startSearchPerformanceTestWithTestStrings:(id)arg1;
- (void)startSearchPerformanceTest;
- (_Bool)didStartBookmarksTest;
- (_Bool)isRunningCanvasTest;
- (_Bool)isRunningShowBookmarksTest;
- (void)runBookmarksViewTest;
- (void)_switchToBookmarksCollectionForTestNamed:(id)arg1;
- (id)_scrollViewForTestNamed:(id)arg1;
- (void)_populateInMemoryBookmarksDBForTestNamed:(id)arg1;
- (void)finishedBookmarksTest;
- (void)startBookmarksTest;
- (_Bool)prepareBookmarksTest;
- (void)_runTabOverviewScrollPerfTest;
- (void)_runTabOverviewPresentingAndDismissalTest;
- (void)_runTabOverviewOpenNewTabTest;
- (void)runTabOverviewTest;
- (void)_runTabBarSwitchTabTest;
- (_Bool)startTabBarTest;
- (id)_syntheticHTMLString;
- (void)finishedCanvasTestWithURL:(id)arg1 forTabDocument:(id)arg2;
- (void)_pollCanvasTest:(id)arg1;
- (_Bool)startCanvasTest:(id)arg1;
- (void)failedPurpleTestWithError:(id)arg1;
- (void)finishedPurpleTest:(id)arg1;
- (void)startedPurpleTest;
- (void)_runSidebarTest;
- (_Bool)startSidebarTest;
- (void)startTabViewScrollTest;
- (void)_prepareTabViewScrollTest;
- (void)prepareTabViewScrollTest;
- (void)startTabViewRotationTest;
- (void)_prepareTabViewRotationTest;
- (void)prepareTabViewRotationTest;
- (void)startTabViewCloseTest;
- (void)_prepareTabViewCloseTest;
- (void)prepareTabViewCloseTest;
- (void)startTabViewSelectTest;
- (void)_prepareTabViewSelectTest;
- (void)prepareTabViewSelectTest;
- (void)startTabViewOpenTest;
- (void)_prepareTabViewOpenTest;
- (void)prepareTabViewOpenTest;
- (void)startTabViewBringUpTest;
- (void)_prepareTabViewBringUpTest;
- (void)prepareTabViewBringUpTest;
- (void)_loadTabsForTesting:(unsigned long long)arg1 presentTabView:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_preparePageLoadTestControllerParameters;
- (void)loadTabsForTesting:(unsigned long long)arg1 presentTabView:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)loadTabsForTesting:(unsigned long long)arg1 presentTabView:(_Bool)arg2;
- (void)runGeneratePasswordTest;
- (void)runLargeFormTypingTest;
- (void)_runFormTypingTextWithSetupScript:(id)arg1;
- (void)_typeTextInForm:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)runLargeFormFocusTest;
- (void)_loadLargeForm:(CDUnknownBlockType)arg1;
- (void)_loadAlternateHTMLString:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)loadBlankPageforKeyboardTests;
- (void)startKeyboardRotationTest;
- (void)startKeyboardBringupTest;
- (void)startKeyboardSplitAndMergeTest;
- (void)_observeNotificationOnce:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (_Bool)runTest:(id)arg1 options:(id)arg2;
- (id)_numberOption:(id)arg1;
- (void)checkExtendedLaunchPageLoad:(id)arg1 forTabDocument:(id)arg2;
- (id)_extendLaunchTest;
- (_Bool)overrideBrowserStateForTestNamed:(id)arg1 browserController:(id)arg2;
- (void)startCommandLineTest;
- (id)_browserControllerForApplicationTesting;
@property(readonly, nonatomic) _Bool shouldRestoreStateForPPT;
@property(readonly, nonatomic) _Bool isRunningPPT;
- (void)pageLoadTestRunnerFinished:(id)arg1;
- (void)tabSnapshotCacheStressTestRunnerDidFinish:(id)arg1;
- (void)runTabSnapshotCacheStressTest;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(retain, nonatomic) UIWindow *window;

@end

