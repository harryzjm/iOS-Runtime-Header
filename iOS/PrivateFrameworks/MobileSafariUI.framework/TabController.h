//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MobileSafariUI/SFTabHoverPreviewControllerDelegate-Protocol.h>
#import <MobileSafariUI/TabBarDelegate-Protocol.h>
#import <MobileSafariUI/TabBarManagerObserving-Protocol.h>
#import <MobileSafariUI/TabDocumentDragDropDataSource-Protocol.h>
#import <MobileSafariUI/TabOverviewDelegate-Protocol.h>
#import <MobileSafariUI/TabSnapshotCacheDelegate-Protocol.h>
#import <MobileSafariUI/TiltedTabViewDelegate-Protocol.h>
#import <MobileSafariUI/UITextFieldDelegate-Protocol.h>
#import <MobileSafariUI/WBSTabOrderProvider-Protocol.h>
#import <MobileSafariUI/WBTabGroupManagerObserver-Protocol.h>

@class BrowserController, CKContextCompleter, CloudTabStore, NSArray, NSHashTable, NSMapTable, NSMutableArray, NSSet, NSString, NSTimer, NSUUID, TabBar, TabBarManager, TabDocument, TabOverview, TabSnapshotCache, TiltedTabView, UIBarButtonItem, UIMenu, UIView, WBSTabOrderManager, WBTabGroup, WBTabGroupManager, WBWindowState, _SFBrowserSavedState;
@protocol TabCollectionView, TabThumbnailCollectionView, WBSOrderedTab;

@interface TabController : NSObject <TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate, TabBarManagerObserving, UITextFieldDelegate, SFTabHoverPreviewControllerDelegate, WBTabGroupManagerObserver, TabDocumentDragDropDataSource, WBSTabOrderProvider>
{
    BrowserController *_browserController;
    NSMutableArray *_normalTabDocuments;
    NSMutableArray *_privateTabDocuments;
    NSTimer *_saveStateTimer;
    NSTimer *_stateValidateTimer;
    TabDocument *_tabDocumentBeingHiddenFromTabView;
    _Bool _didReadWindowState;
    WBTabGroupManager *_tabGroupManager;
    WBTabGroup *_activeTabGroup;
    UIBarButtonItem *_tiltedTabViewAddTabButton;
    UIBarButtonItem *_tiltedTabViewPrivateBrowsingButton;
    NSTimer *_updateContinuityTimer;
    _Bool _tabBarItemsFixed;
    _Bool _tabViewItemsFixed;
    TabSnapshotCache *_snapshotCache;
    _Bool _flushPendingSnapshots;
    CDUnknownBlockType _flushPendingSnapshotsCompletion;
    _Bool _didRestoreCloudTabsForEducationDevice;
    _Bool _didReceiveFirstCloudTabDeviceUpdateNotification;
    TabDocument *_tabDocumentBeingDragged;
    NSArray *_tabDocumentsToKeepVisible;
    NSMapTable *_uuidToTabDocumentMap;
    NSHashTable *_documentObservers;
    NSUUID *_blankDocumentGroupIdentifier;
    NSUUID *_privateBlankDocumentGroupIdentifier;
    _Bool _switchingActiveDocument;
    _Bool _isClosingDocuments;
    NSString *_lastSearchTerm;
    NSArray *_searchTermWords;
    unsigned long long _veryRecentlyClosedTabCount;
    unsigned long long _tabsClosedWhileTabViewPresentedCount;
    NSTimer *_veryRecentlyClosedTabCountInvalidationTimer;
    TabDocument *_tabShowingPreview;
    long long _updateTabsSuppressionCount;
    NSArray *_tabDocumentsThatShouldSuppressOnCreatedEvents;
    NSArray *_tabGroupSuggestions;
    CKContextCompleter *_contextCompleter;
    _Bool _showsTabGroupNameSuggestions;
    CDUnknownBlockType _postponedSnapshotInvalidationBlock;
    CDUnknownBlockType _postponedSnapshotInvalidationCondition;
    _Bool _snapshotInvalidationIsPostponed;
    _Bool _snapshotsAreEnabled;
    _Bool _shouldTogglePrivateBrowsingOnSplit;
    _Bool _shouldDeferSnapshotRequest;
    WBWindowState *_windowState;
    TabDocument *_privateActiveTabDocument;
    TabDocument *_normalActiveTabDocument;
    _SFBrowserSavedState *_savedState;
    long long _privateBrowsingMode;
    WBSTabOrderManager *_tabOrderManager;
    TabBar *_tabBar;
    TabBarManager *_tabBarManager;
    TiltedTabView *_tiltedTabView;
    long long _tabThumbnailCollectionViewStyle;
    long long _tabDisplayMode;
    TabOverview *_tabOverview;
}

- (void).cxx_destruct;
@property(readonly, retain, nonatomic) TabOverview *tabOverview; // @synthesize tabOverview=_tabOverview;
@property(nonatomic) _Bool shouldTogglePrivateBrowsingOnSplit; // @synthesize shouldTogglePrivateBrowsingOnSplit=_shouldTogglePrivateBrowsingOnSplit;
@property(nonatomic) long long tabDisplayMode; // @synthesize tabDisplayMode=_tabDisplayMode;
@property(nonatomic) _Bool snapshotsAreEnabled; // @synthesize snapshotsAreEnabled=_snapshotsAreEnabled;
@property(copy, nonatomic) CDUnknownBlockType postponedSnapshotInvalidationCondition; // @synthesize postponedSnapshotInvalidationCondition=_postponedSnapshotInvalidationCondition;
@property(nonatomic) _Bool snapshotInvalidationIsPostponed; // @synthesize snapshotInvalidationIsPostponed=_snapshotInvalidationIsPostponed;
@property(nonatomic) long long tabThumbnailCollectionViewStyle; // @synthesize tabThumbnailCollectionViewStyle=_tabThumbnailCollectionViewStyle;
@property(readonly, retain, nonatomic) TiltedTabView *tiltedTabView; // @synthesize tiltedTabView=_tiltedTabView;
@property(nonatomic) __weak TabBarManager *tabBarManager; // @synthesize tabBarManager=_tabBarManager;
@property(nonatomic) __weak TabBar *tabBar; // @synthesize tabBar=_tabBar;
@property(readonly, nonatomic) WBSTabOrderManager *tabOrderManager; // @synthesize tabOrderManager=_tabOrderManager;
@property(nonatomic) long long privateBrowsingMode; // @synthesize privateBrowsingMode=_privateBrowsingMode;
@property(retain, nonatomic) _SFBrowserSavedState *savedState; // @synthesize savedState=_savedState;
@property(retain, nonatomic) TabDocument *normalActiveTabDocument; // @synthesize normalActiveTabDocument=_normalActiveTabDocument;
@property(retain, nonatomic) TabDocument *privateActiveTabDocument; // @synthesize privateActiveTabDocument=_privateActiveTabDocument;
@property(retain, nonatomic) WBWindowState *windowState; // @synthesize windowState=_windowState;
@property(retain, nonatomic) WBTabGroup *activeTabGroup; // @synthesize activeTabGroup=_activeTabGroup;
@property(readonly, copy, nonatomic) NSArray *privateTabDocuments; // @synthesize privateTabDocuments=_privateTabDocuments;
@property(readonly, copy, nonatomic) NSArray *tabDocuments; // @synthesize tabDocuments=_normalTabDocuments;
- (void)tabBarManager:(id)arg1 didCreateTabBar:(id)arg2;
- (void)makeActiveTabDocumentActive;
- (void)textFieldDidEndEditing:(id)arg1;
- (void)textFieldDidBeginEditing:(id)arg1;
- (void)tabGroupManager:(id)arg1 didRemoveTabGroup:(id)arg2;
- (void)tabGroupManager:(id)arg1 didUpdateTab:(id)arg2 userDriven:(_Bool)arg3;
- (void)tabGroupManager:(id)arg1 didUpdateTabsInTabGroup:(id)arg2;
- (void)tabGroupManagerDidUpdateTabGroups:(id)arg1;
- (void)tabGroupManagerDidFinishSetup:(id)arg1;
- (id)browserControllerContainingLocalTabGroupUUID:(id)arg1;
- (void)openURL:(id)arg1 inTabGroup:(id)arg2;
- (void)openBookmark:(id)arg1 inTabGroup:(id)arg2;
- (void)removeSingleBlankTabFromActiveTabGroup;
- (void)removeSingleBlankTabFromInactiveTabGroup:(id)arg1;
- (id)tabGroupsMenuElementsWithOptions:(unsigned long long)arg1 newTabGroupName:(id)arg2 URL:(id)arg3 descendantCount:(long long)arg4 isMoveAction:(_Bool)arg5 actionHandler:(CDUnknownBlockType)arg6;
- (void)moveTabGroup:(id)arg1 beforeOrAfterTabGroup:(id)arg2;
- (void)moveTabDocument:(id)arg1 toTabGroup:(id)arg2;
- (void)renameTabGroup:(id)arg1;
- (void)createNewTabGroup;
- (void)closeTabGroup:(id)arg1;
- (void)evictTabDocument:(id)arg1;
- (_Bool)switchToTabWithUUID:(id)arg1 inTabGroupWithUUID:(id)arg2;
- (void)switchOutOfSyncedTabGroup;
- (id)openInTabGroupMenuWithNewTabGroupName:(id)arg1 URL:(id)arg2 descendantCount:(long long)arg3 handler:(CDUnknownBlockType)arg4;
- (id)contextMenuConfigurationForTabGroup:(id)arg1 forPickerSheet:(_Bool)arg2;
- (id)menuForTabGroup:(id)arg1 forPickerSheet:(_Bool)arg2 forEditMode:(_Bool)arg3;
- (id)swipeActionsConfigurationForTabGroup:(id)arg1;
- (id)imageForTabGroup:(id)arg1;
- (id)existingPersistedTitleForTabDocument:(id)arg1;
@property(readonly, nonatomic) NSSet *nonActiveTabGroups;
@property(readonly, nonatomic) NSArray *syncedTabGroups;
@property(readonly, nonatomic) NSArray *localTabGroups;
@property(readonly, nonatomic) NSArray *tabGroups;
@property(readonly, nonatomic) NSString *activeLibraryType;
@property(readonly, nonatomic) NSString *moveLocalTabsToNewGroupTitle;
@property(readonly, nonatomic) _Bool createTabGroupAlertIsPresented;
@property(nonatomic) _Bool tabGroupOverviewIsPresented;
- (void)tabGroupNamingTextDidChange:(id)arg1;
- (id)addNewTabGroupWithTitle:(id)arg1 fromExistingTabs:(_Bool)arg2;
- (void)presentAlertToCreateTabGroupFromExistingTabs:(_Bool)arg1 withTitle:(id)arg2 withMessage:(id)arg3 withSuggestedName:(id)arg4 okActionTitle:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)openTabDocumentForLibraryType:(id)arg1;
- (void)updateSelectedTabGroupName;
- (void)updateActiveTab;
- (void)selectNextTabGroup;
- (void)selectPreviousTabGroup;
@property(readonly, nonatomic) UIMenu *newTabGroupMenu;
@property(readonly, nonatomic) CDUnknownBlockType tabExposeMenuProvider;
@property(readonly, nonatomic) _Bool canCreateTabGroupFromCurrentTabs;
@property(readonly, nonatomic) CDUnknownBlockType tabGroupsMenuProvider;
- (void)createTabGroupFromExistingTabs:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) _Bool canRenameActiveTabGroup;
- (id)tabGroupWithUUID:(id)arg1;
- (unsigned long long)indexForTab:(id)arg1;
@property(readonly, nonatomic) unsigned long long numberOfTabs;
@property(readonly, nonatomic) id <WBSOrderedTab> selectedTabForTabOrderProvider;
- (id)originatingTabForTab:(id)arg1;
- (id)tabAtIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long indexOfSelectedTab;
- (void)didTransitionTabView;
- (void)willTransitionTabView;
@property(readonly, nonatomic) NSArray *tabDocumentsMatchingSearchTerm;
- (void)_updateUserActivityTimerFired;
- (void)saveTabDocumentUserActivitySoon:(id)arg1;
- (unsigned long long)capacityForTabSnapshotCache:(id)arg1;
- (id)snapshotsToPresistOnDiskForTabSnapshotCache:(id)arg1;
- (_Bool)tabSnapshotCacheShouldDeferNextSnapshotRequest:(id)arg1;
- (_Bool)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCacheDidFinishUpdating:(id)arg1;
- (void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestSnapshotForTabDocument:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)cachedContentImageForTabDocument:(id)arg1;
- (void)flushPendingSnapshotsWithCompletion:(CDUnknownBlockType)arg1;
- (void)removeSnapshotForDocument:(id)arg1;
- (void)invalidateSnapshotForTabDocument:(id)arg1;
@property(readonly, nonatomic, getter=isShowingTabView) _Bool showingTabView;
@property(readonly, nonatomic) _Bool usesTabOverview;
- (void)tabOverview:(id)arg1 closeItems:(id)arg2;
- (void)tabOverview:(id)arg1 willInteractivelyCloseItem:(id)arg2;
- (void)tabOverviewWillUpdateInteractivePresentation:(id)arg1;
- (void)tabOverviewDidChangeAllowsInteractivePresentation:(id)arg1;
- (id)itemsToKeepVisibleForTabOverview:(id)arg1;
- (id)currentItemForTabOverview:(id)arg1;
- (void)tabCollectionViewDidCancelDismissal:(id)arg1;
- (void)tiltedTabViewDidEndSearching:(id)arg1;
- (void)tiltedTabViewWillBeginSearching:(id)arg1;
- (struct CGSize)suggestedSnapshotSizeForTiltedTabView:(id)arg1;
- (void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(_Bool)arg3;
- (id)expectedSuperviewForTiltedTabView:(id)arg1;
- (id)itemsToKeepVisibleForTiltedTabView:(id)arg1;
- (id)currentItemForTiltedTabView:(id)arg1;
- (_Bool)tabCollectionView:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;
- (_Bool)tabCollectionView:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;
- (void)tabCollectionView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;
- (void)tabCollectionView:(id)arg1 relinquishBorrowedContentView:(id)arg2 forItem:(id)arg3;
- (id)tabCollectionView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id *)arg3 ofHeight:(double)arg4;
- (struct UIEdgeInsets)effectiveSafeAreaInsetsForTabCollectionView:(id)arg1;
- (double)tabCollectionView:(id)arg1 headerHeightForItem:(id)arg2;
- (void)tabCollectionViewDidUpdateItemVisibilityOrder:(id)arg1;
- (id)tabCollectionView:(id)arg1 snapshotForItem:(id)arg2;
- (_Bool)tabCollectionView:(id)arg1 validSnapshotExistsForItem:(id)arg2;
- (void)tabCollectionViewEndIgnoringUserInteraction:(id)arg1 reason:(id)arg2;
- (void)tabCollectionViewBeginIgnoringUserInteraction:(id)arg1 reason:(id)arg2;
- (void)tabCollectionViewDidDismiss:(id)arg1;
- (void)tabCollectionViewWillDismiss:(id)arg1;
- (void)tabCollectionViewDidPresent:(id)arg1;
- (void)updateSnapshotCacheAndSnapshotActiveTab;
- (void)tabCollectionViewWillPresent:(id)arg1;
- (void)tabCollectionView:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;
- (void)tabCollectionView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;
- (void)tabCollectionView:(id)arg1 closeItem:(id)arg2;
- (_Bool)tabCollectionView:(id)arg1 canCloseItem:(id)arg2;
- (void)tabCollectionView:(id)arg1 didSelectItem:(id)arg2;
@property(readonly, nonatomic) UIView<TabThumbnailCollectionView> *tabThumbnailCollectionView;
- (void)_dismissTabView;
- (void)didEndTrackingSession:(id)arg1;
- (void)didBeginTrackingSession:(id)arg1;
- (void)tabDocumentDidUpdateUUID:(id)arg1 previousUUID:(id)arg2;
- (void)willLoseOwnershipOfTabDocument:(id)arg1;
- (void)didGainOwnershipOfTabDocument:(id)arg1;
- (id)tabDocumentWithUUID:(id)arg1;
- (void)unhideTabDocuments:(id)arg1;
- (void)hideTabDocuments:(id)arg1;
- (id)replacePlaceholderTabDocument:(id)arg1 withTabDocuments:(id)arg2 transitionToDragStateWithBlock:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) UIView<TabCollectionView> *tabCollectionView;
- (id)restoreRecentlyClosedTabDocumentWithTabStateData:(id)arg1;
- (void)updateTiltedTabViewToolbarItems:(_Bool)arg1;
@property(readonly, nonatomic) NSArray *tiltedTabViewToolbarItems;
- (void)updateEducationTabsLastSyncDate;
- (void)restoreEducationDeviceTabs;
- (void)_cloudTabsDidUpdate:(id)arg1;
@property(readonly, nonatomic) _Bool usesTiltedTabView;
- (void)updateTabViewsAnimatingTabBar:(_Bool)arg1;
- (void)updateTabBarAnimated:(_Bool)arg1;
- (void)insertTabDocumentFromTabStateData:(id)arg1;
- (void)adoptTabsFromTabController:(id)arg1;
- (id)insertPlaceholderTabDocumentAfterDocument:(id)arg1;
- (void)tabHoverPreviewControllerNeedsSnapshotUpdate:(id)arg1;
- (void)tabHoverPreviewControllerDismissPreview:(id)arg1;
- (void)tabHoverPreviewController:(id)arg1 showPreviewForItem:(id)arg2;
- (void)updateSnapshotsForTabHoverPreviewIfNeeded;
- (void)tabBar:(id)arg1 toggleMediaStateMutedForItem:(id)arg2;
- (_Bool)tabBar:(id)arg1 canMoveItem:(id)arg2;
@property(readonly, nonatomic) _Bool hasTabBar;
- (void)setPrivateBrowsingMode:(long long)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isPrivateBrowsingEnabled) _Bool privateBrowsingEnabled;
@property(readonly, nonatomic, getter=isControlledByAutomation) _Bool controlledByAutomation;
- (void)clearBrowserController;
- (void)dealloc;
- (_Bool)needsCloudTabPeriodicUpdates;
@property(readonly, nonatomic) CloudTabStore *cloudTabStore;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (void)removeSnapshotCacheObserver:(id)arg1;
- (void)addSnapshotCacheObserver:(id)arg1;
- (id)initWithBrowserController:(id)arg1;
- (void)openInitialBlankTabDocumentIfNeeded;
- (void)updateTabGroupTabWithTabDocument:(id)arg1 notify:(_Bool)arg2;
- (void)updateTabGroupTabWithTabDocument:(id)arg1;
- (void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2;
- (void)sortTabsWithMode:(long long)arg1;
- (id)duplicateTabDocument:(id)arg1;
- (id)tabDocumentWithIDForWebExtensions:(double)arg1;
@property(readonly, nonatomic) TabDocument *tabDocumentForSpotlightSearch;
- (id)tabDocumentForURL:(id)arg1;
- (void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2;
- (void)closeTabDocuments:(id)arg1 animated:(_Bool)arg2;
- (void)closeTabDocuments:(id)arg1;
- (void)closeAllOpenTabsAnimated:(_Bool)arg1 temporarily:(_Bool)arg2;
- (void)closeAllOpenTabsAnimated:(_Bool)arg1;
- (void)closeOtherTabs;
- (void)closeTab;
- (void)closeTabDocuments:(id)arg1 animated:(_Bool)arg2 allowAddingToRecentlyClosedTabs:(_Bool)arg3 showAutoCloseTabsAlert:(_Bool)arg4;
- (void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2;
- (void)closeTabDocument:(id)arg1 animated:(_Bool)arg2;
- (void)openNewTabWithOptions:(long long)arg1 libraryType:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)openNewTabWithOptions:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) long long visibleTabCollectionViewType;
- (void)_newTabFromTabViewButton;
- (id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(_Bool)arg1;
- (id)blankTabDocumentToReuseAllowingReorder:(_Bool)arg1;
- (id)blankTabDocumentToReuse;
- (void)insertNewBlankTabDocumentAnimated:(_Bool)arg1;
- (void)insertNewTabDocumentWithDefaultOrdering:(id)arg1 inBackground:(_Bool)arg2 animated:(_Bool)arg3;
- (void)insertNewTabDocument:(id)arg1 forcingOrderAfterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (void)insertTabDocuments:(id)arg1 beforeTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (void)insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (void)performBatchUpdatesWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)canAddNewTabForPrivateBrowsing:(_Bool)arg1;
@property(readonly, nonatomic) _Bool canAddNewTabForCurrentBrowsingMode;
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2 deferActivation:(_Bool)arg3;
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2;
@property(retain, nonatomic) TabDocument *activeTabDocument;
@property(readonly, nonatomic) _Bool canCloseOtherTabs;
@property(readonly, nonatomic) _Bool canCloseTab;
@property(nonatomic) _Bool tabViewDefersActivation;
@property(readonly, nonatomic) TabDocument *tabDocumentBeingActivated;
@property(readonly, nonatomic) _Bool hasTabsThatShouldBeObscuredForDigitalHealth;
- (void)deactivateAllUsageTrackingInformationIfNecessary;
- (void)updateUsageTrackingInformationIfNecessary;
- (void)logTabActivationInterval:(double)arg1 forActivationType:(long long)arg2;
- (void)updateHibernatedTabDocumentsSavingState;
- (void)updateLocalTabGroupTitle;
- (void)updateTabCount;
- (void)removeDocumentObserver:(id)arg1;
- (void)addDocumentObserver:(id)arg1;
@property(readonly, copy, nonatomic) NSSet *allSnapshotIdentifiers;
@property(readonly, copy, nonatomic) NSArray *allTabDocuments;
@property(readonly, copy, nonatomic) NSArray *currentTabDocuments;
@property(readonly, nonatomic) unsigned long long numberOfCurrentNonHiddenTabs;
- (id)_currentTabs;
- (void)_cancelVeryRecentlyClosedTabCountInvalidationTimer;
- (void)closeTabsAutomaticallyIfNecessary;
@property(readonly, nonatomic) _Bool updatingTabGroupTabs;
- (void)_validateSavedState:(id)arg1;
- (void)_saveStateFromTimer:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

