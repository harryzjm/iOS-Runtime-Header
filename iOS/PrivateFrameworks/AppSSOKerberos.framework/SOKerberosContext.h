//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ASAuthorizationProviderExtensionAuthorizationRequest, LAContext, NSData, NSDate, NSString, NSUUID, SOKerberosExtensionData, SOKerberosExtensionUserData, SOKerberosPacData, SOKerberosRealmSettings, SONetworkIdentity, SOSiteCode;
@protocol OS_dispatch_group;

@interface SOKerberosContext : NSObject
{
    _Bool _userNameIsReadOnly;
    _Bool _returnCredentialOnly;
    _Bool _refreshCredential;
    _Bool _credsCameFromKeychain;
    _Bool _requestCancelled;
    _Bool _attemptedToGetCredsFromKeychain;
    _Bool _forceLoginViewController;
    _Bool _isManagedApp;
    _Bool _smartCardNeedsInsert;
    _Bool _requestStarted;
    NSString *_userPrincipalName;
    NSString *_userName;
    SOKerberosRealmSettings *_currentSettings;
    NSString *_realm;
    SOKerberosExtensionData *_extensionData;
    SOKerberosExtensionUserData *_extensionUserData;
    NSString *_hostName;
    NSString *_servicePrincipalName;
    NSString *_serviceName;
    NSString *_password;
    NSString *_changedPassword;
    NSUUID *_credentialUUID;
    NSString *_certificateTokenID;
    struct __SecIdentity *_pkinitIdentity;
    NSData *_pkinitPersistientRef;
    LAContext *_smartCardLAContext;
    SOSiteCode *_siteCode;
    NSString *_cacheName;
    NSString *_callerBundleIdentifier;
    NSString *_impersonationBundleIdentifier;
    NSString *_callerLocalizedName;
    NSDate *_loginTimeStamp;
    NSObject<OS_dispatch_group> *_siteCodeGroup;
    SONetworkIdentity *_networkIdentity;
    NSData *_auditToken;
    SOKerberosPacData *_pacData;
    ASAuthorizationProviderExtensionAuthorizationRequest *_authorizationRequest;
    NSObject<OS_dispatch_group> *_dispatchGroup;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool requestStarted; // @synthesize requestStarted=_requestStarted;
@property(retain) NSObject<OS_dispatch_group> *dispatchGroup; // @synthesize dispatchGroup=_dispatchGroup;
@property(retain, nonatomic) ASAuthorizationProviderExtensionAuthorizationRequest *authorizationRequest; // @synthesize authorizationRequest=_authorizationRequest;
@property(retain, nonatomic) SOKerberosPacData *pacData; // @synthesize pacData=_pacData;
@property(nonatomic) _Bool smartCardNeedsInsert; // @synthesize smartCardNeedsInsert=_smartCardNeedsInsert;
@property(nonatomic) _Bool isManagedApp; // @synthesize isManagedApp=_isManagedApp;
@property(retain, nonatomic) NSData *auditToken; // @synthesize auditToken=_auditToken;
@property(retain, nonatomic) SONetworkIdentity *networkIdentity; // @synthesize networkIdentity=_networkIdentity;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *siteCodeGroup; // @synthesize siteCodeGroup=_siteCodeGroup;
@property(retain, nonatomic) NSDate *loginTimeStamp; // @synthesize loginTimeStamp=_loginTimeStamp;
@property(nonatomic) _Bool forceLoginViewController; // @synthesize forceLoginViewController=_forceLoginViewController;
@property(nonatomic) _Bool attemptedToGetCredsFromKeychain; // @synthesize attemptedToGetCredsFromKeychain=_attemptedToGetCredsFromKeychain;
@property(nonatomic) _Bool requestCancelled; // @synthesize requestCancelled=_requestCancelled;
@property(nonatomic) _Bool credsCameFromKeychain; // @synthesize credsCameFromKeychain=_credsCameFromKeychain;
@property(retain, nonatomic) NSString *callerLocalizedName; // @synthesize callerLocalizedName=_callerLocalizedName;
@property(retain, nonatomic) NSString *impersonationBundleIdentifier; // @synthesize impersonationBundleIdentifier=_impersonationBundleIdentifier;
@property(retain, nonatomic) NSString *callerBundleIdentifier; // @synthesize callerBundleIdentifier=_callerBundleIdentifier;
@property(nonatomic) _Bool refreshCredential; // @synthesize refreshCredential=_refreshCredential;
@property(nonatomic) _Bool returnCredentialOnly; // @synthesize returnCredentialOnly=_returnCredentialOnly;
@property(retain, nonatomic) NSString *cacheName; // @synthesize cacheName=_cacheName;
@property(retain, nonatomic) SOSiteCode *siteCode; // @synthesize siteCode=_siteCode;
@property(retain) LAContext *smartCardLAContext; // @synthesize smartCardLAContext=_smartCardLAContext;
@property(retain) NSData *pkinitPersistientRef; // @synthesize pkinitPersistientRef=_pkinitPersistientRef;
@property struct __SecIdentity *pkinitIdentity; // @synthesize pkinitIdentity=_pkinitIdentity;
@property(retain, nonatomic) NSString *certificateTokenID; // @synthesize certificateTokenID=_certificateTokenID;
@property(retain, nonatomic) NSUUID *credentialUUID; // @synthesize credentialUUID=_credentialUUID;
@property(nonatomic) _Bool userNameIsReadOnly; // @synthesize userNameIsReadOnly=_userNameIsReadOnly;
@property(retain, nonatomic) NSString *changedPassword; // @synthesize changedPassword=_changedPassword;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *serviceName; // @synthesize serviceName=_serviceName;
@property(retain, nonatomic) NSString *servicePrincipalName; // @synthesize servicePrincipalName=_servicePrincipalName;
@property(retain, nonatomic) NSString *hostName; // @synthesize hostName=_hostName;
@property(retain, nonatomic) SOKerberosExtensionUserData *extensionUserData; // @synthesize extensionUserData=_extensionUserData;
@property(retain, nonatomic) SOKerberosExtensionData *extensionData; // @synthesize extensionData=_extensionData;
@property(retain, nonatomic) NSString *realm; // @synthesize realm=_realm;
@property(readonly, nonatomic) SOKerberosRealmSettings *currentSettings; // @synthesize currentSettings=_currentSettings;
@property(retain, nonatomic) NSString *userName; // @synthesize userName=_userName;
@property(retain, nonatomic) NSString *userPrincipalName; // @synthesize userPrincipalName=_userPrincipalName;
- (void)presentAuthorizationViewControllerWithCompletion:(CDUnknownBlockType)arg1;
- (void)completeRequestWithDoNotHandle;
- (void)completeRequestWithError:(id)arg1;
- (void)completeRequestWithHTTPResponse:(id)arg1 httpBody:(id)arg2;
- (void)completeRequestWithHTTPResponseHeaders:(id)arg1;
- (void)completeRequestWithHeaders:(id)arg1;
- (void)completeRequest;
- (void)cancelRequest:(_Bool)arg1;
- (void)cancelRequest;
- (void)waitForCompletion;
- (void)finishRequest;
- (void)startRequest;
- (void)setUserPrincipalNameAfterAuth:(id)arg1;
- (id)initWithRequest:(id)arg1 extensionData:(id)arg2;

@end

