//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AbstractFeaturizer {
    CDUnknownFunctionPointerType *_field1;
};

struct EspressoModule {
    void *_field1;
    void *_field2;
    struct {
        void *_field1;
        int _field2;
    } _field3;
};

struct GlobalNerHandler;

struct NLv4InferenceOrchestrator;

struct SNLCOrchestrator;

struct SNLCParserRequest;

struct SNLCParserResponse {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    float _field3;
    struct {
        unsigned int :1;
        unsigned int :1;
    } _field4;
};

struct SNLPAssetLogger;

struct Token;

struct UPDataDetector {
    long long _field1;
    struct __DDScanner *_field2;
    struct __DDScanner *_field3;
    struct __DDScanner *_field4;
    struct __DDScanner *_field5;
    struct __DDScanner *_field6;
    struct __DDScanner *_field7;
};

struct UPDetectedSpan;

struct UPGenericTensor {
    struct vector<unsigned long, std::allocator<unsigned long>> shape;
    struct vector<float, std::allocator<float>> data;
};

struct UPInferenceResult {
    struct UPGenericTensor _field1;
    struct UPGenericTensor _field2;
    struct UPGenericTensor _field3;
};

struct UsoGraph;

struct UsoGraphNode {
    CDUnknownFunctionPointerType *_field1;
    struct UsoGraph *_field2;
    unsigned long long _field3;
};

struct UsoVocabManager;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __DDScanner;

struct basic_string<char16_t, std::char_traits<char16_t>, std::allocator<char16_t>> {
    struct __compressed_pair<std::basic_string<char16_t>::__rep, std::allocator<char16_t>> {
        struct __rep {
            union {
                struct __long {
                    unsigned short *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    unsigned short _field1[11];
                    struct {
                        unsigned char _field1[1];
                        unsigned char _field2;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct shared_ptr<siri::ontology::UsoVocabManager> {
    struct UsoVocabManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<const sirinluinternalsnlc::SNLCParserRequest, std::default_delete<const sirinluinternalsnlc::SNLCParserRequest>> {
    struct __compressed_pair<const sirinluinternalsnlc::SNLCParserRequest *, std::default_delete<const sirinluinternalsnlc::SNLCParserRequest>> {
        struct SNLCParserRequest *_field1;
    } _field1;
};

struct unique_ptr<global_ner::GlobalNerHandler, std::default_delete<global_ner::GlobalNerHandler>> {
    struct __compressed_pair<global_ner::GlobalNerHandler *, std::default_delete<global_ner::GlobalNerHandler>> {
        struct GlobalNerHandler *__value_;
    } __ptr_;
};

struct unique_ptr<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator, std::default_delete<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator>> {
    struct __compressed_pair<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *, std::default_delete<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator>> {
        struct NLv4InferenceOrchestrator *__value_;
    } __ptr_;
};

struct unique_ptr<snlc_inference_orchestrator::orchestration::SNLCOrchestrator, std::default_delete<snlc_inference_orchestrator::orchestration::SNLCOrchestrator>> {
    struct __compressed_pair<snlc_inference_orchestrator::orchestration::SNLCOrchestrator *, std::default_delete<snlc_inference_orchestrator::orchestration::SNLCOrchestrator>> {
        struct SNLCOrchestrator *__value_;
    } __ptr_;
};

struct unique_ptr<snlp::common::asset_logger::SNLPAssetLogger, std::default_delete<snlp::common::asset_logger::SNLPAssetLogger>> {
    struct __compressed_pair<snlp::common::asset_logger::SNLPAssetLogger *, std::default_delete<snlp::common::asset_logger::SNLPAssetLogger>> {
        struct SNLPAssetLogger *__value_;
    } __ptr_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<nl_featurization::Token, std::allocator<nl_featurization::Token>> {
    struct Token *__begin_;
    struct Token *__end_;
    struct __compressed_pair<nl_featurization::Token *, std::allocator<nl_featurization::Token>> {
        struct Token *__value_;
    } __end_cap_;
};

struct vector<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>*, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
        void *_field1;
    } _field3;
};

struct vector<uaap::UPDetectedSpan, std::allocator<uaap::UPDetectedSpan>> {
    struct UPDetectedSpan *__begin_;
    struct UPDetectedSpan *__end_;
    struct __compressed_pair<uaap::UPDetectedSpan *, std::allocator<uaap::UPDetectedSpan>> {
        struct UPDetectedSpan *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char16_t, std::char_traits<char16_t>, std::allocator<char16_t>> {
    struct __compressed_pair<std::basic_string<char16_t>::__rep, std::allocator<char16_t>> {
        struct __rep {
            union {
                struct __long {
                    unsigned short *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    unsigned short _field1[11];
                    struct {
                        unsigned char _field1[1];
                        unsigned char _field2;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_473d1cda;

typedef struct unique_ptr<const sirinluinternalsnlc::SNLCParserRequest, std::default_delete<const sirinluinternalsnlc::SNLCParserRequest>> {
    struct __compressed_pair<const sirinluinternalsnlc::SNLCParserRequest *, std::default_delete<const sirinluinternalsnlc::SNLCParserRequest>> {
        struct SNLCParserRequest *_field1;
    } _field1;
} unique_ptr_3e664e93;

typedef struct unique_ptr<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator, std::default_delete<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator>> {
    struct __compressed_pair<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *, std::default_delete<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator>> {
        struct NLv4InferenceOrchestrator *__value_;
    } __ptr_;
} unique_ptr_44c4389d;

typedef struct vector<nl_featurization::Token, std::allocator<nl_featurization::Token>> {
    struct Token *__begin_;
    struct Token *__end_;
    struct __compressed_pair<nl_featurization::Token *, std::allocator<nl_featurization::Token>> {
        struct Token *__value_;
    } __end_cap_;
} vector_ddae5d0a;

typedef struct vector<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>*, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
        void *_field1;
    } _field3;
} vector_43a3655f;

typedef struct vector<uaap::UPDetectedSpan, std::allocator<uaap::UPDetectedSpan>> {
    struct UPDetectedSpan *__begin_;
    struct UPDetectedSpan *__end_;
    struct __compressed_pair<uaap::UPDetectedSpan *, std::allocator<uaap::UPDetectedSpan>> {
        struct UPDetectedSpan *__value_;
    } __end_cap_;
} vector_da410165;

