//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <SafariSharedUI/NSCopying-Protocol.h>
#import <SafariSharedUI/NSSecureCoding-Protocol.h>
#import <SafariSharedUI/WBSWebExtensionDataForwarding-Protocol.h>
#import <SafariSharedUI/WKNavigationDelegate-Protocol.h>
#import <SafariSharedUI/WKUIDelegate-Protocol.h>

@class NSArray, NSBundle, NSCountedSet, NSDate, NSDictionary, NSExtension, NSMapTable, NSMutableArray, NSMutableDictionary, NSMutableOrderedSet, NSPointerArray, NSSet, NSString, NSURL, NSUUID, UIImage, WBSDispatchSourceTimer, WBSWebExtensionAlarmState, WBSWebExtensionContextMenuItemManager, WBSWebExtensionLocalization, WBSWebExtensionSQLiteStore, WBSWebExtensionToolbarItem, WKContentWorld, WKWebView;

@interface WBSWebExtensionData <WKNavigationDelegate, WKUIDelegate, WBSWebExtensionDataForwarding, NSSecureCoding, NSCopying>
{
    NSURL *_resourcesDirectoryURL;
    NSExtension *_extension;
    NSString *_composedIdentifier;
    NSMutableArray *_actionsToPerformAfterBackgroundPageLoads;
    WBSDispatchSourceTimer *_timerToUnloadBackgroundPage;
    WKWebView *_backgroundWebView;
    NSPointerArray *_relatedWebViewPool;
    NSMutableDictionary *_injectedScriptsPerOriginPattern;
    NSMutableDictionary *_injectedStyleSheetsPerOriginPattern;
    WBSWebExtensionContextMenuItemManager *_contextMenuItemManager;
    WBSWebExtensionAlarmState *_alarmState;
    NSMapTable *_temporaryTabPermissionOrigins;
    NSMutableArray *_websiteRequestsPendingApproval;
    NSMutableOrderedSet *_manifestErrors;
    NSBundle *_extensionBundle;
    NSDictionary *_manifestDictionary;
    _Bool _parsedManifestDictionary;
    NSMutableDictionary *_grantedPermissions;
    NSMutableDictionary *_grantedPermissionOrigins;
    NSMutableDictionary *_revokedPermissions;
    NSMutableDictionary *_revokedPermissionOrigins;
    NSSet *_manifestPermissions;
    NSSet *_manifestOptionalPermissions;
    NSSet *_manifestPermissionOrigins;
    NSSet *_manifestOptionalPermissionOrigins;
    _Bool _didPopulatePermissionsAndOriginsPropertiesFromManifest;
    NSArray *_backgroundScriptPaths;
    NSString *_backgroundPagePath;
    NSString *_generatedBackgroundPageContent;
    _Bool _backgroundPageIsPersistent;
    _Bool _parsedBackgroundManifest;
    _Bool _isExtensionBeingLoadedAsPartOfSafariLaunch;
    NSArray *_injectedContentData;
    _Bool _parsedContentScriptsManifest;
    NSArray *_webAccessibleResources;
    _Bool _parsedWebAccessibleResources;
    NSString *_displayName;
    NSString *_displayShortName;
    NSString *_version;
    NSString *_displayVersion;
    NSString *_displayDescription;
    _Bool _parsedManifestDisplayStrings;
    _Bool _hasCachedPreferencesIcon;
    UIImage *_preferencesIcon;
    _Bool _hasCachedIcon;
    UIImage *_icon;
    _Bool _hasCachedToolbarImage;
    UIImage *_toolbarImage;
    NSArray *_commands;
    WBSWebExtensionLocalization *_localization;
    WBSWebExtensionSQLiteStore *_localStorage;
    WBSWebExtensionSQLiteStore *_syncedStorage;
    NSDictionary *_queuedInstallEventDetails;
    _Bool _shouldFireStartupEvent;
    _Bool _hasFirstNativeMessagePort;
    NSMutableArray *_queuedNativeMessages;
    NSArray *_declarativeNetRequestRulesets;
    _Bool _permissionsAreBeingUpdatedDueToAnExternalChange;
    NSDate *_lastBackgroundPageLoadDate;
    _Bool _requestedOptionalAccessToAllHosts;
    _Bool _hasLoadedPermissionsFromStorage;
    NSString *_extensionIdentifier;
    NSUUID *_uniqueIdentifier;
    NSString *_containingAppBundleIdentifier;
    NSUUID *_baseURIHost;
    WBSWebExtensionToolbarItem *_toolbarItem;
    WKContentWorld *_extensionWorldForInjectedContent;
    NSCountedSet *_backgroundPageEventListeners;
    NSDate *_dateOfLastMessageSentFromAnyPortInBackgroundPage;
}

+ (_Bool)_isShortVersion:(id)arg1 supportedInSafariVersion:(id)arg2;
+ (void)_mergeKeySupportDictionary:(id)arg1 intoDictionary:(id)arg2;
+ (id)_unsupportedValuesInArray:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (id)_manifestKeySupportForDictionary:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (id)_unsupportedKeysFromKeySupportDictionary:(id)arg1;
+ (id)unsupportedManifestKeysInDictionary:(id)arg1 withSupportedFeatures:(id)arg2 currentSafariShortVersion:(id)arg3;
+ (CDUnknownBlockType)_originPatternMatchesAnyPatternInAllowedPatterns:(id)arg1;
+ (id)unlocalizedManifestDictionaryFromData:(id)arg1 withExtensionIdentifier:(id)arg2 error:(id *)arg3;
+ (id)createWebExtensionError:(long long)arg1 underlyingError:(id)arg2;
+ (id)createWebExtensionError:(long long)arg1 customLocalizedDescription:(id)arg2;
+ (id)createWebExtensionError:(long long)arg1;
+ (_Bool)supportsSecureCoding;
+ (id)generatedBackgroundPageFilename;
+ (id)supportedWebExtensionFeaturesForManifestVersion:(unsigned long long)arg1;
+ (id)supportedPermissionsForExtensionConverter;
+ (id)supportedWebExtensionPatternSchemes;
+ (id)supportedPermissions;
- (void).cxx_destruct;
@property(nonatomic) _Bool hasLoadedPermissionsFromStorage; // @synthesize hasLoadedPermissionsFromStorage=_hasLoadedPermissionsFromStorage;
@property(retain, nonatomic) NSDate *dateOfLastMessageSentFromAnyPortInBackgroundPage; // @synthesize dateOfLastMessageSentFromAnyPortInBackgroundPage=_dateOfLastMessageSentFromAnyPortInBackgroundPage;
@property(retain, nonatomic) NSCountedSet *backgroundPageEventListeners; // @synthesize backgroundPageEventListeners=_backgroundPageEventListeners;
@property(retain, nonatomic) WKContentWorld *extensionWorldForInjectedContent; // @synthesize extensionWorldForInjectedContent=_extensionWorldForInjectedContent;
@property(retain, nonatomic) WBSWebExtensionToolbarItem *toolbarItem; // @synthesize toolbarItem=_toolbarItem;
@property(readonly, nonatomic) NSUUID *baseURIHost; // @synthesize baseURIHost=_baseURIHost;
@property(readonly, nonatomic) NSString *containingAppBundleIdentifier; // @synthesize containingAppBundleIdentifier=_containingAppBundleIdentifier;
@property(readonly, nonatomic) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly, nonatomic) NSString *extensionIdentifier; // @synthesize extensionIdentifier=_extensionIdentifier;
@property(nonatomic) _Bool requestedOptionalAccessToAllHosts; // @synthesize requestedOptionalAccessToAllHosts=_requestedOptionalAccessToAllHosts;
@property(readonly, nonatomic) WKWebView *backgroundWebView; // @synthesize backgroundWebView=_backgroundWebView;
@property(readonly, nonatomic) NSString *composedIdentifier; // @synthesize composedIdentifier=_composedIdentifier;
@property(readonly, nonatomic) NSExtension *extension; // @synthesize extension=_extension;
- (void)webViewWebContentProcessDidTerminate:(id)arg1;
- (void)webView:(id)arg1 didFinishNavigation:(id)arg2;
- (void)messageReceivedFromContainingAppWithName:(id)arg1 userInfo:(id)arg2;
- (void)nativePortConnectionOpened;
- (void)_fireStartupAndInstallEventsIfNecessaryForWebView:(id)arg1;
- (void)queueStartupEvent;
- (void)setQueuedInstallEventDetails:(id)arg1;
@property(readonly, nonatomic) NSSet *apiNamesPendingApproval;
@property(readonly, nonatomic) NSSet *urlsPendingApproval;
- (void)dispatchPendingWebsiteRequestsMatchingOriginPatterns:(id)arg1;
- (void)dispatchAllPendingWebsiteRequests;
- (void)dispatchExpiredPendingWebsiteRequests;
- (_Bool)hasPendingWebsiteRequests;
- (void)checkPermissionAndPromptIfNecessaryToAccessURLs:(id)arg1 inTab:(id)arg2 options:(unsigned long long)arg3 callingAPIName:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)checkPermissionAndPromptIfNecessaryToAccessURLs:(id)arg1 inTab:(id)arg2 callingAPIName:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)checkPermissionAndPromptIfNecessaryToAccessURL:(id)arg1 inTab:(id)arg2 options:(unsigned long long)arg3 callingAPIName:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)checkPermissionAndPromptIfNecessaryToAccessURL:(id)arg1 inTab:(id)arg2 callingAPIName:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (_Bool)hasMoreThanOneRequestedOriginNotAlreadyConfigured;
- (long long)permissionStateForURL:(id)arg1 inTab:(id)arg2 options:(unsigned long long)arg3;
- (long long)permissionStateForURL:(id)arg1 inTab:(id)arg2;
- (_Bool)hasPermissionToAccessURL:(id)arg1 inTab:(id)arg2;
- (_Bool)hasPermission:(id)arg1 inTab:(id)arg2;
- (void)removeTemporaryPermissionsForTab:(id)arg1;
- (_Bool)hasActiveUserGestureInTab:(id)arg1;
- (void)userGesturePerformedInTab:(id)arg1;
- (void)previouslyGrantedPermissionOriginsMayHaveBeenChangedExternally:(id)arg1 previouslyRevokedPermissionOrigins:(id)arg2;
- (void)_updateInjectedContentForRevokedOriginPattern:(id)arg1;
- (void)_removeInjectedContentForOriginPattern:(id)arg1;
- (void)_addInjectedContentForGrantedOriginPattern:(id)arg1;
- (void)_addInjectedContentForAllGrantedOrigins;
- (void)updateInjectedContentForChangedRevokedOriginPatterns:(id)arg1;
- (void)removeInjectedContentForRemovedOriginPatterns:(id)arg1;
- (void)addInjectedContentForGrantedOriginPatterns:(id)arg1;
- (void)_loadContentScriptsAndStyleSheets;
- (void)updateBackgroundPageClipboardPermission;
- (void)fireEvents:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fireEvent:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_queueEventToFireAfterBackgroundPageLoads:(CDUnknownBlockType)arg1;
- (void)loadBackgroundPageIfNecessaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)removeListener:(unsigned long long)arg1;
- (void)addListener:(unsigned long long)arg1;
- (void)scheduleBackgroundPageToUnload;
- (double)_delayForNonPersistentBackgroundPageBeforeUnloading;
- (void)_unloadBackgroundWebView;
- (void)_loadBackgroundWebView;
- (void)_loadBackgroundWebViewDuringExtensionLoad;
- (_Bool)webViewIsDisplayingFullPageExtensionContent:(id)arg1;
- (void)addWebViewToRelatedWebViewPool:(id)arg1;
@property(readonly, nonatomic) NSArray *allRelatedWebViews;
@property(readonly, nonatomic) WKWebView *relatedWebView;
@property(readonly, nonatomic) NSURL *backgroundPageURL;
- (void)moveLocalStorage:(CDUnknownBlockType)arg1;
- (void)_hidePermissionBanner;
- (void)_validateToolbarItemInAllWindows;
- (void)_unloadToolbarItem;
- (void)_loadToolbarItem;
- (_Bool)_applicationIsActive;
- (id)_backgroundWebViewConfiguration;
- (id)_defaultWebsiteDataStore;
- (long long)extensionSupportsSafariShortVersion:(id)arg1;
- (long long)extensionSupportsCurrentSafariVersion;
- (id)_maximumSafariVersionString;
- (id)_minimumSafariVersionString;
@property(readonly, nonatomic) NSString *contentSecurityPolicy;
- (void)_populatePermissionsAndOriginsPropertiesIfNeeded;
@property(copy, nonatomic) NSDictionary *revokedPermissionOrigins;
@property(copy, nonatomic) NSDictionary *grantedPermissionOrigins;
@property(readonly, nonatomic) NSSet *manifestOptionalPermissionOrigins;
@property(readonly, nonatomic) NSSet *manifestPermissionOrigins;
@property(readonly, nonatomic) NSSet *manifestAccessibleOrigins;
@property(copy, nonatomic) NSDictionary *revokedPermissions;
@property(copy, nonatomic) NSDictionary *grantedPermissions;
- (void)_removeExpiredRevokedPermissionsAndPostNotification:(_Bool)arg1;
- (void)_removeExpiredGrantedPermissionsAndPostNotification:(_Bool)arg1;
- (void)_removeExpiredPermissions:(id)arg1 origins:(id)arg2 notificationName:(id)arg3;
@property(readonly, nonatomic) NSSet *manifestOptionalPermissions;
@property(readonly, nonatomic) NSSet *manifestPermissions;
@property(readonly, nonatomic) NSSet *requestedPermissionOriginsNotAlreadyConfigured;
@property(readonly, nonatomic) NSSet *requestedPermissionsNotAlreadyConfigured;
@property(readonly, nonatomic) NSDictionary *configuredPermissionOrigins;
@property(readonly, nonatomic) NSDictionary *configuredPermissions;
- (id)_configuredDictionaryWithRequested:(id)arg1 granted:(id)arg2 revoked:(id)arg3;
@property(readonly, nonatomic) NSSet *currentAccessibleOrigins;
@property(readonly, nonatomic) NSSet *currentPermissionOrigins;
@property(readonly, nonatomic) NSSet *currentPermissions;
- (void)removeGrantedAndRevokedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(_Bool)arg3;
- (void)removeRevokedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(_Bool)arg3;
- (void)removeGrantedPermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(_Bool)arg3;
- (void)_removePermissions:(id)arg1 origins:(id)arg2 exactPatternMatchesOnly:(_Bool)arg3 fromPermissions:(id)arg4 fromOrigins:(id)arg5 notificationName:(id)arg6;
- (void)revokePermissions:(id)arg1 origins:(id)arg2 expirationDate:(id)arg3;
- (void)grantPermissions:(id)arg1 origins:(id)arg2 expirationDate:(id)arg3;
- (id)_userInfoDictionaryForPermissionsNotificationWithPermissions:(id)arg1 origins:(id)arg2;
- (_Bool)verifyRequestedPermissions:(id)arg1 origins:(id)arg2 errorMessage:(id *)arg3;
- (_Bool)hasPermissions:(id)arg1 origins:(id)arg2;
@property(readonly, nonatomic) _Bool requestsAccessToAllHosts;
- (_Bool)hasPermissionToAccessAllHosts;
- (_Bool)hasPermissionToAccessAllURLs;
- (long long)permissionStateForURL:(id)arg1 options:(unsigned long long)arg2;
- (long long)permissionStateForURL:(id)arg1;
- (_Bool)hasPermissionToAccessURL:(id)arg1;
- (_Bool)hasPermission:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_actionDictionary;
@property(readonly, nonatomic) NSDictionary *userVisiblePermissions;
@property(readonly, copy, nonatomic) NSArray *corsDisablingPatterns;
@property(readonly, nonatomic) NSURL *optionsPageURL;
- (id)extensionStateWithPreviousState:(id)arg1;
@property(readonly, nonatomic) NSArray *declarativeNetRequestRulesets;
@property(readonly, nonatomic) WBSWebExtensionAlarmState *alarmState; // @synthesize alarmState=_alarmState;
@property(readonly, nonatomic) WBSWebExtensionContextMenuItemManager *contextMenuItemManager; // @synthesize contextMenuItemManager=_contextMenuItemManager;
- (id)imageForBestIconInIconsDictionary:(id)arg1 idealPointSize:(long long)arg2 withBaseURI:(id)arg3 validateAndReadResourceHandler:(CDUnknownBlockType)arg4;
- (id)imageForBestIconInIconsDictionary:(id)arg1 idealPointSize:(long long)arg2;
- (id)pathForBestIconInIconsDictionary:(id)arg1 idealPixelSize:(long long)arg2;
- (id)bestIconSizeKeyInIconsDictionary:(id)arg1 idealPixelSize:(long long)arg2;
- (id)imageForPath:(id)arg1 withBaseURI:(id)arg2 validateAndReadResourceHandler:(CDUnknownBlockType)arg3;
@property(readonly, copy, nonatomic) NSString *toolbarPopupPath;
@property(readonly, copy, nonatomic) NSString *toolbarLabel;
- (id)toolbarImageWithBaseURI:(id)arg1 idealPointSize:(long long)arg2 validateAndReadResourceHandler:(CDUnknownBlockType)arg3;
- (id)extensionIconWithBaseURI:(id)arg1 idealPointSize:(long long)arg2 validateAndReadResourceHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) NSArray *commands;
@property(readonly, nonatomic) long long manifestVersion;
- (_Bool)shouldShowToolbarItemForTab:(id)arg1;
@property(readonly, nonatomic) _Bool hasCommands;
@property(readonly, nonatomic) _Bool hasPageAction;
@property(readonly, nonatomic) _Bool hasBrowserAction;
- (id)_createDeclarativeNetRequestErrors:(id)arg1;
- (void)_compileDeclarativeNetRequestRules:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)loadDeclarativeNetRequestRulesetsIfNeededWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_applyModificationsToDeclarativeNetRequestRulesetsFromUpdateEnabledRulesets;
- (void)_populateDeclarativeNetRequestPropertiesIfNeeded;
- (void)_populateDisplayStringsIfNeeded;
- (void)_populateContentScriptPropertiesIfNeeded;
- (void)_populateBackgroundPropertiesIfNeeded;
- (void)_recordManifestErrorIfNecessary:(id)arg1;
- (id)_containingAppIcon;
- (CDUnknownBlockType)_validateAndReadResourceBlock;
@property(readonly, nonatomic) _Bool shouldShowInWebsitePreferences;
- (void)unload;
- (void)load;
- (_Bool)canLoadWithErrorString:(id *)arg1;
- (_Bool)canLoad;
@property(readonly, nonatomic) WBSWebExtensionSQLiteStore *syncedStorage;
@property(readonly, nonatomic) WBSWebExtensionSQLiteStore *localStorage;
- (void)invalidateStorage;
- (void)populateAllPropertiesIfNeededToRecordManifestErrors;
@property(readonly, nonatomic) NSArray *manifestErrors;
- (void)_populateWebAccessibleResources;
@property(readonly, nonatomic) NSArray *webAccessibleResources;
@property(readonly, nonatomic) NSURL *newTabOverridePageURL;
- (_Bool)hasInjectedContentDataForURL:(id)arg1;
@property(readonly, nonatomic) NSArray *injectedContentData;
- (id)urlForOptionsPageWithBaseURI:(id)arg1;
@property(readonly, nonatomic) _Bool backgroundPageIsPersistent;
@property(readonly, nonatomic) NSString *generatedBackgroundPageContent;
- (id)urlForBackgroundPageWithBaseURI:(id)arg1;
@property(readonly, nonatomic) UIImage *toolbarImage;
@property(readonly, nonatomic) UIImage *icon;
@property(readonly, nonatomic) UIImage *preferencesIcon;
@property(readonly, nonatomic) NSString *version;
@property(readonly, nonatomic) NSString *processDisplayName;
@property(readonly, nonatomic) NSString *displayDescription;
@property(readonly, nonatomic) NSString *displayVersion;
@property(readonly, nonatomic) NSString *displayShortName;
@property(readonly, nonatomic) NSString *displayName;
@property(readonly, nonatomic) NSUUID *identifier;
@property(readonly, nonatomic) NSString *runtimeIdentifier;
@property(readonly, nonatomic) WBSWebExtensionLocalization *localization;
@property(readonly, copy, nonatomic) NSDictionary *manifest;
- (id)manifestDictionary;
@property(readonly, nonatomic) _Bool manifestParsedSuccessfully;
@property(readonly, copy) NSString *description;
- (id)initWithManifestDictionary:(id)arg1 extensionIdentifier:(id)arg2 uniqueIdentifier:(id)arg3;
- (id)initWithExtension:(id)arg1 extensionBundle:(id)arg2 extensionIdentifier:(id)arg3 uniqueIdentifier:(id)arg4 baseURIHost:(id)arg5;
- (id)initWithExtension:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

