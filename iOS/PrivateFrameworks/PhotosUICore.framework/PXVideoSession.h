//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <PhotosUICore/AVPlayerItemOutputPullDelegate-Protocol.h>
#import <PhotosUICore/ISChangeObserver-Protocol.h>
#import <PhotosUICore/ISWrappedAVPlayerDelegate-Protocol.h>
#import <PhotosUICore/PXChangeObserver-Protocol.h>

@class AVPlayerItem, AVPlayerItemVideoOutput, ISWrappedAVAudioSession, ISWrappedAVPlayer, NSError, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSObject, NSString, NSTimer, PXDisplayLink, PXNumberAnimator, PXVideoContentProvider;
@protocol OS_dispatch_queue, PXVideoSessionDelegate;

@interface PXVideoSession <ISChangeObserver, AVPlayerItemOutputPullDelegate, PXChangeObserver, ISWrappedAVPlayerDelegate>
{
    long long _tokenCounter;
    NSTimer *_playerTimeAdvancementTimer;
    void *_updateQueueIdentifier;
    NSObject<OS_dispatch_queue> *_audioSessionQueue;
    NSObject<OS_dispatch_queue> *_videoWorkQueue;
    NSObject<OS_dispatch_queue> *_stateQueue;
    NSObject<OS_dispatch_queue> *_updateQueue;
    NSMutableArray *_mainQueue_videoViewQueue;
    NSMutableDictionary *_stateQueue_presentationStatesByContext;
    NSMutableSet *_stateQueue_pixelBufferOutputTokens;
    NSMutableDictionary *_stateQueue_pixelBufferOutputSizesByTokens;
    NSMutableSet *_stateQueue_pixelBufferPausedOutputTokens;
    PXDisplayLink *_stateQueue_displayLink;
    id _stateQueue_playbackTimeRangeEndBoundaryObserver;
    long long _stateQueue_playState;
    NSString *_stateQueue_audioSessionCategory;
    unsigned long long _stateQueue_audioSessionCategoryOptions;
    NSString *_stateQueue_audioSessionMode;
    unsigned long long _stateQueue_audioSessionRouteSharingPolicy;
    _Bool _stateQueue_isUpdatingAudioSession;
    _Bool _stateQueue_buffering;
    long long _stateQueue_desiredPlayState;
    AVPlayerItemVideoOutput *_stateQueue_videoOutput;
    struct CGSize _stateQueue_videoOutputSize;
    _Bool _stateQueue_videoOutputIsReady;
    CDStruct_1b6d18a9 _stateQueue_videoDuration;
    AVPlayerItem *_stateQueue_currentPlayerItem;
    _Bool _stateQueue_isPlayerTimeAdvancing;
    long long _stateQueue_audioStatus;
    AVPlayerItem *_stateQueue_playerItem;
    CDStruct_e83c9415 _stateQueue_segmentTimeRangeOfOriginalVideo;
    _Bool _stateQueue_isPlayable;
    _Bool _stateQueue_isStalled;
    _Bool _stateQueue_isLoopingEnabled;
    CDStruct_e83c9415 _stateQueue_playbackTimeRange;
    float _stateQueue_volume;
    _Bool _stateQueue_shouldFadeVolumeChange;
    _Bool _stateQueue_seekToBeginningAtEnd;
    _Bool _stateQueue_isAtEnd;
    _Bool _stateQueue_isAtBeginning;
    struct CGAffineTransform _stateQueue_preferredTransform;
    struct CGSize _stateQueue_naturalSize;
    struct __CVBuffer *_stateQueue_currentPixelBuffer;
    _Bool _stateQueue_readyForSeeking;
    CDStruct_1b6d18a9 _stateQueue_currentTime;
    NSLock *_stateQueue_readyForSeekingLock;
    NSLock *_stateQueue_videoOutputReadyLock;
    _Bool _stateQueue_shouldDisableAutomaticPixelBufferUpdates;
    ISWrappedAVPlayer *_stateQueue_videoPlayer;
    id _stateQueue_playerTimeObservationToken;
    ISWrappedAVAudioSession *_stateQueue_audioSession;
    CDStruct_af00bf4e _updateQueue_updateFlags;
    long long _updateQueue_pendingPlayerItemSeekCount;
    _Bool _updateQueue_didFinishInitializingAudioSession;
    CDStruct_1b6d18a9 _updateQueue_lastPlayerTime;
    long long _updateQueue_playRequestIntervalSignpost;
    PXNumberAnimator *_mainQueue_volumeAnimator;
    _Bool _allowsExternalPlayback;
    _Bool _isUpdatingAudioSession;
    _Bool _isExpectingVideoView;
    id <PXVideoSessionDelegate> _delegate;
    PXVideoContentProvider *_contentProvider;
    NSError *_error;
    CDStruct_1b6d18a9 _currentTime;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool isExpectingVideoView; // @synthesize isExpectingVideoView=_isExpectingVideoView;
@property(nonatomic, setter=setUpdatingAudioSession:) _Bool isUpdatingAudioSession; // @synthesize isUpdatingAudioSession=_isUpdatingAudioSession;
@property(nonatomic) CDStruct_1b6d18a9 currentTime; // @synthesize currentTime=_currentTime;
@property(readonly, nonatomic) _Bool allowsExternalPlayback; // @synthesize allowsExternalPlayback=_allowsExternalPlayback;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) PXVideoContentProvider *contentProvider; // @synthesize contentProvider=_contentProvider;
@property(nonatomic) __weak id <PXVideoSessionDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_performBlockOnUpdateQueue:(CDUnknownBlockType)arg1;
- (void)_assertOnUpdateQueue;
- (_Bool)_isOnUpdateQueue;
@property(readonly, nonatomic) NSString *statusDescription;
@property(readonly, nonatomic) NSString *debugDetailedDescription;
- (void)_handleAudioSessionOutputVolumeDidChangeFromVolume:(float)arg1 toVolume:(float)arg2;
- (void)_handleAssetTracksDidLoadForAsset:(id)arg1;
- (void)_loadAssetTracksIfNeeded;
- (id)_playbackStateDescription;
- (void)_logPlaybackState;
- (void)_handleDidReachPlaybackTimeRangeEnd;
- (void)_updateQueue_decrementPendingPlayerItemSeekCount;
- (void)_handlePlayerItemSeekDidFinish;
- (void)_updateQueue_seekToPlaybackTimeRangeStartIfNeeded;
- (void)_removeAllVideoOutputs;
- (void)_updateAVPlayerPlayState;
- (void)_updateCurrentPlayerItem;
- (void)_updatePlayState;
- (void)_updateReadyForSeeking;
- (void)_updatePlayerVolume;
- (void)_updateVolumeAnimator;
- (void)_updatePlayerItemInPlayer;
- (void)_updatePlayerItem;
- (void)_updateStalled;
- (void)_updateBuffering;
- (void)_updateAtBeginningOrEndWithPlayerItemDuration:(CDStruct_1b6d18a9)arg1 success:(_Bool)arg2 error:(id)arg3;
- (void)_updateAtBeginningOrEnd;
@property(nonatomic) struct CGSize naturalSize;
@property(nonatomic) struct CGAffineTransform preferredTransform;
- (void)_updateTrackGeometry;
- (void)_updateAudioStatus;
- (void)_setPlayabilityFromAsset:(id)arg1;
- (void)_handlePlayabilityDidLoadForAsset:(id)arg1;
- (void)_updatePlayability;
- (void)_handlePlayerTimeAdvancementTimer:(id)arg1;
- (void)_avPlayerTimeDidChange:(CDStruct_1b6d18a9)arg1;
- (void)_handleTrackGeometryDidLoad;
- (id)pixelBufferOutputSizes;
- (unsigned long long)pixelBufferOutputTokenCount;
@property(nonatomic, setter=setAtEnd:) _Bool isAtEnd;
@property(nonatomic, setter=setAtBeginning:) _Bool isAtBeginning;
- (void)setDesiredPlayState:(long long)arg1;
@property(readonly, nonatomic) long long desiredPlayState;
- (void)setPlayState:(long long)arg1;
@property(readonly, nonatomic) long long playState;
- (void)setIsReadyForSeeking:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isReadyForSeeking;
@property(nonatomic, getter=isBuffering) _Bool buffering;
@property(nonatomic, setter=setStalled:) _Bool isStalled;
- (void)setPlayable:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isPlayable;
@property(readonly, nonatomic) _Bool isSegmentOfOriginalVideo;
@property(readonly, nonatomic) CDStruct_e83c9415 segmentTimeRangeOfOriginalVideo;
- (void)setPlayerItem:(id)arg1 segmentTimeRangeOfOriginalVideo:(CDStruct_e83c9415)arg2;
@property(readonly, nonatomic) AVPlayerItem *playerItem;
@property(nonatomic) long long audioStatus;
- (void)setPlayerTimeAdvancing:(_Bool)arg1;
- (_Bool)isPlayerTimeAdvancing;
- (void)setAllowsExternalPlayback:(_Bool)arg1;
- (void)setSeekToBeginningAtEnd:(_Bool)arg1;
@property(readonly, nonatomic) _Bool seekToBeginningAtEnd;
- (void)setPlaybackTimeRange:(CDStruct_e83c9415)arg1;
@property(readonly, nonatomic) CDStruct_e83c9415 playbackTimeRange;
- (void)setLoopingEnabled:(_Bool)arg1;
@property(readonly, nonatomic, getter=isLoopingEnabled) _Bool loopingEnabled;
@property(readonly, nonatomic) _Bool preventsSleepDuringVideoPlayback;
- (void)setPreventsSleepDuringVideoPlayback:(_Bool)arg1;
@property(readonly, nonatomic) float volume;
- (void)setVolume:(float)arg1 withFade:(_Bool)arg2;
- (void)setCurrentPlayerItem:(id)arg1;
- (id)currentPlayerItem;
@property(nonatomic) CDStruct_1b6d18a9 videoDuration;
@property(nonatomic) _Bool isVideoOutputReady;
- (void)setVideoOutput:(id)arg1 size:(struct CGSize)arg2;
@property(readonly, nonatomic) struct CGSize videoOutputSize;
@property(readonly, nonatomic) AVPlayerItemVideoOutput *videoOutput;
- (_Bool)_isAVPlayerPlayStateOutOfSync;
- (void)_updateDuration;
@property(nonatomic) struct __CVBuffer *currentPixelBuffer;
@property(retain, nonatomic) PXDisplayLink *displayLink;
- (void)_updateDisplayLinkState;
- (void)_videoWorkQueue_updateCurrentPixelBufferWithVideoOutput:(id)arg1 outputTime:(double)arg2;
- (void)_updateCurrentPixelBuffer;
- (void)_addOutput:(id)arg1 toPlayerItem:(id)arg2;
- (void)_updateVideoOutput;
- (void)_handleDisplayLink:(id)arg1;
- (id)_newVideoView;
- (void)setPlaybackTimeRangeEndBoundaryObserver:(id)arg1;
- (id)playbackTimeRangeEndBoundaryObserver;
- (void)_didFinishInitializingAudioSession;
- (void)_audioSessionQueue_initializeAudioSession;
- (void)_updateFromCurrentPresentationState;
- (void)_handleContentLoadingResult:(id)arg1;
- (void)_handleMediaServicesWereResetNotification:(id)arg1;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void *)arg3;
- (void)avPlayer:(id)arg1 itemDidPlayToEnd:(id)arg2;
- (void)outputMediaDataWillChange:(id)arg1;
- (id)mutableChangeObject;
- (void)didPerformChanges;
- (void)_performChanges:(CDUnknownBlockType)arg1;
- (void)performChanges:(CDUnknownBlockType)arg1;
- (void)setAudioSession:(id)arg1;
- (id)audioSession;
- (void)setVideoPlayer:(id)arg1;
@property(readonly, nonatomic) ISWrappedAVPlayer *videoPlayer;
- (void)setShouldDisableAutomaticPixelBufferUpdates:(_Bool)arg1;
@property(readonly, nonatomic) _Bool shouldDisableAutomaticPixelBufferUpdates;
- (void)_updateCurrenPixelBufferAfterSeekingToTime:(CDStruct_1b6d18a9)arg1 completionLock:(id)arg2;
- (void)seekToExactTime:(CDStruct_1b6d18a9)arg1 updatePixelBuffer:(_Bool)arg2 waitUntilComplete:(_Bool)arg3;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (struct CGImage *)generateSnapshotImage;
- (void)cancelLoading;
- (void)loadIfNeededWithPriority:(long long)arg1;
@property(readonly, nonatomic) unsigned long long audioSessionRouteSharingPolicy;
@property(readonly, nonatomic) NSString *audioSessionMode;
@property(readonly, copy, nonatomic) NSString *audioSessionCategory;
@property(readonly, nonatomic) unsigned long long audioSessionCategoryOptions;
- (void)_audioSessionQueue_updateAudioSessionWithCategory:(id)arg1 mode:(id)arg2 routeSharingPolicy:(unsigned long long)arg3 options:(unsigned long long)arg4;
- (void)setAudioSessionCategory:(id)arg1 mode:(id)arg2 routeSharingPolicy:(unsigned long long)arg3 options:(unsigned long long)arg4;
- (void)cancelPixelBufferOutputWithRequestIdentifier:(id)arg1;
- (void)requestPixelBufferOutputWithRequestIdentifier:(id)arg1 maxOutputSize:(struct CGSize)arg2;
- (void)recycleVideoView:(id)arg1;
- (id)dequeueVideoView;
- (void)_mainQueue_actuallyPrewarmVideoView;
- (void)prewarmVideoView;
- (void)dealloc;
- (id)performFinalCleanup;
- (void)performChanges:(CDUnknownBlockType)arg1 withPresentationContext:(long long)arg2 presenter:(void *)arg3;
- (void)leavePresentationContext:(long long)arg1 presenter:(void *)arg2;
- (void)enterPresentationContext:(long long)arg1 presenter:(void *)arg2;
- (id)_stateQueue_newPresentationStateFromCurrentWithPresenter:(void *)arg1;
- (id)init;
- (id)initWithContentProvider:(id)arg1 videoPlayer:(id)arg2;
- (id)initWithContentProvider:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

