//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class BMAprioriPatternMiner, BMBasketExtractor, BMEventExtractor, BMMiningTaskConfig, BMRuleExtractor, NSDate, NSMutableDictionary, NSSet, NSString, NSURL;
@protocol BMMiningTaskDelegate, BMPatternMiner;

@interface BMMiningTask : NSObject
{
    id <BMMiningTaskDelegate> _delegate;
    NSString *_domain;
    NSMutableDictionary *_coreAnalyticsDict;
    long long _completionStatus;
    unsigned long long _rulePersistBatchSize;
    unsigned long long _maxItemsetSize;
    NSURL *_storageURL;
    double _miningInterval;
    NSDate *_start;
    BMEventExtractor *_eventExtractor;
    BMBasketExtractor *_basketExtractor;
    BMAprioriPatternMiner<BMPatternMiner> *_patternMiner;
    BMRuleExtractor *_ruleExtractor;
    NSSet *_types;
    NSSet *_targetTypes;
    double _samplingInterval;
    unsigned long long _absoluteSupport;
    double _confidence;
    BMMiningTaskConfig *_bmMiningTaskConfig;
}

+ (_Bool)supportsTaskSpecificEvents;
+ (id)supergreenMiningTask;
- (void).cxx_destruct;
@property(retain, nonatomic) BMMiningTaskConfig *bmMiningTaskConfig; // @synthesize bmMiningTaskConfig=_bmMiningTaskConfig;
@property(readonly, nonatomic) double confidence; // @synthesize confidence=_confidence;
@property(readonly, nonatomic) unsigned long long absoluteSupport; // @synthesize absoluteSupport=_absoluteSupport;
@property(readonly, nonatomic) double samplingInterval; // @synthesize samplingInterval=_samplingInterval;
@property(readonly, copy, nonatomic) NSSet *targetTypes; // @synthesize targetTypes=_targetTypes;
@property(readonly, copy, nonatomic) NSSet *types; // @synthesize types=_types;
@property(retain, nonatomic) BMRuleExtractor *ruleExtractor; // @synthesize ruleExtractor=_ruleExtractor;
@property(retain, nonatomic) BMAprioriPatternMiner<BMPatternMiner> *patternMiner; // @synthesize patternMiner=_patternMiner;
@property(retain, nonatomic) BMBasketExtractor *basketExtractor; // @synthesize basketExtractor=_basketExtractor;
@property(retain, nonatomic) BMEventExtractor *eventExtractor; // @synthesize eventExtractor=_eventExtractor;
@property(copy, nonatomic) NSDate *start; // @synthesize start=_start;
@property(readonly, nonatomic) double miningInterval; // @synthesize miningInterval=_miningInterval;
@property(readonly, copy, nonatomic) NSURL *storageURL; // @synthesize storageURL=_storageURL;
@property(nonatomic) unsigned long long maxItemsetSize; // @synthesize maxItemsetSize=_maxItemsetSize;
@property(readonly, nonatomic) unsigned long long rulePersistBatchSize; // @synthesize rulePersistBatchSize=_rulePersistBatchSize;
@property(nonatomic) long long completionStatus; // @synthesize completionStatus=_completionStatus;
@property(retain, nonatomic) NSMutableDictionary *coreAnalyticsDict; // @synthesize coreAnalyticsDict=_coreAnalyticsDict;
@property(readonly, copy, nonatomic) NSString *domain; // @synthesize domain=_domain;
@property(nonatomic) __weak id <BMMiningTaskDelegate> delegate; // @synthesize delegate=_delegate;
- (void)terminateEarly;
- (void)mine;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)finishWithCompletionStatus:(long long)arg1;
- (void)finishWithError:(id)arg1;
- (id)init;
- (id)initWithStorageURL:(id)arg1 types:(id)arg2 targetTypes:(id)arg3 samplingInterval:(double)arg4 absoluteSupport:(unsigned long long)arg5 confidence:(double)arg6 rulePersistBatchSize:(unsigned long long)arg7 miningInterval:(double)arg8;
- (id)initWithStorageURL:(id)arg1 types:(id)arg2 targetTypes:(id)arg3 samplingInterval:(double)arg4 absoluteSupport:(unsigned long long)arg5 confidence:(double)arg6;
- (id)initWithStorageURL:(id)arg1 types:(id)arg2 targetTypes:(id)arg3 samplingInterval:(double)arg4 absoluteSupport:(unsigned long long)arg5 confidence:(double)arg6 rulePersistBatchSize:(unsigned long long)arg7;
- (id)initWithDomain:(id)arg1 types:(id)arg2 targetTypes:(id)arg3 samplingInterval:(double)arg4 absoluteSupport:(unsigned long long)arg5 confidence:(double)arg6 rulePersistBatchSize:(unsigned long long)arg7 miningInterval:(double)arg8;

@end

