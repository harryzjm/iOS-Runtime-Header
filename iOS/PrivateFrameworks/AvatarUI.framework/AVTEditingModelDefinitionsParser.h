//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVTEditingModelColors, AVTUILogger, NSData, NSDictionary, NSError, NSString;

@interface AVTEditingModelDefinitionsParser : NSObject
{
    unsigned long long _platform;
    NSString *_platformDictionaryKey;
    AVTUILogger *_logger;
    NSData *_plistData;
    NSError *_error;
    AVTEditingModelColors *_colorCache;
    NSDictionary *_neutralMemojiPresetsIdentifierPerCategory;
    NSDictionary *_presetPickersDefinitions;
    NSDictionary *_colorPickersDefinitions;
    NSDictionary *_multicolorPickersDefinitions;
}

+ (id)localizedString:(id)arg1;
+ (unsigned long long)defaultSortingOptionForPlatform:(unsigned long long)arg1;
+ (id)sortedModelRows:(id)arg1 forPlatform:(unsigned long long)arg2;
+ (id)platformDictionaryKeyForPlatform:(unsigned long long)arg1;
+ (id)dataFromBundle;
+ (id)dataFromAvatarKit;
+ (id)errorWithDescription:(id)arg1 underlyingError:(id)arg2;
- (void).cxx_destruct;
@property(retain, nonatomic) NSDictionary *multicolorPickersDefinitions; // @synthesize multicolorPickersDefinitions=_multicolorPickersDefinitions;
@property(retain, nonatomic) NSDictionary *colorPickersDefinitions; // @synthesize colorPickersDefinitions=_colorPickersDefinitions;
@property(retain, nonatomic) NSDictionary *presetPickersDefinitions; // @synthesize presetPickersDefinitions=_presetPickersDefinitions;
@property(retain, nonatomic) NSDictionary *neutralMemojiPresetsIdentifierPerCategory; // @synthesize neutralMemojiPresetsIdentifierPerCategory=_neutralMemojiPresetsIdentifierPerCategory;
@property(retain, nonatomic) AVTEditingModelColors *colorCache; // @synthesize colorCache=_colorCache;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) NSData *plistData; // @synthesize plistData=_plistData;
@property(readonly, nonatomic) AVTUILogger *logger; // @synthesize logger=_logger;
@property(readonly, nonatomic) NSString *platformDictionaryKey; // @synthesize platformDictionaryKey=_platformDictionaryKey;
@property(readonly, nonatomic) unsigned long long platform; // @synthesize platform=_platform;
- (id)coreModelRowOptionsFromOptionsDictionary:(id)arg1;
- (id)coreModelRowFromRowDictionary:(id)arg1 availableTags:(id)arg2 usedTags:(id)arg3 defaultOptions:(id)arg4;
- (id)applyPlatformOverrideForDictionary:(id)arg1;
- (id)gatherAllTagsFromPresets:(id)arg1;
- (id)coreModelColorsForColorDefinitions:(id)arg1 paletteSettingKind:(CDStruct_597dd055)arg2;
- (id)coreModelColorsForPaletteSettingKind:(CDStruct_597dd055)arg1;
- (id)coreModelPresetsForCategory:(long long)arg1;
- (id)neutralMemojiPresetIdentifierForCategory:(long long)arg1;
- (_Bool)validateForColorPicker:(id)arg1 colorPaletteCategory:(id)arg2 error:(id *)arg3;
- (_Bool)validateForMulticolorPicker:(id)arg1 subpickers:(id)arg2 error:(id *)arg3;
- (_Bool)validateForCategoryWithEnumValue:(id)arg1 pickers:(id)arg2;
- (id)multicolorAuxiliaryPickerForDictionary:(id)arg1 error:(id *)arg2;
- (id)localizedSubtitlesForSubtitles:(id)arg1 subpickerCount:(long long)arg2;
- (id)coreModelMulticolorPickerForDictionary:(id)arg1 groupPickerCategory:(long long)arg2 defaultOptions:(id)arg3 parsedPickerKeys:(id)arg4 error:(id *)arg5;
- (id)coreModelColorsRowForColorPickerDictionary:(id)arg1 settingDestination:(long long)arg2 inCategory:(long long)arg3 defaultOptions:(id)arg4;
- (id)pairingFromDictionary:(id)arg1;
- (id)coreModelCategoryFromCategoryDictionary:(id)arg1 parsedPickerKeys:(id)arg2;
- (id)coreModelCategoryFromCategoryDictionary:(id)arg1;
- (id)symbolNamesFromGroupDictionary:(id)arg1;
- (id)coreModelGroupFromGroupDictionary:(id)arg1;
- (id)parseCoreModelFromGroupsDefinitions:(id)arg1 colorDefaultsDefinitions:(id)arg2;
- (void)initalizeColorCacheIfNeeded;
- (id)decodePropertyListObjects:(id)arg1;
- (void)parseWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initWithPlistData:(id)arg1 forPlatform:(unsigned long long)arg2 logger:(id)arg3;
- (id)initForPlatform:(unsigned long long)arg1 withLogger:(id)arg2;

@end

