//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CSAudioRecordContext, CSAudioRecordDeviceInfo, CSSiriAudioFileWriter, CSSiriRecordingInfo, NSDictionary, NSMutableDictionary, NSMutableSet, NSString, NSURL, NSUUID;
@protocol AFRelinquishableAssertion, OS_dispatch_group, OS_dispatch_queue;

@interface CSSiriSpeechRecordingContext : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _isCurrent;
    NSString *_startSpeechId;
    NSString *_selectedResultCandidateId;
    CSAudioRecordContext *_audioRecordContext;
    CSAudioRecordDeviceInfo *_audioRecordDeviceInfo;
    NSDictionary *_voiceTriggerInfo;
    NSDictionary *_recordingSettings;
    CSSiriRecordingInfo *_recordingInfo;
    CSSiriAudioFileWriter *_audioFileWriter;
    NSURL *_recordedAudioFileURL;
    id <AFRelinquishableAssertion> _startRecordingAudioSessionAssertion;
    id <AFRelinquishableAssertion> _twoShotDetectionAudioSessionAssertion;
    NSObject<OS_dispatch_group> *_recordingAudioGroup;
    _Bool _voiceIdentificationTraining_allowsWithoutResultCandidate;
    NSMutableSet *_voiceIdentificationTraining_allowedResultCandidateIds;
    NSMutableDictionary *_voiceIdentificationTraining_resultCandidateToSharedUserIdMap;
    NSUUID *_turnIdentifier;
    NSString *_voiceIdentificationTraining_withoutResultCandidateSharedUserId;
    _Bool _stopRecordingInstrumented;
    _Bool _wantsRecordedAudioBufferLogs;
    NSString *_sessionUUID;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool wantsRecordedAudioBufferLogs; // @synthesize wantsRecordedAudioBufferLogs=_wantsRecordedAudioBufferLogs;
@property(readonly, copy, nonatomic) NSString *sessionUUID; // @synthesize sessionUUID=_sessionUUID;
- (void)_removeRecordedAudio;
- (void)_donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:(CDUnknownBlockType)arg1;
- (void)_didResignCurrent;
- (void)_didBecomeCurrent;
- (id)_createRequestLinkInfo:(id)arg1 component:(int)arg2;
- (void)emitRequestLinkEventForMHUUID:(id)arg1;
- (void)instrumentStopRecordingForEndpointType:(int)arg1;
- (void)instrumentSiriCueForAlertType:(long long)arg1;
- (void)_instrumentSiriCue:(int)arg1;
- (void)instrumentSiriCue:(int)arg1;
- (void)_finalizeAudioFileWriterWithCompletion:(CDUnknownBlockType)arg1;
- (void)_initializeAudioFileWriterWithAudioStreamBasicDescription:(const struct AudioStreamBasicDescription *)arg1;
- (void)endRecordingAudio;
- (void)appendRecordedAudioBuffer:(id)arg1;
- (void)beginRecordingAudioWithAudioStreamBasicDescription:(const struct AudioStreamBasicDescription *)arg1;
- (void)relinquishAudioSessionAssertionsWithError:(id)arg1;
- (void)relinquishAudioSessionAssertionsWithContext:(id)arg1;
- (void)didStopRecordingWithError:(id)arg1;
- (void)willStopRecordingAtHostTime:(unsigned long long)arg1;
- (void)didDetectTwoShotWithAudioActivationInfo:(id)arg1 atTime:(double)arg2;
- (void)willPrepareAndStartRecordingWithAudioActivationInfo:(id)arg1;
- (void)updateRecordingSettings:(id)arg1;
- (void)updateRecordingInfo:(id)arg1;
- (void)updateVoiceTriggerInfo:(id)arg1;
- (void)updateAudioRecordDeviceInfo:(id)arg1;
- (void)updateAudioRecordContext:(id)arg1;
- (void)acquireRecordedAudioWithHandler:(CDUnknownBlockType)arg1;
- (void)getAudioRecordRouteAndDeviceIdentificationWithCompletion:(CDUnknownBlockType)arg1;
- (void)updateAccessToRecordedAudioForVoiceIdentificationTraining:(_Bool)arg1 forResultCandidateId:(id)arg2 sharedUserId:(id)arg3;
- (void)updateSelectedResultCandidateId:(id)arg1;
- (void)updateStartSpeechId:(id)arg1;
- (void)resignCurrent;
- (void)becomeCurrent;
- (id)initWithSessionUUID:(id)arg1 turnIdentifier:(id)arg2;
- (id)description;
- (void)dealloc;

@end

