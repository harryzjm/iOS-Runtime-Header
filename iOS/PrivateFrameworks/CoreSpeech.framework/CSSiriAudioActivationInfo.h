//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AFClientConfiguration, AFExperimentContext, AFLanguageDetectionUserContext, AFSpeechRecordingAlertPolicy, NSString, NSUUID;

@interface CSSiriAudioActivationInfo : NSObject
{
    long long _activationMode;
    long long _storedActivationMode;
    long long _csAudioRecordType;
    AFClientConfiguration *_currentClientConfiguration;
    _Bool _suppressStartAlert;
    AFExperimentContext *_experimentContext;
    _Bool _isActivated;
    float _activeMediaPlaybackVolume;
    _Bool _useBorealisBuffer;
    _Bool _usePrelistening;
    _Bool _isOnPhoneCall;
    _Bool _hasPlayedStartAlert;
    _Bool _isSpokenNotification;
    long long _speechEvent;
    long long _audioAlertStyle;
    NSString *_deviceIdentifier;
    double _activationSystemUptime;
    unsigned long long _activationHostTime;
    unsigned long long _buttonDownHostTime;
    unsigned long long _voiceTriggerEndHostTime;
    long long _speechRecordingMode;
    long long _speechEndpointerOperationMode;
    AFSpeechRecordingAlertPolicy *_speechRecordingAlertPolicy;
    long long _presentationMode;
    AFLanguageDetectionUserContext *_languageDetectionUserContext;
    long long _dictationInputOrigin;
    NSUUID *_turnIdentifier;
    NSString *_applicationDisplayName;
    NSString *_applicationBundleIdentifier;
    unsigned long long _dictationVoiceTriggerAbsStartSampleId;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) unsigned long long dictationVoiceTriggerAbsStartSampleId; // @synthesize dictationVoiceTriggerAbsStartSampleId=_dictationVoiceTriggerAbsStartSampleId;
@property(readonly, copy, nonatomic) NSString *applicationBundleIdentifier; // @synthesize applicationBundleIdentifier=_applicationBundleIdentifier;
@property(readonly, copy, nonatomic) NSString *applicationDisplayName; // @synthesize applicationDisplayName=_applicationDisplayName;
@property(readonly, copy, nonatomic) NSUUID *turnIdentifier; // @synthesize turnIdentifier=_turnIdentifier;
@property(readonly, nonatomic) long long dictationInputOrigin; // @synthesize dictationInputOrigin=_dictationInputOrigin;
@property(readonly, copy, nonatomic) AFLanguageDetectionUserContext *languageDetectionUserContext; // @synthesize languageDetectionUserContext=_languageDetectionUserContext;
@property(readonly, nonatomic) _Bool isSpokenNotification; // @synthesize isSpokenNotification=_isSpokenNotification;
@property(readonly, nonatomic) long long presentationMode; // @synthesize presentationMode=_presentationMode;
@property(readonly, nonatomic) AFSpeechRecordingAlertPolicy *speechRecordingAlertPolicy; // @synthesize speechRecordingAlertPolicy=_speechRecordingAlertPolicy;
@property(readonly, nonatomic) long long speechEndpointerOperationMode; // @synthesize speechEndpointerOperationMode=_speechEndpointerOperationMode;
@property(readonly, nonatomic) _Bool hasPlayedStartAlert; // @synthesize hasPlayedStartAlert=_hasPlayedStartAlert;
@property(readonly, nonatomic) _Bool isOnPhoneCall; // @synthesize isOnPhoneCall=_isOnPhoneCall;
@property(nonatomic) long long speechRecordingMode; // @synthesize speechRecordingMode=_speechRecordingMode;
@property(readonly, nonatomic) unsigned long long voiceTriggerEndHostTime; // @synthesize voiceTriggerEndHostTime=_voiceTriggerEndHostTime;
@property(readonly, nonatomic) unsigned long long buttonDownHostTime; // @synthesize buttonDownHostTime=_buttonDownHostTime;
@property(readonly, nonatomic) unsigned long long activationHostTime; // @synthesize activationHostTime=_activationHostTime;
@property(readonly, nonatomic) double activationSystemUptime; // @synthesize activationSystemUptime=_activationSystemUptime;
@property(readonly, copy, nonatomic) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
@property(readonly, nonatomic) long long audioAlertStyle; // @synthesize audioAlertStyle=_audioAlertStyle;
@property(readonly, nonatomic) _Bool usePrelistening; // @synthesize usePrelistening=_usePrelistening;
@property(readonly, nonatomic) _Bool useBorealisBuffer; // @synthesize useBorealisBuffer=_useBorealisBuffer;
@property(readonly, nonatomic) long long speechEvent; // @synthesize speechEvent=_speechEvent;
- (id)_audioSessionActiveDelayServerConfiguration;
- (id)_audioSessionActiveDelayOverride;
- (id)_audioSessionActiveDelayUserPerceptionWithType:(unsigned long long)arg1;
- (id)_audioSessionActiveDelayCoreSpeechWithType:(unsigned long long)arg1;
- (long long)_audioAlertStyleForListenAfterSpeakingWithRecordRoute:(id)arg1 playbackRoute:(id)arg2 echoCancellation:(_Bool)arg3 useDeviceSpeakerForTTS:(long long)arg4;
- (_Bool)_isVibrationDisabledInAccessibility;
- (_Bool)_isVoiceOverTouchEnabledInAccessibility;
- (id)dateByAddingTimeIntervalSinceActivation:(double)arg1;
- (id)audioSessionActivationTargetDate;
- (long long)overrideStartingAlertBeepSoundID;
- (_Bool)isVoiceOverTouchEnabled;
- (long long)twoShotPromptTypeForRecordRoute:(id)arg1 playbackRoute:(id)arg2;
- (_Bool)shouldSuppressRecordingErrorAlert;
- (_Bool)shouldSuppressRecordingStopAlert;
- (_Bool)shouldPlayAlertIfNotPrelistening;
- (_Bool)shouldExplicitlyPlayAlertOnStart;
- (_Bool)shouldUseVoiceTriggerAnalyzerStyle;
- (_Bool)canEnterTwoShot;
- (_Bool)_eventIsTVRemote;
- (_Bool)_eventIsRaiseToSpeak;
- (_Bool)_eventIsVoiceTrigger;
- (_Bool)_canUseZLL;
- (_Bool)canGetPCMStream;
- (_Bool)requiresBorealisConsumerCheck;
- (_Bool)shouldTreatTimeoutAsHardEndpoint;
- (_Bool)canPrepareWithoutInterruption;
- (_Bool)canPrewarm;
- (void)endUpdateToPostVoiceWithContext:(unsigned long long)arg1 success:(_Bool)arg2;
- (unsigned long long)beginUpdateToPostVoice;
- (_Bool)needsUpdateToPostVoiceMode;
- (void)audioSessionActivated;
- (long long)audioAlertStyleForRecordRoute:(id)arg1 playbackRoute:(id)arg2;
- (_Bool)shouldOverrideRecordingStartingAlertBehaviorForAlertStyle:(long long)arg1;
- (id)_alertBehaviorForRecordRoute:(id)arg1 playbackRoute:(id)arg2 attemptsToUsePastDataBufferFrames:(_Bool)arg3;
- (id)startRecordingSettingsWithRecordRoute:(id)arg1 playbackRoute:(id)arg2;
- (long long)_csAudioRecordTypeForSpeechEvent:(long long)arg1 useBorealisBuffer:(_Bool)arg2 currentClientConfiguration:(id)arg3;
- (_Bool)_isRequestFromSpokenNotification:(long long)arg1;
- (long long)_csAudioRecordTypeForSpeechEvent:(long long)arg1 currentClientConfiguration:(id)arg2;
- (id)recordContextForSpeechEvent:(long long)arg1;
- (id)recordContext;
- (long long)_csAudioRecordType;
- (long long)_activationMode;
- (id)recordSettingsWithOptions:(unsigned long long)arg1;
- (id)_appendDictationApplicationInfoSettings:(id)arg1;
- (long long)event;
- (void)setClientConfiguration:(id)arg1;
- (void)setSpeechRequestOptions:(id)arg1 currentActivationInfo:(id)arg2;
- (id)initWithSpeechRecordingMode:(long long)arg1 clientConfiguration:(id)arg2 experimentContext:(id)arg3;
- (id)description;

@end

