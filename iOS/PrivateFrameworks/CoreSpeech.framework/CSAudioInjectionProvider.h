//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreSpeech/CSAudioInjectionEngineDelegate-Protocol.h>

@class CSAudioInjectionDevice, CSAudioInjectionEngine, NSHashTable, NSMutableArray, NSMutableDictionary, NSObject, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface CSAudioInjectionProvider <CSAudioInjectionEngineDelegate>
{
    float _didStartDelayInSeconds;
    NSHashTable *_observers;
    NSObject<OS_dispatch_queue> *_queue;
    NSUUID *_uuid;
    NSMutableArray *_connectedDevices;
    CSAudioInjectionDevice *_builtInDevice;
    CSAudioInjectionDevice *_bundleTvRemote;
    CSAudioInjectionEngine *_builtInAudioInjectionEngine;
    NSMutableDictionary *_audioInjectionEngines;
    unsigned long long _latestPluginStreamId;
    unsigned long long _activateStartTime;
    unsigned long long _activateEndTime;
    unsigned long long _deactivateStartTime;
    unsigned long long _deactivateEndTime;
}

+ (void)createSharedAudioSession;
+ (id)defaultInjectionProvider;
- (void).cxx_destruct;
@property(nonatomic) unsigned long long deactivateEndTime; // @synthesize deactivateEndTime=_deactivateEndTime;
@property(nonatomic) unsigned long long deactivateStartTime; // @synthesize deactivateStartTime=_deactivateStartTime;
@property(nonatomic) unsigned long long activateEndTime; // @synthesize activateEndTime=_activateEndTime;
@property(nonatomic) unsigned long long activateStartTime; // @synthesize activateStartTime=_activateStartTime;
@property(nonatomic) unsigned long long latestPluginStreamId; // @synthesize latestPluginStreamId=_latestPluginStreamId;
@property(retain, nonatomic) NSMutableDictionary *audioInjectionEngines; // @synthesize audioInjectionEngines=_audioInjectionEngines;
@property(retain, nonatomic) CSAudioInjectionEngine *builtInAudioInjectionEngine; // @synthesize builtInAudioInjectionEngine=_builtInAudioInjectionEngine;
@property(retain, nonatomic) CSAudioInjectionDevice *bundleTvRemote; // @synthesize bundleTvRemote=_bundleTvRemote;
@property(retain, nonatomic) CSAudioInjectionDevice *builtInDevice; // @synthesize builtInDevice=_builtInDevice;
@property(retain, nonatomic) NSMutableArray *connectedDevices; // @synthesize connectedDevices=_connectedDevices;
@property(retain, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property(nonatomic) float didStartDelayInSeconds; // @synthesize didStartDelayInSeconds=_didStartDelayInSeconds;
- (void)audioEngineAudioChunkForTvAvailable:(id)arg1 audioChunk:(id)arg2;
- (void)audioEngineDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (void)audioEngineBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5;
- (void)audioEngineDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(_Bool)arg3 error:(id)arg4;
- (void)configureAlertBehavior:(id)arg1 audioStreamHandleId:(unsigned long long)arg2;
- (id)metrics;
- (void)enableMiniDucking:(_Bool)arg1;
- (id)voiceTriggerInfoWithRecordDeviceIndicator:(id)arg1;
- (_Bool)isSessionCurrentlyActivated;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (void)updateMeters;
- (void)setMeteringEnabled:(_Bool)arg1;
- (unsigned long long)alertStartTime;
- (_Bool)playAlertSoundForType:(long long)arg1 recordDevideIndicator:(id)arg2;
- (_Bool)playRecordStartingAlertAndResetEndpointerFromStream:(unsigned long long)arg1;
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (id)playbackRoute;
- (_Bool)duckOthersOption;
- (void)setDuckOthersOption:(_Bool)arg1;
- (_Bool)setRecordMode:(long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;
- (_Bool)deactivateAudioSession:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)activateAudioSessionWithReason:(unsigned long long)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)prewarmAudioSessionWithStreamHandleId:(unsigned long long)arg1 error:(id *)arg2;
- (_Bool)isNarrowBandWithStreamHandleId:(unsigned long long)arg1;
- (float)recordingSampleRateWithStreamHandleId:(unsigned long long)arg1;
- (id)recordSettingsWithStreamHandleId:(unsigned long long)arg1;
- (id)audioDeviceInfoWithStreamHandleId:(unsigned long long)arg1;
- (id)recordDeviceInfoWithStreamHandleId:(unsigned long long)arg1;
- (id)recordRouteWithRecordDeviceIndicator:(id)arg1;
- (_Bool)isRecordingWithRecordDeviceIndicator:(id)arg1;
- (_Bool)stopAudioStreamWithRecordDeviceIndicator:(id)arg1 error:(id *)arg2;
- (_Bool)startAudioStreamWithOption:(id)arg1 recordDeviceIndicator:(id)arg2 error:(id *)arg3;
- (_Bool)prepareAudioStreamRecord:(id)arg1 recordDeviceIndicator:(id)arg2 error:(id *)arg3;
- (_Bool)setCurrentContext:(id)arg1 streamHandleId:(unsigned long long)arg2 error:(id *)arg3;
- (void)setContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setAudioSessionEventDelegate:(id)arg1;
- (void)setAudioServerCrashEventDelegate:(id)arg1;
- (void)unregisterObserver:(id)arg1;
- (void)registerObserver:(id)arg1;
- (void)willDestroy;
- (void)disconnectDevice:(id)arg1;
- (void)connectDevice:(id)arg1;
- (id)primaryInputDevice;
- (void)stop;
- (void)_createSpeechDetectionVADIfNeeded;
- (void)_tearDownSpeechDetectionVADIfNeeded;
- (void)_connectPluginDevice:(id)arg1;
- (void)start;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

