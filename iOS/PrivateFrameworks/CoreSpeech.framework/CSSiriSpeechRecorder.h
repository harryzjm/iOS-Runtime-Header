//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CoreSpeech/CSAudioSessionControllerDelegate-Protocol.h>
#import <CoreSpeech/CSEndpointAnalyzerDelegate-Protocol.h>
#import <CoreSpeech/CSLanguageDetectorDelegate-Protocol.h>
#import <CoreSpeech/CSSiriAcousticFingerprinterDelegate-Protocol.h>
#import <CoreSpeech/CSSiriSpeechCapturing-Protocol.h>
#import <CoreSpeech/CSSpeakerIdentificationDelegate-Protocol.h>
#import <CoreSpeech/CSSpeechControllerDelegate-Protocol.h>

@class AFBluetoothWirelessSplitterSessionStateObserver, AFClientConfiguration, AFExperimentContext, AFSpeechSynthesisRecord, AFWatchdogTimer, CSAudioRecordDeviceInfo, CSAudioSessionController, CSEndpointDelayReporter, CSEndpointerMetrics, CSSiriAcousticFingerprinter, CSSiriAudioActivationInfo, CSSiriAudioFileWriter, CSSiriAudioPlaybackService, CSSiriSpeechRecordingContext, CSSpeechController, NSArray, NSFileHandle, NSMutableDictionary, NSString, NSUUID, NSXPCConnection;
@protocol CSEndpointAnalyzer, CSSiriSpeechCapturingDelegate, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface CSSiriSpeechRecorder : NSObject <CSSiriAcousticFingerprinterDelegate, CSSpeechControllerDelegate, CSEndpointAnalyzerDelegate, CSLanguageDetectorDelegate, CSSpeakerIdentificationDelegate, CSAudioSessionControllerDelegate, CSSiriSpeechCapturing>
{
    id <CSSiriSpeechCapturingDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _isSpeechControllerInitialized;
    CSSpeechController *_speechController;
    CSAudioSessionController *_audioSessionController;
    CSSiriAudioPlaybackService *_audioPlaybackService;
    long long _packetCount;
    long long _speechCapturingMode;
    long long _recordingAlertsConfiguration;
    NSObject<OS_dispatch_source> *_extendedEndpointTimer;
    id <CSEndpointAnalyzer> _endpointAnalyzer;
    CSSiriSpeechRecordingContext *_context;
    CSSiriAudioActivationInfo *_currentActivationInfo;
    CSSiriAudioActivationInfo *_pendingActivationInfo;
    CSAudioRecordDeviceInfo *_currentRecordDeviceInfo;
    NSString *_currentPlaybackRoute;
    _Bool _fingerprintingEnabled;
    CSSiriAcousticFingerprinter *_fingerprinter;
    long long _audioFileType;
    _Bool _needsAVVCLPCMCallbacks;
    _Bool _hasReceivedEmptyLPCMRecordBuffer;
    NSFileHandle *_audioFileHandle;
    CSSiriAudioFileWriter *_audioFileWriter;
    CSSiriAudioFileWriter *_audioLogggingFileWriter;
    long long _startEvent;
    long long _recordingState;
    long long _endpointerOperationMode;
    _Bool _didReceiveFirstBuffer;
    _Bool _didReceiveLastBuffer;
    _Bool _didDetectStartpoint;
    _Bool _didDetectEndpoint;
    _Bool _didEnterTwoShotMode;
    _Bool _didFakeTwoShotWithAlert;
    NSUUID *_fakeTwoShotTTSPromptUUID;
    _Bool _serverDidRecognizeSpeech;
    _Bool _fingerprintWasRecognized;
    _Bool _serverDidEndpoint;
    _Bool _didTimeout;
    _Bool _wasCanceled;
    _Bool _suppressRecordingStoppedAlert;
    _Bool _isRecordingUsingBTRoute;
    double _twoShotStartTime;
    _Bool _didPerformTwoShotPrompt;
    _Bool _forceSuccessAlertOnStop;
    _Bool _isDriving;
    double _startRecordingTimestamp;
    double _firstBufferTimestamp;
    unsigned long long _firstBufferHostTime;
    unsigned long long _estimatedSpeechEndHostTime;
    double _lastPrepareTimestamp;
    double _accumulatedBufferDuration;
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;
    struct OpaqueAudioConverter *_decoder;
    double _expectedFirstBufferTimestamp;
    _Bool _isOpus;
    NSString *_recordDevice;
    _Bool _audioDuckingEnabled;
    NSXPCConnection *_speechRecordingEventListenerConnection;
    AFWatchdogTimer *_fakeTwoShotTTSPromptWatchdogTimer;
    unsigned long long _lastAudioRecordBufferStartTime;
    unsigned long long _lastAudioRecordBufferReceiptTime;
    CSEndpointerMetrics *_lastEndpointerMetrics;
    CSEndpointDelayReporter *_endpointDelayReporter;
    double _lastEndpointHintDuration;
    NSArray *_lastEndpointHintFeatures;
    CDUnknownBlockType _lastEndpointHintCompletion;
    AFSpeechSynthesisRecord *_mostRecentSpeechSynthesisRecord;
    AFClientConfiguration *_currentClientConfiguration;
    NSObject<OS_dispatch_group> *_alertPlaybackGroup;
    NSMutableDictionary *_numberOfAVVCAlertPlaybacksByType;
    AFBluetoothWirelessSplitterSessionStateObserver *_bluetoothWirelessSplitterSessionStateObserver;
    AFExperimentContext *_experimentContext;
    NSUUID *_mhUUID;
    _Bool _suppressInterruptionEndedNotifications;
}

- (void).cxx_destruct;
@property(nonatomic) _Bool suppressInterruptionEndedNotifications; // @synthesize suppressInterruptionEndedNotifications=_suppressInterruptionEndedNotifications;
- (void)_setAudioDuckingEnabled:(_Bool)arg1;
- (void)_setDictationAudioModeEnabled:(_Bool)arg1;
- (unsigned int)_audioDeviceID;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionOwnerResetNotification:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionOwnerLostNotification:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionRouteChangeNotificationWithUserInfo:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionInterruptionNotificationWithUserInfo:(id)arg2;
- (void)speakerIdentificationDidDetectSpeakerWithScores:(id)arg1;
- (_Bool)_startAudioPlaybackRequest:(id)arg1 options:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)acousticFingerprinter:(id)arg1 hasFingerprint:(id)arg2 duration:(double)arg3;
- (void)setEARLanguageDetectorSpeechRequestId:(id)arg1;
- (void)performBlockAfterAlerts:(CDUnknownBlockType)arg1 timeout:(double)arg2;
- (void)setSpeechRecognizedContext:(id)arg1;
- (void)setEndpointerDelayedTrigger:(_Bool)arg1;
- (void)setEndpointerThreshold:(double)arg1;
- (void)enforcePreviousEndpointHint;
- (void)_enforceEndpointHint;
- (void)_clearEndpointHint;
- (void)_checkIfLastEndpointHintShouldBeAccepted;
- (void)updateEndpointHintForDuration:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_handleFakeTwoShotPromptCallbackWithUUID:(id)arg1 timestamp:(double)arg2 duration:(double)arg3 error:(id)arg4;
- (void)_handleFakeTwoShotPromptTimeoutWithUUID:(id)arg1;
- (void)_playPhaticWithCompletion:(CDUnknownBlockType)arg1;
- (void)_performTwoShotPromptForType:(long long)arg1 atTime:(double)arg2;
- (void)_hardEndpointWasDetectedWithMetrics:(id)arg1 atTime:(double)arg2;
- (void)endpointer:(id)arg1 didDetectHardEndpointAtTime:(double)arg2 withMetrics:(id)arg3;
- (void)endpointer:(id)arg1 didDetectStartpointAtTime:(double)arg2;
- (void)speechControllerDidUpdateSmartSiriVolume:(id)arg1 forReason:(unsigned long long)arg2;
- (void)_speechControllerRequestsOperation:(unsigned long long)arg1 forReason:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)speechControllerRequestsOperation:(unsigned long long)arg1 forReason:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)speechControllerRequestsOperation:(unsigned long long)arg1 forReason:(unsigned long long)arg2;
- (void)suppressUtteranceGradingIfRequired;
- (void)speechControllerDidDetectVoiceTriggerTwoShot:(id)arg1 atTime:(double)arg2;
- (void)speechControllerDidDetectVoiceTriggerTwoShot:(id)arg1 atTime:(double)arg2 wantsAudibleFeedback:(_Bool)arg3;
- (void)languageDetectorDidDetectLanguageWithConfidence:(id)arg1 confidence:(id)arg2 isConfident:(_Bool)arg3;
- (void)_playStopAlertIfNecessaryForReason:(long long)arg1 endpointMode:(long long)arg2 error:(id)arg3;
- (void)_setLanguageDetectorDelegateIfRequired;
- (void)speechControllerDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;
- (void)speechController:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;
- (void)speechController:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;
- (void)speechControllerRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(long long)arg2;
- (void)speechControllerEndRecordInterruption:(id)arg1;
- (void)speechControllerBeginRecordInterruption:(id)arg1 withContext:(id)arg2;
- (void)_speechControllerDidReceiveLastAudioRecordBuffer:(id)arg1 forReason:(long long)arg2 estimatedSpeechEndHostTime:(unsigned long long)arg3 isRecordingStopped:(_Bool)arg4;
- (void)speechControllerLPCMRecordBufferAvailable:(id)arg1 buffer:(id)arg2;
- (id)getAudioRouteInstrumentationWithRecordingInfo:(id)arg1;
- (void)_speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:(unsigned long long)arg1 atHostTime:(unsigned long long)arg2 mhUUID:(id)arg3;
- (void)speechControllerRecordBufferAvailable:(id)arg1 buffers:(id)arg2 durationInSec:(float)arg3 recordedAt:(unsigned long long)arg4 audioDeviceInfo:(id)arg5;
- (void)_speechControllerDidStopRecording:(id)arg1 audioDeviceInfo:(id)arg2 forReason:(long long)arg3 estimatedSpeechEndHostTime:(unsigned long long)arg4 errorCodeOverride:(long long)arg5 underlyingError:(id)arg6;
- (void)speechControllerDidStopRecording:(id)arg1 audioDeviceInfo:(id)arg2 forReason:(long long)arg3 estimatedSpeechEndHostTime:(unsigned long long)arg4;
- (void)speechControllerDidDeliverLastBuffer:(id)arg1 forReason:(long long)arg2 estimatedSpeechEndHostTime:(unsigned long long)arg3;
- (void)_speechControllerDidStartRecording:(id)arg1 successfully:(_Bool)arg2 error:(id)arg3;
- (void)speechControllerDidStartRecording:(id)arg1 audioDeviceInfo:(id)arg2 successfully:(_Bool)arg3 error:(id)arg4;
- (id)_recordingInfoForEvent:(long long)arg1 audioAlertStyle:(long long)arg2 includeBTInfo:(_Bool)arg3 includeRecordDeviceInfo:(_Bool)arg4;
- (id)_currentRecordingInfo;
- (void)_updateRecordDeviceInfoAndPlaybackRouteForReason:(id)arg1 audioDeviceInfo:(id)arg2 forcesUpdate:(_Bool)arg3;
- (id)_currentPlaybackRoute;
- (id)_currentRecordDeviceInfo;
- (id)_currentRecordRoute;
- (void)updateServerEndpointFeatures:(id)arg1;
- (void)playRecordingStartAlert;
- (void)getLastStartpointTimestampAndCurrentTime:(CDUnknownBlockType)arg1;
- (void)setClientConfiguration:(id)arg1;
- (id)_speechRecordingEventListener;
- (void)setSpeechRecordingEventListeningEndpoint:(id)arg1;
- (void)setIsDriving:(_Bool)arg1;
- (void)setAudioFileHandle:(id)arg1;
- (void)setAudioFileType:(long long)arg1;
- (void)forceSuccessAudioAlertOnStop;
- (void)setFingerprintingEnabled:(_Bool)arg1;
- (void)cancelSpeechCaptureSuppressingAlert:(_Bool)arg1;
- (void)stopSpeechCaptureForEvent:(long long)arg1 suppressAlert:(_Bool)arg2 hostTime:(unsigned long long)arg3;
- (void)setFingerprintWasRecognized;
- (void)setSpeechWasRecognizedForElapsedTime:(double)arg1 isFinal:(_Bool)arg2;
- (void)releaseAudioSession;
- (void)setDelegate:(id)arg1;
- (_Bool)_updateAudioContextWithPendingInfoForReason:(id)arg1;
- (_Bool)_updateAudioContextToPostVoiceForReason:(id)arg1;
- (_Bool)_setAudioContextWithInfo:(id)arg1 forReason:(id)arg2;
- (void)_updateAudioContextWithInfo:(id)arg1 reason:(id)arg2;
- (void)setSpeechRequestOptions:(id)arg1;
- (void)_logAudioMetrics:(id)arg1 mhUUID:(id)arg2;
- (void)_logVoiceTriggerInfo:(id)arg1 withMHUUID:(id)arg2;
- (void)_logBluetoothStateWithMHUUID:(id)arg1;
- (id)_getFanInfoArray;
- (void)_logFanState;
- (id)fetchRecordingInfo;
- (unsigned int)_audioSessionID;
- (unsigned int)fetchAudioSessionID;
- (void)updateSpeechSynthesisRecord:(id)arg1;
- (_Bool)startSpeechCaptureWithContext:(id)arg1 willStartHandler:(CDUnknownBlockType)arg2 error:(id *)arg3;
- (void)prepareForMode:(long long)arg1;
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange)arg1;
- (id)currentVTSatScore;
- (id)recordingInfoForPreheatWithEvent:(long long)arg1;
- (_Bool)prepareSpeechCaptureWithOptions:(unsigned long long)arg1 error:(id *)arg2;
- (void)preheat;
- (void)eagerlyInitializeAudioRecording;
- (void)_stopRecordingForEndpointReason:(CDUnion_e15ec660)arg1;
- (void)_cancelExtendedEndpointTimer;
- (void)_scheduleExtendedEndpointTimer;
- (void)_setEndpointStyle:(long long)arg1;
- (void)_setupAudioFileWritingForSpeechController:(id)arg1 info:(id)arg2 context:(id)arg3;
- (_Bool)_checkAudioLoggingLimits:(id)arg1;
- (void)_playAudioAlert:(long long)arg1;
- (int)_mapInstrumentationEndpointTypeFromStopRecordingReason:(CDUnion_e15ec660)arg1;
- (_Bool)_shouldEmitInstrumentation;
- (void)_disableEndpointer;
- (void)_stopRecordingWithReason:(CDUnion_e15ec660)arg1 hostTime:(unsigned long long)arg2;
- (_Bool)_prepareSpeechControllerWithOptions:(unsigned long long)arg1 error:(id *)arg2;
- (id)_fingerprinter;
- (void)_resetSpeechController;
- (id)_speechControllerWithError:(id *)arg1;
- (id)_speechController;
- (void)_updateRecordBufferDuration;
- (void)_setAlertsIfNeeded;
- (void)_setEndpointerOperationMode:(long long)arg1 forceUpdate:(_Bool)arg2;
- (void)_setSpeechCapturingMode:(long long)arg1;
- (id)_currentMHUUID:(_Bool)arg1;
- (void)dealloc;
- (id)initWithQueue:(id)arg1 speechController:(id)arg2 audioSessionController:(id)arg3 audioPlaybackService:(id)arg4 experimentContext:(id)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

