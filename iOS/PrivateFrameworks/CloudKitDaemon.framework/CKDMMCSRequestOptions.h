//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class C2MetricOptions, CKContainerID, CKOperationMMCSRequestOptions, NSArray, NSData, NSDictionary, NSNumber, NSString;
@protocol C2NetworkingDelegate;

@interface CKDMMCSRequestOptions : NSObject
{
    _Bool _allowsCellularAccess;
    _Bool _allowsExpensiveNetworkAccess;
    _Bool _allowsPowerNapScheduling;
    _Bool _resolvedAutomaticallyRetryNetworkFailures;
    _Bool _isCrossOwner;
    long long _databaseScope;
    CKContainerID *_containerID;
    NSString *_topmostParentOperationID;
    NSString *_topmostParentOperationGroupID;
    NSString *_applicationBundleIdentifierForContainerAccess;
    NSString *_applicationBundleIdentifierForNetworkAttribution;
    NSString *_applicationSecondaryID;
    NSArray *_zoneNames;
    NSString *_deviceHardwareID;
    NSData *_authPutResponse;
    NSDictionary *_authPutResponseHeaders;
    long long _qualityOfService;
    long long _clientQueuePriority;
    unsigned long long _resolvedDiscretionaryNetworkBehavior;
    unsigned long long _duetPreClearedMode;
    C2MetricOptions *_metricOptions;
    NSNumber *_cacheDeleteAvailableSpaceClass;
    NSObject<C2NetworkingDelegate> *_networkingDelegate;
    unsigned long long _networkServiceType;
    CKOperationMMCSRequestOptions *_MMCSRequestOptions;
}

- (void).cxx_destruct;
@property(retain, nonatomic) CKOperationMMCSRequestOptions *MMCSRequestOptions; // @synthesize MMCSRequestOptions=_MMCSRequestOptions;
@property(nonatomic) unsigned long long networkServiceType; // @synthesize networkServiceType=_networkServiceType;
@property(retain, nonatomic) NSObject<C2NetworkingDelegate> *networkingDelegate; // @synthesize networkingDelegate=_networkingDelegate;
@property(retain, nonatomic) NSNumber *cacheDeleteAvailableSpaceClass; // @synthesize cacheDeleteAvailableSpaceClass=_cacheDeleteAvailableSpaceClass;
@property(nonatomic) _Bool isCrossOwner; // @synthesize isCrossOwner=_isCrossOwner;
@property(retain, nonatomic) C2MetricOptions *metricOptions; // @synthesize metricOptions=_metricOptions;
@property(nonatomic) unsigned long long duetPreClearedMode; // @synthesize duetPreClearedMode=_duetPreClearedMode;
@property(nonatomic) unsigned long long resolvedDiscretionaryNetworkBehavior; // @synthesize resolvedDiscretionaryNetworkBehavior=_resolvedDiscretionaryNetworkBehavior;
@property(nonatomic) _Bool resolvedAutomaticallyRetryNetworkFailures; // @synthesize resolvedAutomaticallyRetryNetworkFailures=_resolvedAutomaticallyRetryNetworkFailures;
@property(nonatomic) long long clientQueuePriority; // @synthesize clientQueuePriority=_clientQueuePriority;
@property(nonatomic) long long qualityOfService; // @synthesize qualityOfService=_qualityOfService;
@property(nonatomic) _Bool allowsPowerNapScheduling; // @synthesize allowsPowerNapScheduling=_allowsPowerNapScheduling;
@property(nonatomic) _Bool allowsExpensiveNetworkAccess; // @synthesize allowsExpensiveNetworkAccess=_allowsExpensiveNetworkAccess;
@property(nonatomic) _Bool allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property(retain, nonatomic) NSDictionary *authPutResponseHeaders; // @synthesize authPutResponseHeaders=_authPutResponseHeaders;
@property(retain, nonatomic) NSData *authPutResponse; // @synthesize authPutResponse=_authPutResponse;
@property(retain, nonatomic) NSString *deviceHardwareID; // @synthesize deviceHardwareID=_deviceHardwareID;
@property(retain, nonatomic) NSArray *zoneNames; // @synthesize zoneNames=_zoneNames;
@property(retain, nonatomic) NSString *applicationSecondaryID; // @synthesize applicationSecondaryID=_applicationSecondaryID;
@property(retain, nonatomic) NSString *applicationBundleIdentifierForNetworkAttribution; // @synthesize applicationBundleIdentifierForNetworkAttribution=_applicationBundleIdentifierForNetworkAttribution;
@property(retain, nonatomic) NSString *applicationBundleIdentifierForContainerAccess; // @synthesize applicationBundleIdentifierForContainerAccess=_applicationBundleIdentifierForContainerAccess;
@property(retain, nonatomic) NSString *topmostParentOperationGroupID; // @synthesize topmostParentOperationGroupID=_topmostParentOperationGroupID;
@property(retain, nonatomic) NSString *topmostParentOperationID; // @synthesize topmostParentOperationID=_topmostParentOperationID;
@property(retain, nonatomic) CKContainerID *containerID; // @synthesize containerID=_containerID;
@property(nonatomic) long long databaseScope; // @synthesize databaseScope=_databaseScope;
- (id)MMCSOptions;
- (_Bool)usesBackgroundSession;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithOperation:(id)arg1;

@end

