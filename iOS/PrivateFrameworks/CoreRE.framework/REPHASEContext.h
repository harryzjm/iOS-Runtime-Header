//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSMutableDictionary, NSURL, PHASECardioidDirectivityModelParameters, PHASEEngine, PHASENumberMetaParameterDefinition, PHASEObject;

__attribute__((visibility("hidden")))
@interface REPHASEContext : NSObject
{
    _Bool _testNilEngine;
    double _referenceGainDBSPL;
    PHASEEngine *_engine;
    int _mixerDefNameCounter;
    struct atomic<bool> _stoppedAndDestroyed;
    struct unique_ptr<re::HashTable<unsigned long long, REPHASEAudioScene *>, std::function<void (re::HashTable<unsigned long long, REPHASEAudioScene *>*)>> _scenes;
    struct unique_ptr<re::HashTable<unsigned long long, PHASEShape *>, std::function<void (re::HashTable<unsigned long long, PHASEShape *>*)>> _shapes;
    struct unique_ptr<re::HashTable<unsigned long long, REPHASESoundEvent *>, std::function<void (re::HashTable<unsigned long long, REPHASESoundEvent *>*)>> _soundEvents;
    struct UnfairLock _soundEventsMutex;
    struct unique_ptr<re::HashTable<unsigned long long, bool>, std::function<void (re::HashTable<unsigned long long, bool>*)>> _soundEventsPreparing;
    struct UnfairLock _soundEventsPreparingMutex;
    struct unique_ptr<re::HashTable<unsigned long long, REPHASESoundAsset>, std::function<void (re::HashTable<unsigned long long, REPHASESoundAsset>*)>> _audioAssets;
    struct UnfairLock _audioAssetsMutex;
    struct UnfairLock _audioEngineMutex;
    PHASEObject *_sharedSimulationWorldRootObject;
    _Bool _shouldPostNotificationWhenPHASESoundEventCreated;
    _Bool _automaticUpdate;
    _Bool _engineIsConfiguredForAutomaticUpdate;
    unsigned int _maxBufferSize;
    double _sampleRate;
    PHASENumberMetaParameterDefinition *_gainLinearParamDefinition;
    PHASENumberMetaParameterDefinition *_rateParamDefinition;
    PHASENumberMetaParameterDefinition *_reverbSendParamDefinition;
    PHASENumberMetaParameterDefinition *_directSendParamDefinition;
    PHASECardioidDirectivityModelParameters *_humanDirectivity;
    NSMutableDictionary *_mixGroups;
    long long _reverbPreset;
    long long _spaceBlendTargetReverbPreset;
    NSURL *_customHRIRURL;
}

- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool engineIsConfiguredForAutomaticUpdate; // @synthesize engineIsConfiguredForAutomaticUpdate=_engineIsConfiguredForAutomaticUpdate;
@property(nonatomic) _Bool automaticUpdate; // @synthesize automaticUpdate=_automaticUpdate;
@property(nonatomic) _Bool shouldPostNotificationWhenPHASESoundEventCreated; // @synthesize shouldPostNotificationWhenPHASESoundEventCreated=_shouldPostNotificationWhenPHASESoundEventCreated;
@property(retain, nonatomic) NSURL *customHRIRURL; // @synthesize customHRIRURL=_customHRIRURL;
@property(nonatomic) long long spaceBlendTargetReverbPreset; // @synthesize spaceBlendTargetReverbPreset=_spaceBlendTargetReverbPreset;
@property(nonatomic) long long reverbPreset; // @synthesize reverbPreset=_reverbPreset;
@property(readonly, nonatomic) NSMutableDictionary *mixGroups; // @synthesize mixGroups=_mixGroups;
@property(readonly, nonatomic) PHASECardioidDirectivityModelParameters *humanDirectivity; // @synthesize humanDirectivity=_humanDirectivity;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *directSendParamDefinition; // @synthesize directSendParamDefinition=_directSendParamDefinition;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *reverbSendParamDefinition; // @synthesize reverbSendParamDefinition=_reverbSendParamDefinition;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *rateParamDefinition; // @synthesize rateParamDefinition=_rateParamDefinition;
@property(readonly, nonatomic) PHASENumberMetaParameterDefinition *gainLinearParamDefinition; // @synthesize gainLinearParamDefinition=_gainLinearParamDefinition;
@property(readonly, nonatomic) unsigned int maxBufferSize; // @synthesize maxBufferSize=_maxBufferSize;
@property(readonly, nonatomic) double sampleRate; // @synthesize sampleRate=_sampleRate;
- (void)testNilEngine;
- (_Bool)engineShouldBeRunning;
- (void)removeEntity:(unsigned long long)arg1;
- (id)phaseGroupWithSceneID:(unsigned long long)arg1 playbackHostConnectionIdentifier:(unsigned long long)arg2 groupID:(unsigned long long)arg3;
- (void)createPendingListenersIfReady;
- (double)doubleFromPlistValue:(id)arg1 defaultValue:(double)arg2;
- (void)loadHumanDirectivityPlistFromURL:(id)arg1;
- (void)applyCustomHRIR;
- (id)spatialMixerDefinition:(id)arg1;
- (void)postDidCreateSoundEventNotificationWithSource:(id)arg1 mixGroupID:(unsigned long long)arg2;
- (void)setPreparing:(_Bool)arg1 forToken:(unsigned long long)arg2;
- (void)addEvent:(id)arg1 forToken:(unsigned long long)arg2;
- (void)removeEventFor:(unsigned long long)arg1;
- (_Bool)eventBeingPrepared:(unsigned long long)arg1;
- (id)eventFor:(unsigned long long)arg1;
- (void)prepare:(id)arg1;
@property(readonly) PHASEObject *sharedSimulationWorldRootObject;
- (id)mixerParametersForPrepareState:(id)arg1 source:(id)arg2 listener:(id)arg3 mixerIdentifiers:(id)arg4;
- (id)samplerDefForFileAsset:(unsigned long long)arg1 with:(id)arg2;
- (id)createSamplerDefinitionForToken:(unsigned long long)arg1;
- (id)baseMixerDefinitionWith:(id)arg1;
- (void)applyReverbPreset;
- (float)allowableUpwardGainForAudioAssetID:(unsigned long long)arg1;
- (void)removeAudioAssetID:(unsigned long long)arg1;
- (_Bool)getConfigurationForAudioAssetID:(unsigned long long)arg1 configuration:(struct AudioAssetConfiguration *)arg2;
- (void)addAudioAssetID:(unsigned long long)arg1 asset:(id)arg2 configuration:(const struct AudioAssetConfiguration *)arg3;
- (id)phaseIDForAssetID:(unsigned long long)arg1;
- (id)groupUDIDWithSceneID:(unsigned long long)arg1 playbackHostConnectionIdentifier:(unsigned long long)arg2 groupID:(unsigned long long)arg3;
- (id)sceneForID:(unsigned long long)arg1;
- (void)stopAllAndReset;
- (void)update;
@property(readonly) PHASEEngine *engine;
@property(readonly) PHASEEngine *maybeEngine;
- (void *)soundEventsPreparing;
- (void *)soundEvents;
- (void *)shapes;
- (void *)scenes;
- (id)initWithSampleRate:(double)arg1 maxBufferSize:(unsigned int)arg2 referenceGain:(double)arg3 automaticUpdate:(_Bool)arg4;

@end

