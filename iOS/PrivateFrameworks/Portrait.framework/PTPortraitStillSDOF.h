//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <Portrait/RenderingIntegration-Protocol.h>

@class BlurMapSmoothing, DisparityRefinement, NSString, PTColor, PTRenderDebugLayer, SDOFResources;
@protocol MTLBuffer, MTLComputePipelineState, MTLDeviceSPI, MTLLibrary, MTLTexture;

@interface PTPortraitStillSDOF : NSObject <RenderingIntegration>
{
    PTColor *_portraitColor;
    PTRenderDebugLayer *_debugLayer;
    long long _debugRendering;
    id <MTLComputePipelineState> _singlePassSDOF;
    id <MTLComputePipelineState> _singlePassSDOF_RGBA;
    id <MTLComputePipelineState> _makeBlurmap;
    id <MTLComputePipelineState> _makeSignedBlurmap;
    id <MTLComputePipelineState> _preprocess;
    id <MTLComputePipelineState> _preprocessHalf;
    id <MTLComputePipelineState> _preprocessScaled;
    id <MTLComputePipelineState> _sparseSamplingNoAlpha;
    id <MTLComputePipelineState> _sparserendering_sample_noAlphaSignedBlurmap;
    id <MTLComputePipelineState> _sparseSamplingPreFilterX;
    id <MTLComputePipelineState> _sparseSamplingPreFilterY;
    id <MTLComputePipelineState> _sparseSamplingAntialiasX;
    id <MTLComputePipelineState> _sparseSamplingAntialiasY;
    id <MTLComputePipelineState> _sparseSamplingAntialiasXSignedBlurmap;
    id <MTLComputePipelineState> _sparseSamplingAntialiasYSignedBlurmap;
    id <MTLComputePipelineState> _sparserendering_yuv_out_1_SignedBlurmap;
    id <MTLComputePipelineState> _sparserendering_yuv_out_2_SignedBlurmap;
    id <MTLComputePipelineState> _paintSharpPixels;
    id <MTLComputePipelineState> _paintSharpPixelsSignedBlurmap;
    id <MTLComputePipelineState> _sparse;
    struct CGSize _disparitySize;
    id <MTLDeviceSPI> _device;
    id <MTLLibrary> _library;
    id <MTLBuffer> _segmentStepLUT;
    id <MTLBuffer> _segmentBaseVecLUT;
    id <MTLTexture> _blurmap;
    unsigned int _rgbaDownsampleScale;
    id <MTLTexture> _inColorLuma;
    id <MTLTexture> _inColorChroma;
    id <MTLTexture> _processingSizeRGBA1;
    id <MTLTexture> _processingSizeRGBA2;
    id <MTLTexture> _halfResRG;
    id <MTLTexture> _outColorLuma;
    id <MTLTexture> _outColorChroma;
    // Error: parsing type: '{rendering_dynamic_params="shapeObstructionCoeff" "xhlrbBlurThresholdM" "xhlrbBlurThresholdC" "xhlrbPreFilterGain" "xhlrbWeightGain" "xhlrbIntensityGain" "lumaNoiseAmplitude" }', name: _dynamicRenderingParams
    BlurMapSmoothing *_blurmapSmoothing;
    _Bool _computeDisparityRefinement;
    SDOFResources *_sdofResources;
    DisparityRefinement *_disparityRefinement;
}

- (void).cxx_destruct;
- (id)intermediateTextures;
- (void)setResourceHeap:(id)arg1;
- (unsigned long long)minimumResourceHeapSize;
- (void)preprocess:(id)arg1 inputLuma:(id)arg2 inputChroma:(id)arg3 blurmap:(id)arg4 rgbaDownsampleScale:(unsigned int)arg5;
- (void)preprocess:(id)arg1 inputRGBA:(id)arg2 blurmap:(id)arg3 rgbaDownsampleScale:(unsigned int)arg4;
- (void)makeBlurMap:(id)arg1 inDisparity:(id)arg2 focusDistanceDisparity:(float)arg3 fNumber:(float)arg4 disparityMinMax: /* Error: Ran out of types for this method. */;
- (int)renderContinuousWithSource:(id)arg1 renderRequest:(id)arg2;
- (id)createRenderStateWithQuality:(int)arg1;
- (int)prewarm;
- (id)initWithDevice:(id)arg1 library:(id)arg2 pipelineLibrary:(id)arg3 colorSize:(struct CGSize)arg4 disparitySize:(struct CGSize)arg5 debugRendering:(long long)arg6 verbose:(_Bool)arg7 gpuProfiling:(_Bool)arg8 config:(id)arg9;
- (unsigned long long)numRings;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

