//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSString;
@protocol GGLRenderQueueSource;

__attribute__((visibility("hidden")))
@interface GGLImageCanvas : NSObject
{
    struct shared_ptr<ggl::Device> _device;
    struct CGSize _size;
    double _contentScale;
    struct CGRect _bounds;
    _Bool _canMakeImage;
    _Bool _recreateRenderTarget;
    _Bool _allowAlpha;
    _Bool _supportsFramebufferFetch;
    id <GGLRenderQueueSource> _renderSource;
    struct unique_ptr<ggl::IOSurfaceTexture, std::default_delete<ggl::IOSurfaceTexture>> _flippedSurfaceTexture;
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> _flippedRenderTarget;
    struct unique_ptr<(anonymous namespace)::YFlipPass, std::default_delete<(anonymous namespace)::YFlipPass>> _yFlipPass;
    struct RenderTargetFormat _sRGBFormat;
    struct RenderTargetFormat _resolvedRenderTargetFormat;
    struct unique_ptr<ggl::Renderer, std::default_delete<ggl::Renderer>> _renderer;
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> _sRGBRenderTarget;
    struct shared_ptr<ggl::Texture2DAbstract> _sRGBColorBuffer;
    struct unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>> _depthStencilBuffer;
    struct array<std::shared_ptr<ggl::RenderBuffer>, 3UL> _sRGBColorTextures;
    struct RenderTargetFormat _linearFormat;
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> _linearRenderTarget;
    struct shared_ptr<ggl::Texture2DAbstract> _linearColorBuffer;
    struct array<std::shared_ptr<ggl::RenderBuffer>, 3UL> _linearColorTextures;
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> _blitRenderTarget;
    struct RenderTargetFormat _blitFormat;
    _Bool _useMultisampling;
    struct shared_ptr<ggl::Texture> _msaaResolveBuffer;
    unsigned long long _signpostId;
    void *_mdDevice;
    struct mutex _debugConsoleManagerCreationLock;
    struct unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>> _debugConsoleManager;
}

- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) _Bool allowAlpha; // @synthesize allowAlpha=_allowAlpha;
@property(readonly, nonatomic) _Bool multiSample; // @synthesize multiSample=_useMultisampling;
@property(nonatomic) __weak id <GGLRenderQueueSource> renderSource; // @synthesize renderSource=_renderSource;
@property(nonatomic) struct CGRect bounds; // @synthesize bounds=_bounds;
@property(nonatomic) struct CGSize size; // @synthesize size=_size;
@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
@property(readonly, nonatomic) _Bool supportsFramebufferFetch; // @synthesize supportsFramebufferFetch=_supportsFramebufferFetch;
- (void *)debugConsoleForId:(int)arg1;
- (void)didDrawView;
- (void)willDrawView;
- (void)renderWithTimestamp:(double)arg1 completion:(function_ffe40f9b)arg2;
- (_Bool)hasRenderTarget;
- (void)destroyRenderTarget;
- (void)createRenderTarget;
- (struct __IOSurface *)flipImage;
@property(readonly, nonatomic) void *renderer;
@property(readonly, nonatomic) const struct RenderTargetFormat *blitFormat;
@property(readonly, nonatomic) void *blitRenderTarget;
@property(readonly, nonatomic) const struct RenderTargetFormat *linearFormat;
@property(readonly, nonatomic) void *linearRenderTarget;
@property(readonly, nonatomic) const struct RenderTargetFormat *format;
- (shared_ptr_fa6aa836)bitmapData;
@property(readonly, nonatomic) void *imageTexture;
@property(readonly, nonatomic) _Bool shouldRasterize;
- (void)dealloc;
- (id)initWithSize:(struct CGSize)arg1 scale:(double)arg2 useMultisampling:(_Bool)arg3 extraColorFormats:(const void *)arg4 taskContext:(const void *)arg5 device:(void *)arg6 signpostId:(unsigned long long)arg7;
- (void *)_internalRenderTarget;
@property(readonly, nonatomic) void *finalRenderTarget;
@property(readonly, nonatomic) struct CGSize sizeInPixels;
- (void)willDealloc;
- (void *)finalSurface;
@property(readonly, nonatomic) void *renderTarget;

// Remaining properties
@property(readonly, nonatomic) float averageFPS;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

