//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <Message/ECAuthenticatableConnection-Protocol.h>
#import <Message/MFDiagnosticsGenerator-Protocol.h>

@class MFConnectionSettings, NSArray, NSString;
@protocol ECNWConnectionWrapper, ECSASLSecurityLayer;

@interface MFConnection : NSObject <ECAuthenticatableConnection, MFDiagnosticsGenerator>
{
    id <ECSASLSecurityLayer> _securityLayer;
    MFConnectionSettings *_connectionSettings;
    id <ECNWConnectionWrapper> _socket;
    double _lastUsedTime;
    char *_buffer;
    long long _bufferRemainingBytes;
    unsigned long long _bufferStart;
    unsigned long long _bufferLength;
    unsigned long long _desiredBufferLength;
    struct z_stream_s *_deflater;
    struct z_stream_s *_inflater;
    char *_zbuffer;
    unsigned int _readBytesNotLogged;
    _Atomic _Bool _isFetching;
    _Bool _compressionEnabled;
    NSString *_accountLogString;
}

+ (_Bool)shouldTryFallbacksAfterError:(id)arg1;
+ (id)certUIPromptScheduler;
+ (void)setLogActivityOnHosts:(id)arg1;
+ (id)logActivityOnHosts;
+ (void)setLogActivityOnPorts:(id)arg1;
+ (id)logActivityOnPorts;
+ (void)setLogAllSocketActivity:(_Bool)arg1;
+ (_Bool)logAllSocketActivity;
+ (void)setLogClasses:(id)arg1;
+ (id)logClasses;
+ (void)flushLog;
+ (void)logConnection:(id)arg1 type:(long long)arg2 data:(id)arg3;
+ (void)initialize;
+ (void)readLoggingDefaults;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *accountLogString; // @synthesize accountLogString=_accountLogString;
- (id)copyDiagnosticInformation;
- (_Bool)_evaluateTrust:(struct __SecTrust *)arg1 errorPtr:(id *)arg2;
- (void)_setCertificateIsTrusted:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)_certificateIsTrustedForAccount:(id)arg1;
- (void)setConnectionSettings:(id)arg1;
- (id)connectionSettings;
@property(readonly, nonatomic) double lastUsedTime;
@property(readonly, nonatomic) _Bool hasBytesAvailable;
- (void)disconnect;
@property(readonly, nonatomic) _Bool isValid;
- (void)endCompression;
- (_Bool)startCompression;
@property(readonly, nonatomic) NSString *securityProtocol;
- (void)_clearBuffer;
- (_Bool)enableSSL;
- (_Bool)startTLSForAccount:(id)arg1;
- (_Bool)authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (_Bool)readBytesIntoData:(id)arg1 desiredLength:(unsigned long long)arg2;
- (_Bool)readLineIntoData:(id)arg1;
- (void)logReadChars:(const char *)arg1 length:(unsigned long long)arg2;
- (void)enableThroughputMonitoring:(_Bool)arg1;
- (void)stopActivity;
- (void)startActivity;
- (void)setDesiredReadBufferLength:(unsigned long long)arg1;
- (_Bool)writeData:(id)arg1;
- (_Bool)writeData:(id)arg1 dontLogBytesInRange:(struct _NSRange)arg2;
- (_Bool)writeBytes:(const char *)arg1 length:(unsigned long long)arg2 dontLogBytesInRange:(struct _NSRange)arg3;
@property(readonly, nonatomic) _Bool usesOpportunisticSockets;
@property(readonly, nonatomic) _Bool loginDisabled;
@property(readonly, nonatomic) NSArray *authenticationMechanisms;
@property(readonly, nonatomic) NSArray *capabilities;
- (_Bool)authenticateUsingAccount:(id)arg1;
- (void)test_setSocket:(id)arg1;
- (_Bool)connectUsingFallbacksForAccount:(id)arg1;
- (_Bool)connectUsingAccount:(id)arg1;
- (_Bool)connectUsingSettings:(id)arg1;
- (void)_setupSocketWithSettings:(id)arg1;
@property _Bool isFetching;
@property(readonly, nonatomic) _Bool isConstrained;
@property(readonly, nonatomic) _Bool isCellularConnection;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

