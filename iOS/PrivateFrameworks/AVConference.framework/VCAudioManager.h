//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <AVConference/VCAudioIOControllerControl-Protocol.h>
#import <AVConference/VCAudioSessionDelegate-Protocol.h>

@class AVAudioDevice, NSDictionary, NSMutableArray, NSString, VCAudioRelay, VCAudioRelayIO, VCAudioSessionMediaProperties, VCAudioUnitProperties;
@protocol OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface VCAudioManager : NSObject <VCAudioIOControllerControl, VCAudioSessionDelegate>
{
    struct tagHANDLE *_hAUIO;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    unsigned int _state;
    VCAudioSessionMediaProperties *_currentAudioSessionMediaProperties;
    VCAudioUnitProperties *_currentAudioUnitProperties;
    NSDictionary *_vpOperatingModeToAudioSessionMediaFormatMapping;
    NSMutableArray *_allClients;
    NSMutableArray *_startingIOClients;
    AVAudioDevice *_inputDevice;
    AVAudioDevice *_outputDevice;
    _Bool _isGKVoiceChat;
    _Bool _isMicrophoneMuted;
    _Bool _isInDaemon;
    _Bool _isInputMeteringEnabled;
    _Bool _isOutputMeteringEnabled;
    _Bool _isSpeakerPhoneEnabled;
    _Bool _isSuspended;
    struct _VCAudioIOControllerIOState _sinkData;
    struct _VCAudioIOControllerIOState _sourceData;
    int _interruptThreadState;
    VCAudioRelay *_interruptThread;
    VCAudioRelayIO *_interruptThreadClient;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSDictionary *vpOperatingModeToAudioSessionMediaFormatMapping; // @synthesize vpOperatingModeToAudioSessionMediaFormatMapping=_vpOperatingModeToAudioSessionMediaFormatMapping;
@property(nonatomic) _Bool isInDaemon; // @synthesize isInDaemon=_isInDaemon;
@property(retain, nonatomic) VCAudioUnitProperties *currentAudioUnitProperties; // @synthesize currentAudioUnitProperties=_currentAudioUnitProperties;
@property(retain, nonatomic) VCAudioSessionMediaProperties *currentAudioSessionMediaProperties; // @synthesize currentAudioSessionMediaProperties=_currentAudioSessionMediaProperties;
@property(nonatomic, getter=isSpeakerPhoneEnabled) _Bool speakerPhoneEnabled; // @synthesize speakerPhoneEnabled=_isSpeakerPhoneEnabled;
@property(retain, nonatomic) AVAudioDevice *currentOutputDevice; // @synthesize currentOutputDevice=_outputDevice;
@property(retain, nonatomic) AVAudioDevice *currentInputDevice; // @synthesize currentInputDevice=_inputDevice;
@property(nonatomic, getter=isMicrophoneMuted) _Bool microphoneMuted; // @synthesize microphoneMuted=_isMicrophoneMuted;
@property(nonatomic) _Bool isGKVoiceChat; // @synthesize isGKVoiceChat=_isGKVoiceChat;
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo *)arg1;
- (void)didSessionEnd;
- (void)didSessionStop;
- (void)didSessionResume;
- (void)didSessionPause;
- (void)stopInterruptThread;
- (void)startInterruptThread;
- (void)cleanupInterruptThread;
- (_Bool)setupInterruptThread;
- (void)stopAudioSession;
- (void)resetAudioSessionWithProperties:(id)arg1 interruptSuccessful:(_Bool *)arg2;
- (_Bool)startAudioSessionWithProperties:(id)arg1;
- (void)refreshRemoteCodecType:(unsigned int)arg1 sampleRate:(double)arg2;
- (void)refreshOutputMetering;
- (void)refreshInputMetering;
- (void)updateClient:(id)arg1;
- (void)stopClient:(id)arg1;
- (void)startClient:(id)arg1;
- (_Bool)updateStateWithAudioIOClient:(id)arg1;
- (_Bool)stateInterruptedWithAudioUnitProperties:(id)arg1 sessionProperties:(id)arg2 client:(id)arg3 newState:(unsigned int *)arg4;
- (void)stateTransitionInterruptedToStarted;
- (void)stateTransitionInterruptedToRunning;
- (_Bool)stateInterruptedShouldGoToRunning:(id)arg1;
- (_Bool)stateInterruptedShouldGoToStarted:(id)arg1;
- (_Bool)stateRunningWithAudioUnitProperties:(id)arg1 sessionProperties:(id)arg2 client:(id)arg3 newState:(unsigned int *)arg4;
- (void)stateTransitionRunningToInterrupted;
- (void)stateRunningToSessionStarted;
- (_Bool)stateRunningShouldTransitionToInterrupted:(id)arg1;
- (_Bool)stateRunningShouldTransitionToStarted:(id)arg1;
- (_Bool)stateSessionStartedWithAudioUnitProperties:(id)arg1 sessionProperties:(id)arg2 client:(id)arg3 newState:(unsigned int *)arg4;
- (void)enterStateStarted;
- (_Bool)stateIdleWithAudioUnitProperties:(id)arg1 sessionProperties:(id)arg2 client:(id)arg3 newState:(unsigned int *)arg4;
- (void)applyControllerFormatToClients:(id)arg1;
- (void)activateStartingClient:(id)arg1 applyControllerFormat:(_Bool)arg2;
- (void)completeStartForAllStartingClients;
- (void)unregisterClientIO:(struct _VCAudioIOControllerClientIO *)arg1 controllerIO:(struct _VCAudioIOControllerIOState *)arg2;
- (void)registerClientIO:(struct _VCAudioIOControllerClientIO *)arg1 controllerIO:(struct _VCAudioIOControllerIOState *)arg2;
- (void)stopAUIO;
- (void)resetAUIOWithProperties:(id)arg1;
- (_Bool)shouldResetAudioSessionWithProperties:(id)arg1;
- (_Bool)shouldResetAudioUnitWithProperties:(id)arg1;
- (_Bool)startAUIOWithProperties:(id)arg1;
- (void)setupIODevicesForAUIO:(struct tagHANDLE *)arg1;
- (id)newAudioSessionMediaPropertiesWithClient:(id)arg1;
- (id)newAudioUnitPropertiesWithClient:(id)arg1;
- (unsigned int)vpOperationModeForConferenceOperatingMode:(int)arg1 deviceRole:(int)arg2;
- (void)_cleanupDeadClients;
- (_Bool)removeClient:(id)arg1;
- (void)waitIdleForClient:(id)arg1;
- (_Bool)addClient:(id)arg1;
- (void)removeAllClientsForIO:(struct _VCAudioIOControllerIOState *)arg1;
- (void)flushEventQueue:(struct opaqueCMSimpleQueue *)arg1;
- (void)resetAudioTimestamps;
- (void)computeHardwarePreferences;
- (void)setOutputMetering;
- (void)setInputMetering;
- (void)dealloc;
- (id)init;
- (void)getPreferredFormat:(struct AudioStreamBasicDescription *)arg1 blockSize:(double *)arg2 vpOperatingMode:(unsigned int *)arg3 forOperatingMode:(int)arg4 deviceRole:(int)arg5 suggestedFormat:(struct AudioStreamBasicDescription *)arg6;
@property(readonly, nonatomic) struct _VCAudioIOControllerIOState *sourceIO;
@property(readonly, nonatomic) struct _VCAudioIOControllerIOState *sinkIO;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

