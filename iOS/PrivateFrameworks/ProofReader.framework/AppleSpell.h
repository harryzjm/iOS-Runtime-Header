//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray, NSData, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSURL;
@protocol OS_dispatch_queue;

@interface AppleSpell : NSObject
{
    NSObject<OS_dispatch_queue> *_serialQueue;
    void *_proofReaderConnection;
    struct __CFDictionary *_databaseConnections;
    NSMutableDictionary *_languageModelDicts;
    NSMutableDictionary *_lexiconDict;
    NSMutableDictionary *_phraseLexiconDict;
    struct __CFDictionary *_emojiPredictorDict;
    double _referenceResetTimer;
    double _lastWriteLanguageModels;
    double _lastDecayLanguageModels;
    double _lastResetLanguageModels;
    double _lastReleaseLanguageModels;
    double _lastMaintainLanguageModels;
    unsigned long long _languageModelWordCount;
    NSMutableDictionary *_localDictionaryArrays;
    NSMutableArray *_globalDictionaryArray;
    NSString *_lastLanguage;
    NSString *_lastCandidateLanguage;
    NSArray *_userPreferredLanguages;
    NSArray *_userPreferredLatinLanguages;
    NSArray *_userTopLanguages;
    NSArray *_userTransliterationLocalizations;
    NSArray *_userAdditionalEnglishLocalizations;
    NSMutableDictionary *_learnedResponses;
    NSMutableDictionary *_probationaryLearnedResponses;
    NSMutableDictionary *_probationaryLearnedResponseTimes;
    NSMutableArray *_diagnosticInfo;
    NSMutableSet *_foundNames;
    id _foundNamesLexicon;
    id _foundPhrasesLexicon;
    double _lastFindNames;
    NSMutableSet *_foundShortcuts;
    NSMutableDictionary *_foundShortcutsDictionary;
    struct __CFDictionary *_databaseConnectionsByPathAndCode;
    unsigned long long _reserved1;
    double _reserved2;
    NSMutableArray *_reserved3;
    NSMutableDictionary *_reserved4;
    double _reserved5;
    NSMutableArray *_altBundleURLs;
    NSObject<OS_dispatch_queue> *_assetDataBundleSerialQueue;
    NSMutableDictionary *_assetDataBundleURLDictionary;
    NSMutableSet *_updatedDataBundleLanguages;
    NSURL *_updateBundleURL;
    NSMutableDictionary *_languageCounts;
    double _lastLanguageCounts;
    NSMutableDictionary *_userAdaptationDictionary;
    NSData *_lastKeyEventArray;
    unsigned long long *_keyboardHistogram;
    double _lastKeyboardHistogramRecording;
    NSMutableArray *_requestedAssets;
    NSMutableArray *_requestedByCheckerAssets;
    double _lastAssetRequest;
    NSMutableArray *_recordedCorrections;
    NSMutableArray *_recordedTICorrections;
    NSMutableDictionary *_characterLanguageModelDictionary;
    NSMutableDictionary *_transformerLanguageModelDictionary;
    double _probationaryInterval;
    _Bool _userPrefersUncheckedLatinLanguage;
    _Bool _userPrefersUncheckedCyrillicLanguage;
    _Bool _hasUpdatedDataBundleLanguages;
    _Bool _shouldClearFoundNames;
    _Bool _automaticTextCompletionCollapsed;
    _Bool _automaticTextCompletionEnabled;
}

+ (void)resetSharedInstance;
+ (id)sharedInstance;
- (_Bool)spellServer:(id)arg1 canChangeCaseOfFirstLetterInString:(id)arg2 toUpperCase:(_Bool)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 correctionsForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 prefixesForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 extendedAlternativesForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 alternativesForPinyinInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 stringForInputString:(id)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 suggestWordWithLengthInRange:(struct _NSRange)arg2 language:(id)arg3;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessDictionariesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5 errorModel:(id)arg6;
- (id)spellServer:(id)arg1 suggestContextualGuessDictionariesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessesForWord:(id)arg2 inLanguage:(id)arg3;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 language:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 generateCandidatesForSelectedRange:(struct _NSRange)arg2 inString:(id)arg3 offset:(unsigned long long)arg4 types:(unsigned long long)arg5 options:(id)arg6 orthography:(id)arg7;
- (id)spellServer:(id)arg1 checkString:(id)arg2 offset:(unsigned long long)arg3 types:(unsigned long long)arg4 options:(id)arg5 orthography:(id)arg6 wordCount:(long long *)arg7;
- (struct _NSRange)spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 languages:(id)arg3 wordCount:(long long *)arg4 countOnly:(_Bool)arg5 correction:(id *)arg6;
- (struct _NSRange)spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 language:(id)arg3 wordCount:(long long *)arg4 countOnly:(_Bool)arg5 correction:(id *)arg6;
- (struct _NSRange)spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 language:(id)arg3 wordCount:(long long *)arg4 countOnly:(_Bool)arg5;
- (struct _NSRange)spellServer:(id)arg1 checkGrammarInString:(id)arg2 language:(id)arg3 details:(id *)arg4;
- (struct _NSRange)spellServer:(id)arg1 checkGrammarInString:(id)arg2 range:(struct _NSRange)arg3 language:(id)arg4 orthography:(id)arg5 mutableResults:(id)arg6 offset:(unsigned long long)arg7 details:(id *)arg8;
- (_Bool)_checkGrammarInString:(id)arg1 range:(struct _NSRange)arg2 language:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 bufIO:(struct _PR_BUF_IO *)arg6 errorRange:(struct _NSRange *)arg7 details:(id *)arg8;
- (void)loadLexiconsAndLanguageModelsForLanguage:(id)arg1;
- (void)releaseAllLexicons;
- (void)releaseAllLanguageModels;
- (void)resetAllLanguageModels;
- (void)setUpdateBundleURL:(id)arg1;
- (void)addAlternateDataBundleURL:(id)arg1;
- (void)releaseDatabaseConnections;
- (void *)databaseConnectionForLanguageObject:(id)arg1;
- (id)databasePathForLanguageObject:(id)arg1;
- (void)resetDataBundlesForAllLanguages;
- (void)resetDataBundlesForLanguageObject:(id)arg1;
- (id)dataBundlesForLanguageObject:(id)arg1;
- (id)dataBundle;
- (id)init;
- (void)resetTimer;
- (void)timeout:(id)arg1;
- (_Bool)getTransformerModelConditionalProbabilityForString:(id)arg1 context:(id)arg2 language:(id)arg3 probability:(double *)arg4;
- (_Bool)getCharacterModelConditionalProbabilityForString:(id)arg1 context:(id)arg2 language:(id)arg3 probability:(double *)arg4;
- (_Bool)getConditionalProbabilityForWord:(id)arg1 context:(id)arg2 language:(id)arg3 probability:(double *)arg4;
- (id)assetDataBundleURLsForLanguageObject:(id)arg1;
- (float)dynamicScoreForWord:(id)arg1 languageObject:(id)arg2 appIdentifier:(id)arg3;
- (float)dynamicScoreForWord:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3;
- (_Bool)_useAlternateLanguageForRange:(struct _NSRange)arg1 ofString:(id)arg2 languageObject:(id)arg3 tagger:(id)arg4 alternateLanguageObject:(id)arg5 alternateTagger:(id)arg6 appIdentifier:(id)arg7;
- (id)_rankedCandidatesForCandidateList:(id)arg1 languageObject:(id)arg2 tagger:(id)arg3 appIdentifier:(id)arg4 parameterBundles:(id)arg5;
- (void)getParameterValue:(double *)arg1 forName:(id)arg2 languageObject:(id)arg3 parameterBundles:(id)arg4 defaultValue:(double)arg5;
- (id)_rankedCandidatesForRange:(struct _NSRange)arg1 candidates:(id)arg2 languageObject:(id)arg3 tagger:(id)arg4 appIdentifier:(id)arg5 allowTransformer:(_Bool)arg6 scoreDictionary:(id)arg7;
- (_Bool)_getUnigramProbabilityForString:(id)arg1 languageModel:(id)arg2 probability:(double *)arg3;
- (_Bool)_addLanguageModelCompletionsForPartialWordRange:(struct _NSRange)arg1 languageObject:(id)arg2 connection:(struct _PR_DB_IO *)arg3 sender:(id)arg4 tagger:(id)arg5 appIdentifier:(id)arg6 waitForLanguageModel:(_Bool)arg7 allowTransformer:(_Bool)arg8 candidates:(id)arg9 scoreDictionary:(id)arg10 tryTransliteration:(_Bool *)arg11;
- (id)languageModelCompletionsForPartialWord:(id)arg1 languageObject:(id)arg2 sender:(id)arg3 appIdentifier:(id)arg4;
- (void)_addLanguageModelCompletionsForPrefix:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 capitalized:(_Bool)arg6 candidates:(id)arg7;
- (void)releaseLanguageModels;
- (void)resetLanguageModels;
- (void)_releaseLanguageModels;
- (unsigned long long)_resetLanguageModels;
- (id)transformerLanguageModelForLanguageObject:(id)arg1 waitForResult:(_Bool)arg2;
- (id)characterLanguageModelForLanguageObject:(id)arg1 waitForResult:(_Bool)arg2;
- (id)_NLPLanguageModelWithGranularity:(long long)arg1 forLanguageObject:(id)arg2 waitForResult:(_Bool)arg3;
- (id)_loadNLPLanguageModelWithGranularity:(long long)arg1 forLanguageObject:(id)arg2 onQueue:(id)arg3;
- (_Bool)useUnigramProbabilityForLanguageObject:(id)arg1;
- (void)loadWordLanguageModelForLanguageObject:(id)arg1;
- (_Bool)useTransformerLanguageModelForLanguageObject:(id)arg1 tagger:(id)arg2 appIdentifier:(id)arg3;
- (_Bool)useCharacterLanguageModelForLanguageObject:(id)arg1 tagger:(id)arg2 appIdentifier:(id)arg3;
- (_Bool)useWordLanguageModelForLanguageObject:(id)arg1 tagger:(id)arg2 appIdentifier:(id)arg3;
- (id)wordLanguageModelForLanguageObject:(id)arg1 appIdentifier:(id)arg2 waitForResult:(_Bool)arg3;
- (id)wordLanguageModelForLanguage:(id)arg1 appIdentifier:(id)arg2 waitForResult:(_Bool)arg3;
- (id)modelCreationQueue;
- (id)_loadWordLanguageModelForLanguage:(id)arg1 localization:(id)arg2 appIdentifier:(id)arg3 onQueue:(id)arg4;
- (void)_readLanguageModelParametersFromDictionary:(id)arg1;
- (void)_readLanguageModelParametersFromDefaults;
- (id)languageModelLocalizationForLanguage:(id)arg1;
- (unsigned long long)_contextLengthForRange:(struct _NSRange)arg1 languageObject:(id)arg2 tagger:(id)arg3 languageModel:(id)arg4 maxContextLength:(unsigned long long)arg5 context:(unsigned int *)arg6 cleanOffset:(unsigned long long *)arg7 cleanContextRange:(struct _NSRange *)arg8 lastTokenRange:(struct _NSRange *)arg9 lastTokenID:(unsigned int *)arg10;
- (id)backgroundMaintenanceQueue;
- (_Bool)shouldBlockWord:(id)arg1 languageObject:(id)arg2;
- (id)_stringForCompletion:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 prefix:(id)arg6 capitalized:(_Bool)arg7;
- (id)_stringForTokenIDs:(const unsigned int *)arg1 tokenCount:(unsigned long long)arg2 entryString:(id)arg3 languageModel:(id)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO *)arg6 sender:(id)arg7 prefix:(id)arg8 capitalized:(_Bool)arg9;
- (unsigned int)_tokenIDForString:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 terminatorTokenID:(unsigned int)arg4;
- (unsigned int)_tokenIDForString:(id)arg1 languageModel:(id)arg2 languageObject:(id)arg3 createIfAbsent:(_Bool)arg4 terminatorTokenID:(unsigned int)arg5;
- (id)_standardizedLanguageModelStringForString:(id)arg1;
- (id)sentenceTerminatorCharacterSet;
- (void)clearCaches;
- (id)parameterBundleForLanguageObject:(id)arg1;
- (id)sentenceCorrectionsDictionaryForLanguageObject:(id)arg1;
- (id)phraseCorrectionsDictionaryForLanguageObject:(id)arg1;
- (id)capitalizationDictionaryArrayForLanguageObject:(id)arg1;
- (id)guessesDictionaryForLanguageObject:(id)arg1;
- (id)autocorrectionDictionaryForLanguageObject:(id)arg1;
- (id)dictionaryForLanguageObject:(id)arg1 index:(unsigned long long)arg2;
- (_Bool)checkNameWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 globalOnly:(_Bool)arg4;
- (_Bool)checkWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 index:(unsigned long long)arg4;
- (id)localDictionaryArrayForLanguageObject:(id)arg1;
- (id)globalDictionaryArray;
- (id)taggerForLanguageObject:(id)arg1 string:(id)arg2 range:(struct _NSRange)arg3;
- (id)spellServer:(id)arg1 candidatesForSelectedRange:(struct _NSRange)arg2 inString:(id)arg3 offset:(unsigned long long)arg4 types:(unsigned long long)arg5 options:(id)arg6 orthography:(id)arg7;
- (_Bool)noSuggestForCompletion:(id)arg1 languageObject:(id)arg2 appIdentifier:(id)arg3 alreadyCapitalized:(_Bool)arg4;
- (void)personalizeEmojiArray:(id)arg1;
- (id)spellServer:(id)arg1 suggestWordWithMinimumLength:(unsigned long long)arg2 maximumLength:(unsigned long long)arg3 language:(id)arg4;
- (id)spellServer:(id)arg1 suggestNextLetterDictionariesForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionDictionariesForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestCompletionsForPartialWordRange:(struct _NSRange)arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)_correctionResultForString:(id)arg1 range:(struct _NSRange)arg2 inString:(id)arg3 offset:(unsigned long long)arg4 tagger:(id)arg5 appIdentifier:(id)arg6 dictionary:(id)arg7 languages:(id)arg8 connection:(struct _PR_DB_IO *)arg9 flags:(unsigned long long)arg10 keyEventArray:(id)arg11 selectedRangeValue:(id)arg12 parameterBundles:(id)arg13 previousLetter:(unsigned short)arg14 nextLetter:(unsigned short)arg15 extraMisspellingCount:(unsigned long long)arg16 extraCorrectionCount:(unsigned long long *)arg17;
- (id)_correctionResultForWord:(id)arg1 replacementRange:(struct _NSRange)arg2 inString:(id)arg3 offset:(unsigned long long)arg4 languageObject:(id)arg5 capitalize:(_Bool)arg6 isCapitalized:(_Bool)arg7 isSecondCapitalized:(_Bool)arg8 hasCurlyApostrophe:(_Bool)arg9 capitalizationLocale:(id)arg10 proposedCorrection:(id)arg11;
- (_Bool)_permitCorrection:(id)arg1 languageObject:(id)arg2 flags:(unsigned long long)arg3 isCapitalized:(_Bool)arg4 typologyCorrection:(id)arg5;
- (id)_spaceInsertionCorrectionForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO *)arg5 flags:(unsigned long long)arg6 isCapitalized:(_Bool)arg7 typologyCorrection:(id)arg8;
- (id)_connectionCorrectionForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO *)arg5 flags:(unsigned long long)arg6 isCapitalized:(_Bool)arg7 accentCorrectionOnly:(_Bool)arg8 isAbbreviation:(_Bool *)arg9 trySpaceInsertion:(_Bool *)arg10 hasAccentCorrections:(_Bool *)arg11 candidateList:(id)arg12 typologyCorrection:(id)arg13;
- (id)_umlautCorrectionForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO *)arg5 typologyCorrection:(id)arg6;
- (_Bool)_prohibitCorrectionBasedOnCountsForString:(id)arg1 lowercaseString:(id)arg2 appIdentifier:(id)arg3 languageObject:(id)arg4 typologyCorrection:(id)arg5;
- (id)_initialCorrectionForString:(id)arg1 lowercaseString:(id)arg2 isFirstSecondCapitalized:(_Bool)arg3 dictionary:(id)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO *)arg6;
- (_Bool)_acceptWithoutAccentForString:(id)arg1 range:(struct _NSRange)arg2 inString:(id)arg3 languageObject:(id)arg4;
- (id)_accentCorrectionResultForString:(id)arg1 range:(struct _NSRange)arg2 inString:(id)arg3 offset:(unsigned long long)arg4 languageObject:(id)arg5 onlyAtInsertionPoint:(_Bool)arg6 capitalize:(_Bool)arg7 keyEventArray:(id)arg8 selectedRangeValue:(id)arg9;
- (_Bool)wordIsAlreadyAccented:(id)arg1;
- (id)_phraseCapitalizationResultForString:(id)arg1 range:(struct _NSRange)arg2 currentWordRange:(struct _NSRange)arg3 inString:(id)arg4 offset:(unsigned long long)arg5 languageObject:(id)arg6 onlyAtInsertionPoint:(_Bool)arg7 keyEventArray:(id)arg8 selectedRangeValue:(id)arg9;
- (id)_capitalizationResultForString:(id)arg1 range:(struct _NSRange)arg2 inString:(id)arg3 offset:(unsigned long long)arg4 languageObject:(id)arg5 onlyAtInsertionPoint:(_Bool)arg6 keyEventArray:(id)arg7 selectedRangeValue:(id)arg8;
- (_Bool)findMatchingRangesForRange:(struct _NSRange)arg1 inString:(id)arg2 keyEventArray:(id)arg3 selectedRangeValue:(id)arg4 matchingStringRange:(struct _NSRange *)arg5 correctableStringRange:(struct _NSRange *)arg6 matchingKeyEventRange:(struct _NSRange *)arg7 firstMisspelledKeyEventIndex:(unsigned long long *)arg8 lastMisspelledKeyEventIndex:(unsigned long long *)arg9 previousBackspaceCount:(unsigned long long *)arg10;
- (_Bool)_findMatchingRangesForRange:(struct _NSRange)arg1 inString:(id)arg2 keyEventArray:(id)arg3 endingAtIndex:(unsigned long long)arg4 matchingStringRange:(struct _NSRange *)arg5 correctableStringRange:(struct _NSRange *)arg6 matchingKeyEventRange:(struct _NSRange *)arg7 firstMisspelledKeyEventIndex:(unsigned long long *)arg8 lastMisspelledKeyEventIndex:(unsigned long long *)arg9 previousBackspaceCount:(unsigned long long *)arg10;
- (void)_addGuessesForWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 minAutocorrectionLength:(unsigned long long)arg6 previousLetter:(unsigned short)arg7 nextLetter:(unsigned short)arg8 basicOnly:(_Bool)arg9 toGuesses:(id)arg10;
- (char *)_validatedGuessWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 checkUser:(_Bool)arg6 additionalBuffer:(char *)arg7;
- (id)vietnameseModificationForWord:(id)arg1;
- (void)enumerateCorrectionEntriesForWord:(id)arg1 maxCorrections:(unsigned long long)arg2 inLexiconForLanguageObject:(id)arg3 withBlock:(CDUnknownBlockType)arg4;
- (void)enumerateEntriesForWord:(id)arg1 inLexiconForLanguageObject:(id)arg2 withBlock:(CDUnknownBlockType)arg3;
- (id)phraseMatching:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (_Bool)getMetaFlagsForWord:(id)arg1 inLexiconForLanguageObject:(id)arg2 metaFlags:(unsigned int *)arg3 otherMetaFlags:(unsigned int *)arg4;
- (void)enumerateCorrectionEntriesForWord:(id)arg1 maxCorrections:(unsigned long long)arg2 inLexiconForLanguage:(id)arg3 withBlock:(CDUnknownBlockType)arg4;
- (void)enumerateEntriesForWord:(id)arg1 inLexiconForLanguage:(id)arg2 withBlock:(CDUnknownBlockType)arg3;
- (id)phraseMatching:(id)arg1 inLexiconForLanguage:(id)arg2;
- (_Bool)getMetaFlagsForWord:(id)arg1 inLexiconForLanguage:(id)arg2 metaFlags:(unsigned int *)arg3 otherMetaFlags:(unsigned int *)arg4;
- (_Bool)validateWord:(id)arg1 inLexicon:(id)arg2;
- (_Bool)validateUntilLearnedWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (_Bool)validateNoCapAbbreviation:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (_Bool)validateVariantWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (_Bool)validateAdditionalWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (_Bool)validateWord:(id)arg1 inLexiconForLanguageObject:(id)arg2;
- (_Bool)validateWord:(id)arg1 inLexiconsForLanguageObject:(id)arg2 requiredMetaFlags:(unsigned int)arg3 alternativeRequiredMetaFlags:(unsigned int)arg4 prohibitedMetaFlags:(unsigned int)arg5 caseInsensitive:(_Bool)arg6;
- (_Bool)validateUntilLearnedWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (_Bool)validateNoCapAbbreviation:(id)arg1 inLexiconForLanguage:(id)arg2;
- (_Bool)validateVariantWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (_Bool)validateAdditionalWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (_Bool)validateWord:(id)arg1 inLexiconForLanguage:(id)arg2;
- (_Bool)validateWord:(id)arg1 inLexicons:(id)arg2 forLanguage:(id)arg3 requiredMetaFlags:(unsigned int)arg4 alternativeRequiredMetaFlags:(unsigned int)arg5 prohibitedMetaFlags:(unsigned int)arg6 caseInsensitive:(_Bool)arg7;
- (void)updateAllLexicons;
- (void)updateLexiconsForLanguageObjectIfNecessary:(id)arg1;
- (void)updateLexiconsForLanguageObject:(id)arg1;
- (void)updateLexiconsForLanguageIfNecessary:(id)arg1;
- (void)updateLexiconsForLanguage:(id)arg1;
- (id)_phraseLexiconsForLanguage:(id)arg1;
- (id)_phraseLexiconsForLanguage:(id)arg1 waitForResult:(_Bool)arg2;
- (id)_loadPhraseLexiconsForLanguage:(id)arg1 localization:(id)arg2 onQueue:(id)arg3;
- (unsigned long long)loadedLexiconsCountForLanguageObject:(id)arg1;
- (id)lexiconForLanguageObject:(id)arg1;
- (id)_lexiconsForLanguageObject:(id)arg1;
- (id)lexiconForLanguage:(id)arg1;
- (id)_lexiconsForLanguage:(id)arg1;
- (id)_lexiconsForLanguage:(id)arg1 waitForResult:(_Bool)arg2;
- (id)_loadLexiconsForLanguage:(id)arg1 localization:(id)arg2 onQueue:(id)arg3;
- (id)backgroundLoadingQueue;
- (id)_phraseLexiconPathForLanguage:(id)arg1;
- (id)_lexiconPathForLanguageObject:(id)arg1 type:(id)arg2;
- (id)_lexiconPathForLocalization:(id)arg1 type:(id)arg2;
- (void)enumerateAssetDataItemsForLocale:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (_Bool)testTurkishSuffixationPattern:(id)arg1;
- (unsigned long long)numberOfTurkishSuffixPointsInBuffer:(char *)arg1 length:(unsigned long long)arg2 maxSuffixPoints:(unsigned long long)arg3 suffixPoints:(CDStruct_b54abf8e *)arg4;
- (_Bool)_spellServer:(id)arg1 canChangeCaseOfFirstLetterInString:(id)arg2 toUpperCase:(_Bool)arg3 languageObject:(id)arg4;
- (struct _NSRange)spellServer:(id)arg1 findMisspelledWordInString:(id)arg2 range:(struct _NSRange)arg3 languages:(id)arg4 topLanguages:(id)arg5 orthography:(id)arg6 checkOrthography:(_Bool)arg7 mutableResults:(id)arg8 offset:(unsigned long long)arg9 autocorrect:(_Bool)arg10 onlyAtInsertionPoint:(_Bool)arg11 initialCapitalize:(_Bool)arg12 autocapitalize:(_Bool)arg13 keyEventArray:(id)arg14 appIdentifier:(id)arg15 selectedRangeValue:(id)arg16 parameterBundles:(id)arg17 wordCount:(long long *)arg18 countOnly:(_Bool)arg19 correction:(id *)arg20;
- (id)_orthographyByModifyingOrthography:(id)arg1 withLatinLanguage:(id)arg2;
- (_Bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 checkBase:(_Bool)arg6 checkDict:(_Bool)arg7 checkNames:(_Bool)arg8 checkHyphens:(_Bool)arg9 checkIntercaps:(_Bool)arg10 checkOptions:(_Bool)arg11 depth:(unsigned long long)arg12;
- (_Bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 checkBase:(_Bool)arg6 checkDict:(_Bool)arg7 checkTemp:(_Bool)arg8 checkNames:(_Bool)arg9 checkHyphens:(_Bool)arg10 checkIntercaps:(_Bool)arg11 checkOptions:(_Bool)arg12 depth:(unsigned long long)arg13;
- (_Bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 checkBase:(_Bool)arg6 checkDict:(_Bool)arg7 checkTemp:(_Bool)arg8 checkUser:(_Bool)arg9 checkNames:(_Bool)arg10 checkHyphens:(_Bool)arg11 checkIntercaps:(_Bool)arg12 checkOptions:(_Bool)arg13 depth:(unsigned long long)arg14;
- (_Bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5 checkBase:(_Bool)arg6 checkDict:(_Bool)arg7 checkTemp:(_Bool)arg8 checkUser:(_Bool)arg9 checkNames:(_Bool)arg10 checkHyphens:(_Bool)arg11 checkIntercaps:(_Bool)arg12 checkOptions:(_Bool)arg13 forCorrection:(_Bool)arg14 depth:(unsigned long long)arg15;
- (id)stringByReducingArabicAlefVariantsInString:(id)arg1;
- (id)stringByRemovingArabicDiacriticsFromString:(id)arg1;
- (_Bool)checkSpecialPrefixesForWordBuffer:(char *)arg1 length:(unsigned long long)arg2;
- (_Bool)validateAbbreviationOrNumberWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 connection:(struct _PR_DB_IO *)arg4 sender:(id)arg5;
- (_Bool)validateWordPrefixBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO *)arg3;
- (_Bool)validateWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO *)arg3;
- (_Bool)checkNoCapAbbreviationWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3;
- (_Bool)checkNegativeWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3;
- (_Bool)checkNegativeWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 alreadyCapitalized:(_Bool)arg4;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 forPrediction:(_Bool)arg4 alreadyCapitalized:(_Bool)arg5;
- (unsigned long long)acceptabilityOfWordBuffer:(char *)arg1 length:(unsigned long long)arg2 languageObject:(id)arg3 forPrediction:(_Bool)arg4 alreadyCapitalized:(_Bool)arg5 depth:(unsigned long long)arg6;
- (_Bool)_checkEnglishGrammarInString:(id)arg1 range:(struct _NSRange)arg2 indexIntoBuffer:(unsigned long long)arg3 bufferLength:(unsigned long long)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO *)arg6 sender:(id)arg7 bufIO:(struct _PR_BUF_IO *)arg8 retval:(int *)arg9 errorRange:(struct _NSRange *)arg10 details:(id *)arg11;
- (id)_detailWithRange:(struct _NSRange)arg1 description:(id)arg2 corrections:(id)arg3;
- (id)_modifiedGrammarDescriptionForDescription:(id)arg1;
- (id)contextAlternativeAnnotatedStringsForZhuyinInputString:(id)arg1;
- (void)_addContextAlternativesForZhuyinInputString:(id)arg1 modifications:(id)arg2 afterIndex:(unsigned long long)arg3 delta:(long long)arg4 toArray:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessDictionariesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5 errorModel:(id)arg6;
- (id)spellServer:(id)arg1 suggestContextualGuessDictionariesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 inLanguage:(id)arg4 options:(id)arg5;
- (id)_spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 languageObject:(id)arg4 options:(id)arg5;
- (id)_spellServer:(id)arg1 suggestGuessesForWordRange:(struct _NSRange)arg2 inString:(id)arg3 languageObject:(id)arg4 options:(id)arg5 tagger:(id)arg6 errorModel:(id)arg7 guessesDictionaries:(id)arg8;
- (void)addLexiconGuessesForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 minCorrectionLength:(unsigned long long)arg5 minExtendedCorrectionLength:(unsigned long long)arg6 isCapitalized:(_Bool)arg7 stopAfterFreeInsertions:(_Bool)arg8 toGuesses:(id)arg9;
- (void)_addSpaceInsertionGuessesForWord:(id)arg1 sender:(id)arg2 buffer:(char *)arg3 length:(unsigned long long)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO *)arg6 isCapitalized:(_Bool)arg7 checkUser:(_Bool)arg8 oneLetterWords:(const char *)arg9 twoLetterWords:(const char *)arg10 candidateList:(id)arg11;
- (void)_addAdditionalGuessesForWord:(id)arg1 sender:(id)arg2 buffer:(char *)arg3 length:(unsigned long long)arg4 languageObject:(id)arg5 connection:(struct _PR_DB_IO *)arg6 accents:(const char *)arg7 isCapitalized:(_Bool)arg8 isAllCaps:(_Bool)arg9 isAllAlpha:(_Bool)arg10 hasLigature:(_Bool)arg11 suggestPossessive:(_Bool)arg12 checkUser:(_Bool)arg13 checkHyphens:(_Bool)arg14 candidateList:(id)arg15;
- (void)_addConnectionGuessesForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 connection:(struct _PR_DB_IO *)arg5 candidateList:(id)arg6;
- (void)_addTwoLetterWordGuessesForWord:(id)arg1 buffer:(char *)arg2 length:(unsigned long long)arg3 languageObject:(id)arg4 isCapitalized:(_Bool)arg5 isAllCaps:(_Bool)arg6 twoLetterWords:(const char *)arg7 candidateList:(id)arg8;
- (id)spellServer:(id)arg1 finalModificationsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 modificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 modificationsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 _retainedFinalModificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 _retainedModificationsForPinyinInputString:(id)arg2 geometryModelData:(id)arg3;
- (id)spellServer:(id)arg1 correctionsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 _retainedCorrectionsForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 prefixesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 _retainedPrefixesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 extendedAlternativesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 alternativesForPinyinInputString:(id)arg2;
- (id)spellServer:(id)arg1 _retainedAlternativesForPinyinInputString:(id)arg2 extended:(_Bool)arg3;
- (id)_recursiveRetainedAlternativesForPinyinInputString:(id)arg1 depth:(unsigned long long)arg2;
- (id)_retainedAlternativesByCombiningAlternatives:(id)arg1 withAlternatives:(id)arg2 andAddingAlternatives:(id)arg3;
- (id)_pinyinStringByCombiningPinyinString:(id)arg1 withPinyinString:(id)arg2;
- (unsigned long long)_getSplitIndexes:(unsigned long long *)arg1 maxCount:(unsigned long long)arg2 forPinyinInputString:(id)arg3;
- (id)_primitiveRetainedAlternativesForPinyinInputString:(id)arg1;
- (void)addModifiedPartialPinyinToArray:(id)arg1 connection:(struct _PR_DB_IO *)arg2 fromIndex:(unsigned long long)arg3 prevIndex:(unsigned long long)arg4 prevPrevIndex:(unsigned long long)arg5 prePrevPrevIndex:(unsigned long long)arg6 startingModificationsAt:(unsigned long long)arg7 inBuffer:(char *)arg8 length:(unsigned long long)arg9 initialSyllableCount:(unsigned long long)arg10 initialScore:(unsigned long long)arg11 prevScore:(unsigned long long)arg12 prevPrevScore:(unsigned long long)arg13 lastSyllableScore:(unsigned long long)arg14;
- (void)addModifiedPinyinToArray:(id)arg1 connection:(struct _PR_DB_IO *)arg2 fromIndex:(unsigned long long)arg3 prevIndex:(unsigned long long)arg4 prevPrevIndex:(unsigned long long)arg5 startingModificationsAt:(unsigned long long)arg6 inBuffer:(char *)arg7 length:(unsigned long long)arg8 initialSyllableCount:(unsigned long long)arg9 initialScore:(unsigned long long)arg10 prevScore:(unsigned long long)arg11 prevPrevScore:(unsigned long long)arg12 lastSyllableScore:(unsigned long long)arg13 couldBeAbbreviatedPinyin:(_Bool)arg14;
- (void)addSpecialModifiedPinyinToArray:(id)arg1 inBuffer:(char *)arg2 length:(unsigned long long)arg3 atEnd:(_Bool)arg4;
- (id)englishStringFromWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO *)arg3;
- (id)englishStringsFromWordBuffer:(char *)arg1 length:(unsigned long long)arg2 connection:(struct _PR_DB_IO *)arg3;
- (id)contextAlternativeAnnotatedStringsForPinyinInputString:(id)arg1;
- (void)_addContextAlternativesForPinyinInputString:(id)arg1 modifications:(id)arg2 afterIndex:(unsigned long long)arg3 delta:(long long)arg4 toArray:(id)arg5;
- (_Bool)inputStringIsFullOrAbbreviatedPinyin:(id)arg1;
- (_Bool)inputStringIsPinyin:(id)arg1 allowPartialLastSyllable:(_Bool)arg2;
- (id)spellServer:(id)arg1 suggestGuessesForKoreanWordRange:(struct _NSRange)arg2 inString:(id)arg3 options:(id)arg4;
- (id)_correctionResultForKoreanString:(id)arg1 range:(struct _NSRange)arg2 inString:(id)arg3 offset:(unsigned long long)arg4 tagger:(id)arg5 appIdentifier:(id)arg6 dictionary:(id)arg7 keyEventArray:(id)arg8;
- (void)addGuessesForKoreanWord:(id)arg1 includeAdditionalGuesses:(_Bool)arg2 toGuesses:(id)arg3;
- (id)externalStringForKoreanInternalString:(id)arg1;
- (id)internalStringForKoreanExternalString:(id)arg1;

@end

