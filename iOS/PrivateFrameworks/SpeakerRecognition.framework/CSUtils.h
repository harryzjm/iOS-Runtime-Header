//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@interface CSUtils : NSObject
{
}

+ (_Bool)supportsVoiceTriggerFides;
+ (_Bool)supportHandsFree;
+ (_Bool)supportsSpeakerRecognitionAssets;
+ (id)timeStampWithSaltGrain;
+ (id)deviceHwRevision;
+ (id)deviceBuildVersion;
+ (id)deviceUserAssignedName;
+ (double)systemUpTime;
+ (id)deviceProductVersion;
+ (id)deviceProductType;
+ (id)getFixedHighPrioritySerialQueueWithLabel:(id)arg1;
+ (id)getFixedPrioritySerialQueueWithLabel:(id)arg1 fixedPriority:(int)arg2;
+ (id)rootQueueWithFixedPriority:(int)arg1;
+ (_Bool)supportZeroFilter;
+ (_Bool)supportBeepCanceller;
+ (_Bool)supportCircularBuffer;
+ (_Bool)shouldDeinterleaveAudioOnCS;
+ (_Bool)supportBluetoothDeviceVoiceTrigger;
+ (_Bool)supportRemoraVoiceTrigger;
+ (_Bool)supportJarvisVoiceTrigger;
+ (_Bool)supportHearstVoiceTrigger;
+ (_Bool)hasRemoteCoreSpeech;
+ (_Bool)supportLazySessionActivation;
+ (_Bool)shouldDownloadVTAssetsOnDaemon;
+ (_Bool)supportLanguageDetector;
+ (_Bool)supportSessionActivateDelay;
+ (_Bool)shouldDelayPhaticForMyriadDecision;
+ (_Bool)supportPhatic;
+ (_Bool)supportPremiumModel;
+ (_Bool)supportContinuousAudioFingerprint;
+ (_Bool)supportAdBlocker;
+ (_Bool)isIOSDeviceSupportingBargeIn;
+ (_Bool)supportPremiumWatchAssets;
+ (_Bool)supportCompactPlus;
+ (_Bool)supportRaiseToSpeak;
+ (_Bool)supportTTS;
+ (_Bool)supportSAT;
+ (_Bool)supportSmartVolume;
+ (_Bool)supportHybridEndpointer;
+ (_Bool)supportCSTwoShotDecision;
+ (_Bool)supportSelfTriggerSuppression;
+ (_Bool)supportOpportunisticZLL;
+ (_Bool)supportPremiumAssets;
+ (_Bool)supportKeywordDetector;
+ (_Bool)supportContinuousVoiceTrigger;
+ (_Bool)shouldRunVTOnCS;
+ (id)_contentsOfDirectoryAtURL:(id)arg1 matchingPattern:(id)arg2 includingPropertiesForKeys:(id)arg3 error:(id *)arg4;
+ (void)_sortedURLsInDirectory:(id)arg1 matchingPattern:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)URLsInDirectory:(id)arg1 matchingPattern:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)clearLogFilesInDirectory:(id)arg1 matchingPattern:(id)arg2 exceedNumber:(unsigned long long)arg3;
+ (void)removeLogFilesInDirectory:(id)arg1 matchingPattern:(id)arg2 beforeDays:(float)arg3;
+ (id)_sharedDisposeLoggingQueue;
+ (struct AudioStreamBasicDescription)aiffFileASBD;
+ (struct AudioStreamBasicDescription)utteranceFileASBD;
+ (struct AudioStreamBasicDescription)lpcmNarrowBandASBD;
+ (struct AudioStreamBasicDescription)lpcmASBD;
+ (struct AudioStreamBasicDescription)lpcmNonInterleavedASBDWithSampleRate:(float)arg1 numberOfChannels:(unsigned int)arg2;
+ (struct AudioStreamBasicDescription)lpcmMonoNonInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription)lpcmNonInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription)lpcmNonInterleavedASBD;
+ (struct AudioStreamBasicDescription)lpcmInterleavedASBDWithSampleRate:(float)arg1 numberOfChannels:(unsigned int)arg2;
+ (struct AudioStreamBasicDescription)lpcmMonoInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription)lpcmInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription)lpcmInterleavedASBD;
+ (struct AudioStreamBasicDescription)speexASBD;
+ (struct AudioStreamBasicDescription)opusNarrowBandASBD;
+ (struct AudioStreamBasicDescription)opusASBD;
+ (struct AudioStreamBasicDescription)lpcmFloatASBD;
+ (struct AudioStreamBasicDescription)lpcmInt16NarrowBandASBD;
+ (struct AudioStreamBasicDescription)lpcmInt16ASBD;
+ (id)combineScoreFromPSR:(id)arg1 fromSAT:(id)arg2 withCombinedWt:(float)arg3;
+ (_Bool)encryptFileAt:(id)arg1 andSaveTo:(id)arg2 error:(id *)arg3;
+ (id)moveContentsOfSrcDirectory:(id)arg1 toDestDirectory:(id)arg2;
+ (id)removeItemAtPath:(id)arg1;
+ (id)_getUtterancesFromDirectory:(id)arg1;
+ (id)getImplicitEnrollmentUtterancesFromDirectory:(id)arg1;
+ (void)getEnrollmentUtterancesCountFromDirectory:(id)arg1 withCountBlock:(CDUnknownBlockType)arg2;
+ (id)getExplicitMarkedEnrollmentUtterancesFromDirectory:(id)arg1;
+ (id)getExplicitEnrollmentUtterancesFromDirectory:(id)arg1;
+ (id)getEnrollmentUtterancesFromDirectory:(id)arg1;
+ (void)segmentVoiceTriggerFromAudioFile:(id)arg1 withVTEventInfo:(id)arg2 withStorePayloadPortion:(_Bool)arg3 withCompletion:(CDUnknownBlockType)arg4;
+ (void)logSpeakerRecognitionGradingMetadataAtFilepath:(id)arg1 withScoreInfo:(id)arg2;
+ (id)getVoiceProfileForSiriProfileId:(id)arg1 forLanguageCode:(id)arg2;
+ (id)getVoiceProfilesForSiriProfileId:(id)arg1;
+ (void)getHomeUserIdForVoiceProfile:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
+ (id)getContentsOfDirectory:(id)arg1;
+ (void)dumpFilesInDirectory:(id)arg1;
+ (long long)getNumberOfAudioFilesInDirectory:(id)arg1;
+ (id)getImplicitUtteranceCacheDirectory;
+ (_Bool)isCurrentDeviceCompatibleWithVoiceProfileAt:(id)arg1;
+ (_Bool)isCurrentDeviceCompatibleWithNewerVoiceProfileAt:(id)arg1;
+ (unsigned long long)deviceCategoryForDeviceProductType:(id)arg1;
+ (id)deviceCategoryStringRepresentationForCategoryType:(unsigned long long)arg1;
+ (id)getVoiceProfileIdentityFromVersionFilePath:(id)arg1;
+ (unsigned long long)getVoiceProfileProductCategoryFromVersionFilePath:(id)arg1;
+ (id)readJsonFileAtPath:(id)arg1;
+ (_Bool)isSpeakerRecognitionSupportedInLocale:(id)arg1;
+ (void)streamAudioFromFileUrl:(id)arg1 audioStreamBasicDescriptor:(struct AudioStreamBasicDescription)arg2 samplesPerStreamChunk:(unsigned long long)arg3 audioDataAvailableHandler:(CDUnknownBlockType)arg4;
+ (id)spidAudioTrainUtterancesDir;
+ (void)cleanupOrphanedVoiceIdGradingFiles;
+ (_Bool)ssrAudioLogsCountWithinPrivacyLimit;
+ (id)ssrAudioLogsDir;
+ (void)createDirectoryIfDoesNotExist:(id)arg1;
+ (id)spIdVoiceProfileImportRootDir;
+ (id)satConfigFileNameForCSSpIdType:(unsigned long long)arg1 forModelType:(unsigned long long)arg2 forAssetType:(unsigned long long)arg3;
+ (id)psrConfigFileNameForCSSpIdType:(unsigned long long)arg1;
+ (id)satConfigFileNameForCSSpIdType:(unsigned long long)arg1;
+ (id)stringForVoiceProfileRetrainerType:(unsigned long long)arg1;
+ (id)stringForSpeakerRecognizerType:(unsigned long long)arg1;
+ (unsigned long long)spIdTypeForString:(id)arg1;
+ (unsigned long long)explicitSpIdTypeForSpId:(unsigned long long)arg1;
+ (id)stringForCSSpIdType:(unsigned long long)arg1;
+ (id)stringForInvocationStyle:(unsigned long long)arg1;
+ (id)getSiriLanguageWithFallback:(id)arg1;
+ (id)recordContextString:(id)arg1;
+ (_Bool)isRecordContextJarvisButtonPress:(id)arg1;
+ (_Bool)isRecordContextJarvisVoiceTrigger:(id)arg1;
+ (_Bool)isRecordContextRaiseToSpeak:(id)arg1;
+ (_Bool)isRecordContextHearstDoubleTap:(id)arg1;
+ (_Bool)isRecordContextHearstVoiceTrigger:(id)arg1;
+ (_Bool)isRecordContextSpeakerIdTrainingTrigger:(id)arg1;
+ (_Bool)isRecordContextAutoPrompt:(id)arg1;
+ (_Bool)isRecordContextHomeButtonPress:(id)arg1;
+ (_Bool)isRecordContextVoiceTrigger:(id)arg1;
+ (unsigned long long)macHostTimeFromBridgeHostTime:(unsigned long long)arg1;
+ (unsigned long long)sampleCountFromHostTime:(unsigned long long)arg1 anchorHostTime:(unsigned long long)arg2 anchorSampleCount:(unsigned long long)arg3;
+ (unsigned long long)hostTimeFromSampleCount:(unsigned long long)arg1 anchorHostTime:(unsigned long long)arg2 anchorSampleCount:(unsigned long long)arg3;
+ (double)getHostClockFrequency;
+ (double)hostTimeToTimeInterval:(unsigned long long)arg1;
+ (float)hostTimeToSeconds:(unsigned long long)arg1;
+ (unsigned long long)secondsToHostTime:(float)arg1;
+ (void)applyNegative12dBGain:(id)arg1;
+ (void)apply12dBGain:(id)arg1;
+ (void)applyGain:(float)arg1 toBuffer:(id)arg2;
+ (id)convertToShortLPCMBufFromFloatLPCMBuf:(id)arg1;
+ (id)convertToFloatLPCMBufFromShortLPCMBuf:(id)arg1;
+ (id)assetHashInResourcePath:(id)arg1;
+ (_Bool)hasRemoteBuiltInMic;

@end

