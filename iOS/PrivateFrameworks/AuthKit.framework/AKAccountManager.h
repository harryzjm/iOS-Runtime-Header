//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ACAccountStore, ACAccountType, NSMutableDictionary;
@protocol OS_dispatch_queue;

@interface AKAccountManager : NSObject
{
    ACAccountStore *_accountStore;
    NSObject<OS_dispatch_queue> *_accountQueue;
    ACAccountType *_authKitAccountType;
    struct os_unfair_lock_s _authKitAccountTypeLock;
    ACAccountType *_appleIDAccountType;
    struct os_unfair_lock_s _appleIDAccountTypeLock;
    ACAccountType *_iCloudAccountType;
    struct os_unfair_lock_s _iCloudAccountTypeLock;
    struct os_unfair_lock_s _accountTypeCacheLock;
    NSMutableDictionary *_accountTypeCache;
}

+ (void)performWithinPersonaForAccount:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
+ (id)personaIDIfCurrentPersonaIsDataSeparated;
+ (id)stringRepresentationForService:(long long)arg1;
+ (_Bool)isAccountsFrameworkAvailable;
+ (id)sharedInstance;
- (void).cxx_destruct;
@property(retain, nonatomic) ACAccountStore *store; // @synthesize store=_accountStore;
- (void)setHasMDM:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)hasMDMForAccount:(id)arg1;
- (void)setBeneficiaryListVersion:(id)arg1 forAccount:(id)arg2;
- (id)beneficiaryListVersionForAccount:(id)arg1;
- (void)setCanHaveBeneficiary:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)canHaveBeneficiaryForAccount:(id)arg1;
- (void)setCanBeBeneficiary:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)canBeBeneficiaryForAccount:(id)arg1;
- (void)setBeneficiary:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)isBeneficiaryForAccount:(id)arg1;
- (void)setCustodianListVersion:(id)arg1 forAccount:(id)arg2;
- (id)custodianListVersionForAccount:(id)arg1;
- (void)setCustodianEnabled:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)custodianEnabledForAccount:(id)arg1;
- (void)setCanHaveCustodian:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)canHaveCustodianForAccount:(id)arg1;
- (void)setCanBeCustodian:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)canBeCustodianForAccount:(id)arg1;
- (void)setAdditionalInfo:(id)arg1 forAccount:(id)arg2;
- (id)additionalInfoForAccount:(id)arg1;
- (id)accountTypeForTypeIdentifier:(id)arg1;
@property(readonly, nonatomic) ACAccountType *appleIDAccountType;
@property(readonly, nonatomic) ACAccountType *iCloudAccountType;
- (id)_altDSIDForiCloudAccount:(id)arg1;
- (id)_aliasesForiCloudAccount:(id)arg1;
- (id)transportableAuthKitAccount:(id)arg1;
- (id)altDSIDforPrimaryiCloudAccount;
- (id)primaryiCloudAccount;
- (_Bool)isPrimaryiCloudAccountEmailVerified:(id)arg1;
- (_Bool)isPrimaryiCloudAccount:(id)arg1;
- (id)iCloudAccountForAltDSID:(id)arg1;
- (id)iCloudAccountForAppleID:(id)arg1;
- (_Bool)hasPrimaryiCloudAccountForAltDSID:(id)arg1;
- (_Bool)hasPrimaryiCloudAccountForAppleID:(id)arg1;
- (void)removeUnusedAndDuplicateAuthKitAccountsWithCompletion:(CDUnknownBlockType)arg1;
- (id)activeServiceNamesForAccount:(id)arg1;
- (id)accountsUsingService:(long long)arg1;
- (id)servicesUsingAccount:(id)arg1;
- (void)setAccount:(id)arg1 inUse:(_Bool)arg2 byService:(long long)arg3;
- (void)_removeTokenForKeys:(id)arg1 forAccount:(id)arg2;
- (void)_removeTokenKey:(id)arg1 forAccount:(id)arg2;
- (void)removeContinuationTokenForAccount:(id)arg1;
- (void)removeAllPasswordResetTokens;
- (id)mostRecentlyUsedAuthKitAccount;
- (id)_matchingServiceAccountForAuthKitAccount:(id)arg1 service:(long long)arg2;
- (_Bool)_isAccountEligibleForSecurityUpgrade:(id)arg1 ofServiceType:(long long)arg2;
- (id)_accountTypeForServiceType:(long long)arg1;
- (long long)_serviceTypeForServiceNameString:(id)arg1;
- (id)_defaultSecurityUpgradeServiceNames;
- (id)_serviceTypesForSecurityUpgrade;
- (id)accountEligibleForUpdate;
- (id)primaryAuthKitAccount;
- (id)appleIDAccountWithAppleID:(id)arg1;
- (id)appleIDAccountWithAltDSID:(id)arg1;
- (id)allAuthKitAccounts;
@property(readonly, nonatomic) ACAccountType *authKitAccountType;
- (id)authKitAccountWithAppleID:(id)arg1;
- (id)authKitAccountWithDSID:(id)arg1;
- (id)authKitAccountWithAltDSID:(id)arg1;
- (id)_tokenWithName:(id)arg1 forAccount:(id)arg2 error:(id *)arg3;
- (void)removeMasterTokenForAccount:(id)arg1;
- (id)masterTokenForAccount:(id)arg1;
- (id)passwordResetTokenBackupForAccount:(id)arg1 error:(id *)arg2;
- (id)passwordResetTokenForAccount:(id)arg1 error:(id *)arg2;
- (id)continuationTokenForAccount:(id)arg1 error:(id *)arg2;
- (id)hearbeatTokenForAccount:(id)arg1 error:(id *)arg2;
- (id)passwordResetTokenBackupForAccount:(id)arg1;
- (id)passwordResetTokenForAccount:(id)arg1;
- (id)continuationTokenForAccount:(id)arg1;
- (id)hearbeatTokenForAccount:(id)arg1;
- (void)setRepairState:(unsigned long long)arg1 forAccount:(id)arg2;
- (unsigned long long)repairStateForAccount:(id)arg1;
- (_Bool)needsRepairForAccount:(id)arg1;
- (void)updateSatoriWarmUpTimestampForAccount:(id)arg1;
- (_Bool)shouldPerformSatoriWarmupVerificationForAccount:(id)arg1;
- (void)setDeviceTrustRevoked:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)deviceTrustRevokedForAccount:(id)arg1;
- (void)updateAuthModeTimestampForAccount:(id)arg1;
- (_Bool)shouldUpdateAuthModeForAccount:(id)arg1;
- (void)setAuthenticationMode:(unsigned long long)arg1 forAccount:(id)arg2;
- (unsigned long long)authenticationModeForAccount:(id)arg1;
- (void)setSecurityLevel:(unsigned long long)arg1 forAccount:(id)arg2;
- (unsigned long long)securityLevelForAccount:(id)arg1;
- (_Bool)saveAccount:(id)arg1 error:(id *)arg2;
- (void)setSelectedAuthorizationEmail:(id)arg1 forAccount:(id)arg2;
- (id)selectedAuthorizationEmailForAccount:(id)arg1;
- (void)setSelectedPrivateEmail:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)selectedPrivateEmailForAccount:(id)arg1;
- (void)setForwardingEmail:(id)arg1 forAccount:(id)arg2;
- (id)forwardingEmailForAccount:(id)arg1;
- (void)setFamilyName:(id)arg1 forAccount:(id)arg2;
- (id)familyNameForAccount:(id)arg1;
- (void)setGivenName:(id)arg1 forAccount:(id)arg2;
- (id)givenNameForAccount:(id)arg1;
- (void)setReachableEmailAddresses:(id)arg1 forAccount:(id)arg2;
- (id)reachableEmailAddressesForAccount:(id)arg1;
- (void)setAuthorizationUsed:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)authorizationUsedForAccount:(id)arg1;
- (void)setAppleIDCountryCode:(id)arg1 forAccount:(id)arg2;
- (id)appleIDCountryCodeForAccount:(id)arg1;
- (void)setAgeOfMajority:(id)arg1 forAccount:(id)arg2;
- (id)ageOfMajorityForAccount:(id)arg1;
- (void)setDemoAccount:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)demoAccountForAccount:(id)arg1;
- (void)setUserUnderage:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)userUnderAgeForAccount:(id)arg1;
- (void)setPhoneAsAppleID:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)phoneAsAppleIDForAccount:(id)arg1;
- (void)setVerifiedPrimaryEmail:(_Bool)arg1 forAccount:(id)arg2;
- (_Bool)verifiedPrimaryEmailForAccount:(id)arg1;
- (void)setPrimaryEmailAddress:(id)arg1 forAccount:(id)arg2;
- (id)primaryEmailAddressForAccount:(id)arg1;
- (_Bool)_setUsername:(id)arg1 forAccount:(id)arg2;
- (void)updateUsername:(id)arg1 forAccountsWithAltDSID:(id)arg2;
- (void)updateVerifiedEmail:(_Bool)arg1 forAccountWithAltDSID:(id)arg2;
- (id)formattedUsernameForAccount:(id)arg1;
- (void)setAliases:(id)arg1 forAccount:(id)arg2;
- (id)aliasesForAccount:(id)arg1;
- (id)combinedAliasesAndReachableEmailsForAccount:(id)arg1;
- (void)setDSID:(id)arg1 forAccount:(id)arg2;
- (id)DSIDForAccount:(id)arg1;
- (void)setAltDSID:(id)arg1 forAccount:(id)arg2;
- (id)altDSIDForAccount:(id)arg1;
- (id)init;

@end

