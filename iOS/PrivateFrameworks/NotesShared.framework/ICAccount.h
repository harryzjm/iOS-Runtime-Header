//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <NotesShared/ICCloudObject-Protocol.h>

@class ICAccountData, ICAccountProxy, ICFolder, NSData, NSDictionary, NSPersistentStore, NSSet, NSString;

@interface ICAccount <ICCloudObject>
{
    _Bool _didAddObservers;
    _Bool _didAddTrashObservers;
    ICFolder *_defaultFolder;
    ICFolder *_trashFolder;
    ICFolder *_systemPaperFolder;
    ICAccountProxy *_accountProxy;
}

+ (id)keyPathsForValuesAffectingCanBeSharedViaICloud;
+ (id)mostRecentSystemPaperNoteInManagedObjectContext:(id)arg1;
+ (void)ensureSystemPaperFoldersExistInManagedObjectContext:(id)arg1;
+ (unsigned long long)countOfSystemPaperFoldersAcrossAllAccountsInContext:(id)arg1;
+ (id)keyPathsForValuesAffectingVisibleNoteContainerChildren;
+ (id)keyPathsForValuesAffectingLocalizedName;
+ (id)standardFolderIdentifierWithPrefix:(id)arg1 accountIdentifier:(id)arg2 accountType:(int)arg3;
+ (id)systemPaperFolderIdentifierForAccount:(id)arg1;
+ (void)localeDidChange:(id)arg1;
+ (void)initialize;
+ (void)setAccountUtilities:(id)arg1;
+ (id)accountUtilities;
+ (_Bool)hasModernAccountInContext:(id)arg1;
+ (_Bool)hasActiveCloudKitAccountInContext:(id)arg1;
+ (id)accountsMatchingPredicate:(id)arg1 context:(id)arg2;
+ (id)localizedLocalAccountNameMidSentence;
+ (id)localizedLocalAccountName;
+ (_Bool)clearAccountForAppleCloudKitTable;
+ (_Bool)isCloudKitAccountAvailableInContext:(id)arg1;
+ (_Bool)isCloudKitAccountAvailable;
+ (id)accountsWithAccountType:(int)arg1 context:(id)arg2;
+ (id)allActiveCloudKitAccountsInContext:(id)arg1;
+ (id)allCloudKitAccountsInContext:(id)arg1;
+ (id)allActiveAccountsInContext:(id)arg1 sortDescriptors:(id)arg2 relationshipKeyPathsForPrefetching:(id)arg3;
+ (id)allActiveAccountsInContextWithDefaultBeingFirstIfApplicable:(id)arg1;
+ (id)allActiveAccountsInContextSortedByAccountType:(id)arg1;
+ (id)allActiveAccountsInContext:(id)arg1;
+ (unsigned long long)numberOfCloudKitAccountsInContext:(id)arg1 onlyMigrated:(_Bool)arg2;
+ (id)passwordProtectedNoteIdentifiersInAccountIdentifier:(id)arg1 context:(id)arg2;
+ (id)allAccountIdentifiersInContext:(id)arg1;
+ (id)allAccountsInContext:(id)arg1;
+ (id)defaultAccountInContext:(id)arg1;
+ (id)localAccountInContext:(id)arg1;
+ (id)cloudKitIfMigratedElseLocalAccountInContext:(id)arg1;
+ (id)cloudKitAccountInContext:(id)arg1;
+ (id)cloudKitAccountWithIdentifier:(id)arg1 context:(id)arg2;
+ (id)accountWithIdentifier:(id)arg1 context:(id)arg2;
+ (void)deleteAccountWithBatchDelete:(id)arg1;
+ (void)deleteAccount:(id)arg1;
+ (id)inMemoryAccountInContext:(id)arg1;
+ (id)newLocalAccountInContext:(id)arg1;
+ (id)newAccountWithIdentifier:(id)arg1 type:(int)arg2 context:(id)arg3;
+ (void)initializeLocalAccountNamesInBackground;
+ (void)enumerateAllCloudObjectsInContext:(id)arg1 batchSize:(unsigned long long)arg2 saveAfterBatch:(_Bool)arg3 usingBlock:(CDUnknownBlockType)arg4;
+ (id)allCloudObjectIDsInContext:(id)arg1 passingTest:(CDUnknownBlockType)arg2;
+ (id)existingCloudObjectForRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;
- (void).cxx_destruct;
@property(retain, nonatomic) ICAccountProxy *accountProxy; // @synthesize accountProxy=_accountProxy;
@property(retain, nonatomic) ICFolder *systemPaperFolder; // @synthesize systemPaperFolder=_systemPaperFolder;
@property(retain, nonatomic) ICFolder *trashFolder; // @synthesize trashFolder=_trashFolder;
@property(retain, nonatomic) ICFolder *defaultFolder; // @synthesize defaultFolder=_defaultFolder;
@property(nonatomic) _Bool didAddTrashObservers; // @synthesize didAddTrashObservers=_didAddTrashObservers;
@property(nonatomic) _Bool didAddObservers; // @synthesize didAddObservers=_didAddObservers;
- (id)replicaIDForBundleIdentifier:(id)arg1;
- (_Bool)allowsExporting;
- (_Bool)allowsImporting;
- (void)updateSubFolderMergeableDataChangeCount;
- (id)subFolderOrderMergeableData;
- (void)setSubFolderOrderMergeableData:(id)arg1;
- (id)visibleSubFolders;
- (id)ic_loggingValues;
- (id)ic_loggingIdentifier;
- (void)updateTrashFolderHiddenNoteContainerState;
- (void)managedObjectContextDidSave:(id)arg1;
- (id)noteVisibilityTestingForSearchingAccount;
- (_Bool)supportsEditingNotes;
- (id)predicateForSearchableAttachments;
- (id)predicateForSearchableNotes;
- (id)predicateForVisibleAttachmentsIncludingTrash;
- (id)predicateForVisibleAttachments;
- (id)predicateForVisibleNotesIncludingTrash;
- (id)predicateForVisibleNotes;
- (id)predicateForAttachmentsInAccount;
- (id)predicateForNotesInAccount;
- (id)titleForTableViewCell;
- (void)updateAccountNameForAccountListSorting;
@property(nonatomic) _Bool didChooseToMigrate; // @dynamic didChooseToMigrate;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(nonatomic) int accountType; // @dynamic accountType;
- (_Bool)isAllNotesContainer;
- (id)titleForNavigationBar;
- (unsigned long long)visibleAttachmentsIncludingTrashCount;
- (unsigned long long)visibleNotesIncludingTrashCount;
- (unsigned long long)visibleNotesCount;
- (id)visibleNotes;
- (id)accountName;
- (_Bool)canBeSharedViaICloud;
- (_Bool)canPasswordProtectNotes;
- (id)passwordProtectedNotes;
- (id)cryptoPassphraseVerifier;
@property(nonatomic) _Bool hidesSystemPaperNotesInCustomFolders;
- (_Bool)createSystemPaperFolderIfNecessary;
- (_Bool)hasSystemPaperFolder;
- (id)systemPaperNotes;
- (id)systemPaperBundlesDirectoryURL;
- (id)systemPaperDirectoryURL;
- (void)deleteUnusedHashtagsWithStandardizedContent:(id)arg1;
- (id)previewImageDirectoryURL;
- (id)exportableMediaDirectoryURL;
- (id)mediaDirectoryURL;
- (id)fallbackImageDirectoryURL;
- (id)accountFilesDirectoryURLInApplicationDataContainer;
- (id)accountFilesDirectoryURL;
- (_Bool)shouldExcludeFilesFromCloudBackup;
- (id)allChildObjects;
- (id)allItemsFolderLocalizedTitle;
- (id)folderWithIdentifier:(id)arg1;
- (id)subFolderIdentifiersOrderedSet;
- (id)visibleNoteContainerChildren;
- (id)visibleNoteContainers;
- (id)reservedAccountFolderTitles;
- (_Bool)hasAnyCustomFolders;
- (_Bool)visibleRootFoldersContainFolderWithTitle:(id)arg1;
- (id)visibleFoldersWithParent:(id)arg1;
- (id)predicateForPinnedNotes;
- (id)predicateForCustomFolders;
- (id)predicateForVisibleFolders;
- (id)predicateForFolders;
- (unsigned long long)indexOfCustomRootLevelFolder:(id)arg1;
- (id)customRootLevelFolders;
- (_Bool)containsSharedFolders;
- (unsigned long long)visibleCustomFoldersCount;
- (id)visibleFolders;
- (_Bool)hasSameCryptoKeyAsAccount:(id)arg1;
- (long long)compare:(id)arg1;
- (_Bool)supportsLegacyTombstones;
- (_Bool)isDeletable;
- (_Bool)isLeaf;
@property(readonly, nonatomic) NSPersistentStore *persistentStore;
- (id)localizedNameMidSentence;
@property(readonly, nonatomic) NSString *localizedName;
- (id)standardFolderIdentifierWithPrefix:(id)arg1;
- (id)systemPaperFolderIdentifier;
- (id)trashFolderIdentifier;
- (id)defaultFolderIdentifier;
- (id)containerIdentifier;
- (id)systemPaperFolderNoCreate;
- (void)createSystemPaperFolder;
- (void)createTrashFolder;
- (void)createDefaultFolder;
- (void)createStandardFolders;
- (void)performBlockInPersonaContextIfNecessary:(CDUnknownBlockType)arg1;
- (id)customNoteSortTypeValue;
- (id)accountDataCreateIfNecessary;
- (void)setMarkedForDeletion:(_Bool)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)removeAllObserversIfNecessary;
- (void)removeTrashObserversIfNecessary;
- (void)addTrashObserversIfNecessary;
- (void)dealloc;
- (void)willTurnIntoFault;
- (void)prepareForDeletion;
- (void)awakeFromInsert;
- (void)awakeFromFetch;
- (id)cacheKey;
@property(readonly, nonatomic) NSString *dsid;
@property(readonly, nonatomic) _Bool isManaged;
- (id)newlyCreatedRecord;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2 force:(_Bool)arg3;
- (_Bool)shouldBeDeletedFromLocalDatabase;
@property(readonly, nonatomic) _Bool needsToBePushedToCloud;
@property(readonly, nonatomic) _Bool needsToBeDeletedFromCloud;
- (id)recordType;
- (id)recordZoneName;
- (id)recordName;
- (_Bool)isInICloudAccount;

// Remaining properties
@property(retain, nonatomic) ICAccountData *accountData; // @dynamic accountData;
@property(retain, nonatomic) NSData *cryptoVerifier; // @dynamic cryptoVerifier;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) NSSet *deviceMigrationStates; // @dynamic deviceMigrationStates;
@property(nonatomic) _Bool didFinishMigration; // @dynamic didFinishMigration;
@property(nonatomic) _Bool didMigrateOnMac; // @dynamic didMigrateOnMac;
@property(retain, nonatomic) NSSet *folders; // @dynamic folders;
@property(readonly) unsigned long long hash;
@property(retain, nonatomic) NSSet *hashtags; // @dynamic hashtags;
@property(retain, nonatomic) NSSet *legacyTombstones; // @dynamic legacyTombstones;
@property(readonly, nonatomic) _Bool needsToBeFetchedFromCloud;
@property(retain, nonatomic) NSSet *notes; // @dynamic notes;
@property(retain, nonatomic) NSSet *ownerInverse; // @dynamic ownerInverse;
@property(retain, nonatomic) NSDictionary *replicaIDToBundleIdentifier; // @dynamic replicaIDToBundleIdentifier;
@property(retain, nonatomic) NSSet *serverChangeTokens; // @dynamic serverChangeTokens;
@property(copy, nonatomic) NSData *serverSideUpdateTaskContinuationToken; // @dynamic serverSideUpdateTaskContinuationToken;
@property(nonatomic) unsigned short serverSideUpdateTaskFailureCount; // @dynamic serverSideUpdateTaskFailureCount;
@property(copy, nonatomic) NSString *serverSideUpdateTaskLastAttemptedBuild; // @dynamic serverSideUpdateTaskLastAttemptedBuild;
@property(copy, nonatomic) NSString *serverSideUpdateTaskLastAttemptedVersion; // @dynamic serverSideUpdateTaskLastAttemptedVersion;
@property(copy, nonatomic) NSString *serverSideUpdateTaskLastCompletedBuild; // @dynamic serverSideUpdateTaskLastCompletedBuild;
@property(copy, nonatomic) NSString *serverSideUpdateTaskLastCompletedVersion; // @dynamic serverSideUpdateTaskLastCompletedVersion;
@property(nonatomic) _Bool storeDataSeparately; // @dynamic storeDataSeparately;
@property(readonly) Class superclass;
@property(retain, nonatomic) NSString *userRecordName; // @dynamic userRecordName;

@end

