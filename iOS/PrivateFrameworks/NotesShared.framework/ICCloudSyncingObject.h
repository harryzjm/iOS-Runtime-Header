//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreData/NSManagedObject.h>

#import <NotesShared/ICCloudObject-Protocol.h>
#import <NotesShared/ICLoggable-Protocol.h>

@class CKRecord, CKShare, ICCloudState, ICMergeableDictionary, NSArray, NSData, NSMutableDictionary, NSSet, NSString, NSUUID, TTOrderedSetVersionedDocument;

@interface ICCloudSyncingObject : NSManagedObject <ICCloudObject, ICLoggable>
{
    _Bool _needsToLoadDecryptedValues;
    _Bool mergingUnappliedEncryptedRecord;
    NSMutableDictionary *_decryptedValues;
    CKRecord *_serverRecord;
    CKShare *_serverShare;
    CKRecord *_userSpecificServerRecord;
    TTOrderedSetVersionedDocument *_activityEventsDocument;
    id _persistedActivityEventsStorage;
    id _checklistItemToActivityEventsStorage;
    NSUUID *_currentReplicaID;
    ICMergeableDictionary *_replicaIDToNotesVersion;
}

+ (id)predicateForObjectsWithIdentifiers:(id)arg1;
+ (id)predicateForVisibleObjects;
+ (id)allPasswordProtectedObjectsInContext:(id)arg1;
+ (id)shareSystemFieldsTransformer;
+ (id)recordSystemFieldsTransformer;
+ (void)resetAllDeletedByThisDeviceProperties;
+ (id)deletedByThisDeviceSet;
+ (id)deletedByThisDeviceOperationQueue;
+ (id)versionsByRecordIDByOperation;
+ (id)versionsByOperationQueue;
+ (id)keyPathsForValuesAffectingServerShareCheckingParent;
+ (id)keyPathsForValuesAffectingIsSharedReadOnly;
+ (id)keyPathsForValuesAffectingIsSharedViaICloud;
+ (id)keyPathsForValuesAffectingCanBeSharedViaICloud;
+ (long long)currentNotesVersion;
+ (id)keyPathsForValuesAffectingNeedsToBeDeletedFromCloud;
+ (void)deleteAllTemporaryAssetFilesForAllObjects;
+ (void)deleteTemporaryFilesForAsset:(id)arg1;
+ (void)deleteTemporaryAssetFilesForOperation:(id)arg1;
+ (id)temporaryAssetDirectoryURL;
+ (id)dataForAsset:(id)arg1;
+ (id)assetForTemporaryURL:(id)arg1;
+ (id)assetForData:(id)arg1;
+ (id)temporaryAssets;
+ (_Bool)supportsUserSpecificRecords;
+ (_Bool)supportsNotesVersionTracking;
+ (id)bundleIdentifiersWithReplicaID;
+ (_Bool)supportsActivityEvents;
+ (_Bool)needsToReFetchServerRecordValue:(id)arg1;
+ (id)keyPathsForValuesAffectingNeedsToBePushedToCloud;
+ (void)enumerateAllCloudObjectsInContext:(id)arg1 batchSize:(unsigned long long)arg2 saveAfterBatch:(_Bool)arg3 usingBlock:(CDUnknownBlockType)arg4;
+ (id)allCloudObjectIDsInContext:(id)arg1 passingTest:(CDUnknownBlockType)arg2;
+ (id)cloudObjectWithIdentifier:(id)arg1 context:(id)arg2;
+ (id)newPlaceholderObjectForRecordName:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)newObjectWithIdentifier:(id)arg1 context:(id)arg2;
+ (id)newCloudObjectForRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)existingCloudObjectForRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)keyPathsForValuesAffectingZoneOwnerName;
+ (id)numberOfPushAttemptsToWaitByIdentifier;
+ (id)failedToSyncCountsByIdentifier;
+ (id)failureCountQueue;
+ (id)objectsWithRecordID:(id)arg1 context:(id)arg2;
+ (id)objectWithRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;
+ (id)keyPathsForValuesAffectingCloudAccount;
- (void).cxx_destruct;
@property(retain, nonatomic) id checklistItemToActivityEventsStorage; // @synthesize checklistItemToActivityEventsStorage=_checklistItemToActivityEventsStorage;
@property(retain, nonatomic) id persistedActivityEventsStorage; // @synthesize persistedActivityEventsStorage=_persistedActivityEventsStorage;
@property(nonatomic, getter=isMergingUnappliedEncryptedRecord) _Bool mergingUnappliedEncryptedRecord; // @synthesize mergingUnappliedEncryptedRecord;
@property(nonatomic) _Bool needsToLoadDecryptedValues; // @synthesize needsToLoadDecryptedValues=_needsToLoadDecryptedValues;
- (void)redactAuthorAttributions;
- (_Bool)trustsTimestampsFromReplicaID:(id)arg1;
@property(readonly, nonatomic) _Bool isVisible;
- (id)ic_loggingValues;
- (id)ic_loggingIdentifier;
- (id)shortLoggingDescription;
- (id)loggingDescription;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
- (_Bool)hasAllMandatoryFields;
- (void)resetUniqueIdentifier;
@property(retain, nonatomic) CKRecord *userSpecificServerRecord; // @synthesize userSpecificServerRecord=_userSpecificServerRecord;
@property(retain, nonatomic) CKShare *serverShare; // @synthesize serverShare=_serverShare;
@property(retain, nonatomic) CKRecord *serverRecord; // @synthesize serverRecord=_serverRecord;
@property(readonly, nonatomic) _Bool isUnsupported;
- (_Bool)isInCloud;
- (void)setInCloud:(_Bool)arg1;
- (_Bool)deletedByThisDevice;
- (void)setDeletedByThisDevice:(_Bool)arg1;
- (long long)isPushingSameOrLaterThanVersion:(long long)arg1;
- (void)setVersion:(long long)arg1 forOperation:(id)arg2;
- (long long)versionForOperation:(id)arg1;
- (_Bool)shouldFallBackToCheckAllCryptoKeys;
- (id)parentEncryptableObject;
- (id)cryptoPassphraseVerifier;
- (void)setCryptoMainKey:(id)arg1;
- (id)cryptoMainKey;
- (void)saveEncryptedJSON;
- (_Bool)isEncryptableKeyBinaryData:(id)arg1;
- (void)setPrimitiveValue:(id)arg1 forEncryptableKey:(id)arg2;
- (void)setValue:(id)arg1 forEncryptableKey:(id)arg2;
- (id)primitiveValueForEncryptableKey:(id)arg1;
- (id)valueForEncryptableKey:(id)arg1;
- (void)setDecryptedValue:(id)arg1 forKey:(id)arg2;
- (id)decryptedValueForKey:(id)arg1;
- (id)mergeDecryptedValue:(id)arg1 withOldValue:(id)arg2 forKey:(id)arg3;
- (void)decryptAndMergeEncryptedJSON:(id)arg1;
- (void)mergeUnappliedEncryptedRecord;
- (void)loadDecryptedValuesIfNecessary;
- (void)initializeCryptoPropertiesFromObject:(id)arg1;
- (void)initializeCryptoProperties;
@property(readonly, nonatomic) NSMutableDictionary *decryptedValues; // @synthesize decryptedValues=_decryptedValues;
- (_Bool)supportsEncryptedValuesDictionary;
- (void)saveAndClearDecryptedData;
- (void)saveAndClearDecryptedDataIfNecessary;
@property(retain, nonatomic) NSData *encryptedValuesJSON; // @dynamic encryptedValuesJSON;
@property(retain, nonatomic) NSData *cryptoWrappedKey; // @dynamic cryptoWrappedKey;
@property(nonatomic) long long cryptoIterationCount; // @dynamic cryptoIterationCount;
@property(retain, nonatomic) NSData *cryptoSalt; // @dynamic cryptoSalt;
@property(retain, nonatomic) NSData *cryptoInitializationVector; // @dynamic cryptoInitializationVector;
@property(retain, nonatomic) NSData *cryptoTag; // @dynamic cryptoTag;
- (id)participantForUserID:(id)arg1;
- (id)shareDescriptionForShareParticipants:(id)arg1;
- (id)shareDescription;
- (void)didAcceptShare:(id)arg1;
- (void)setServerShareIfNewer:(id)arg1;
- (id)shareType;
- (id)shareTitle;
@property(readonly, nonatomic) CKShare *serverShareCheckingParent;
- (id)sharedOwnerName;
- (_Bool)isSharedReadOnly;
- (id)sharedRootObject;
- (_Bool)isSharedRootObject;
- (_Bool)isOwnedByCurrentUser;
- (_Bool)canBeRootShareObject;
- (_Bool)isSharedViaICloud;
- (_Bool)canBeSharedViaICloud;
- (_Bool)needsToDeleteShare;
- (void)updateChangeCountsForUnsavedParentReferences;
- (void)updateParentReferenceIfNecessary;
- (id)childCloudObjectsForMinimumSupportedVersionPropagation;
@property(readonly, copy, nonatomic) NSArray *allChildCloudObjects;
@property(readonly, copy, nonatomic) NSArray *childCloudObjects;
- (id)parentCloudObjectForMinimumSupportedVersionPropagation;
- (id)parentCloudObjectModificationDate;
- (id)parentCloudObject;
@property(readonly, copy, nonatomic) NSArray *ancestorCloudObjects;
- (_Bool)supportsDeletionByTTL;
@property(nonatomic) _Bool markedForDeletion; // @dynamic markedForDeletion;
- (void)unmarkForDeletion;
- (void)markForDeletion;
- (void)fixBrokenReferences;
- (id)objectsToBeDeletedBeforeThisObject;
- (void)deleteFromLocalDatabase;
- (_Bool)shouldBeDeletedFromLocalDatabase;
- (_Bool)isDeletable;
- (void)didDeleteUserSpecificRecordID:(id)arg1;
- (void)didFailToSaveUserSpecificRecord:(id)arg1 accountID:(id)arg2 error:(id)arg3;
- (void)didSaveUserSpecificRecord:(id)arg1;
- (void)mergeDataFromUserSpecificRecord:(id)arg1 accountID:(id)arg2;
- (void)didFetchUserSpecificRecord:(id)arg1 accountID:(id)arg2 force:(_Bool)arg3;
- (id)newlyCreatedUserSpecificRecord;
- (id)userSpecificRecordID;
- (id)userSpecificRecordType;
- (_Bool)wantsUserSpecificRecord;
- (void)willUpdateDeviceReplicaIDsToNotesVersion:(long long)arg1;
- (_Bool)updateDeviceReplicaIDsToCurrentNotesVersionIfNeeded;
- (unsigned long long)mergeReplicaIDToNotesVersion:(id)arg1;
- (void)setNotesVersion:(id)arg1 forReplicaID:(id)arg2;
- (id)notesVersionForReplicaID:(id)arg1;
@property(readonly, nonatomic) ICMergeableDictionary *replicaIDToNotesVersion; // @synthesize replicaIDToNotesVersion=_replicaIDToNotesVersion;
- (void)setCurrentReplicaID:(id)arg1;
@property(readonly, copy, nonatomic) NSUUID *currentReplicaID; // @synthesize currentReplicaID=_currentReplicaID;
@property(readonly, copy, nonatomic) NSSet *deviceReplicaIDs;
- (_Bool)allowsImporting;
- (_Bool)allowsExporting;
- (void)requireMinimumSupportedVersionAndPropagateToChildObjects:(long long)arg1;
- (void)resetToIntrinsicNotesVersionAndPropagateToChildObjects;
- (void)unitTest_setMinimumSupportedNotesVersion:(long long)arg1;
@property(readonly, nonatomic) _Bool shouldSyncMinimumSupportedNotesVersion;
@property(readonly, nonatomic) long long intrinsicNotesVersion;
- (unsigned long long)mergeActivityEventsDocument:(id)arg1;
@property(readonly, nonatomic) TTOrderedSetVersionedDocument *activityEventsDocument; // @synthesize activityEventsDocument=_activityEventsDocument;
@property(retain, nonatomic) NSData *activityEventsData; // @dynamic activityEventsData;
- (void)objectWasFetchedButDoesNotExistInCloud;
- (void)objectWasFetchedFromCloudWithRecord:(id)arg1 accountID:(id)arg2 force:(_Bool)arg3;
- (void)objectWasFetchedFromCloudWithRecord:(id)arg1 accountID:(id)arg2;
- (void)objectWasPushedToCloudWithOperation:(id)arg1 serverRecord:(id)arg2;
- (void)objectFailedToBePushedToCloudWithOperation:(id)arg1 record:(id)arg2 error:(id)arg3;
- (void)objectWillBePushedToCloudWithOperation:(id)arg1;
- (void)objectWasDeletedFromCloudByAnotherDevice;
- (void)objectWasDeletedFromCloud;
- (_Bool)needsToFetchAfterServerRecordChanged:(id)arg1;
- (_Bool)hasSuccessfullyPushedLatestVersionToCloud;
@property(readonly, nonatomic) _Bool needsToBePushedToCloud;
- (void)mergeCryptoTagAndInitializationVectorFromRecord:(id)arg1;
- (void)mergeCryptoFieldsFromRecord:(id)arg1;
- (void)mergeEncryptedDataFromRecord:(id)arg1;
@property(readonly, nonatomic) _Bool canSyncPasswordProtectionFields;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2 force:(_Bool)arg3;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2;
- (id)newlyCreatedRecordWithObfuscator:(id)arg1;
- (id)newlyCreatedRecord;
- (_Bool)isValidObject;
- (_Bool)isInICloudAccount;
@property(readonly, nonatomic) _Bool needsToBeDeletedFromCloud;
- (id)recordType;
- (long long)databaseScope;
- (id)recordID;
@property(retain, nonatomic) NSString *zoneOwnerName; // @dynamic zoneOwnerName;
- (id)recordZoneName;
- (id)recordName;
@property(readonly, nonatomic) _Bool shouldBeIgnoredForSync;
- (void)resetFailureCounts;
- (void)deleteChangeTokensAndReSync;
- (void)decrementFailureCounts;
- (void)incrementFailureCounts;
@property long long numberOfPushAttemptsToWaitCount;
@property long long failedToSyncCount;
- (void)clearServerRecord;
- (void)clearChangeCount;
- (void)updateChangeCount;
@property(nonatomic) _Bool needsToBeFetchedFromCloud; // @dynamic needsToBeFetchedFromCloud;
- (void)assignToPersistentStore:(id)arg1;
- (id)cloudAccount;
- (_Bool)validateIdentifier:(inout id *)arg1 error:(out id *)arg2;
- (void)willSave;
- (void)awakeFromFetch;
- (void)awakeFromInsert;
- (void)didTurnIntoFault;
- (id)initWithEntity:(id)arg1 insertIntoManagedObjectContext:(id)arg2;
- (void)addEmailAddressesAndPhoneNumbersToAttributeSet:(id)arg1;

// Remaining properties
@property(retain, nonatomic) ICCloudState *cloudState; // @dynamic cloudState;
@property(readonly) unsigned long long hash;
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(nonatomic) _Bool isPasswordProtected; // @dynamic isPasswordProtected;
@property(nonatomic) long long minimumSupportedNotesVersion; // @dynamic minimumSupportedNotesVersion;
@property(nonatomic) _Bool needsInitialFetchFromCloud; // @dynamic needsInitialFetchFromCloud;
@property(nonatomic) _Bool needsToSaveUserSpecificRecord; // @dynamic needsToSaveUserSpecificRecord;
@property(retain, nonatomic) NSString *passwordHint; // @dynamic passwordHint;
@property(retain, nonatomic) NSString *primitiveZoneOwnerName; // @dynamic primitiveZoneOwnerName;
@property(retain, nonatomic) NSData *replicaIDToNotesVersionData; // @dynamic replicaIDToNotesVersionData;
@property(retain, nonatomic) NSData *serverRecordData; // @dynamic serverRecordData;
@property(retain, nonatomic) NSData *serverShareData; // @dynamic serverShareData;
@property(readonly) Class superclass;
@property(retain, nonatomic) NSData *unappliedEncryptedRecord; // @dynamic unappliedEncryptedRecord;
@property(retain, nonatomic) NSData *userSpecificServerRecordData; // @dynamic userSpecificServerRecordData;

@end

