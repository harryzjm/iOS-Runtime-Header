//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <VoiceShortcuts/VCTriggerEventRunnerDelegate-Protocol.h>
#import <VoiceShortcuts/VCUserNotificationManagerDelegate-Protocol.h>

@class NSString, VCTriggerEventRunner, VCUserNotificationManager;
@protocol OS_dispatch_queue, WFDatabaseProvider;

@interface VCTriggerEventQueue : NSObject <VCUserNotificationManagerDelegate, VCTriggerEventRunnerDelegate>
{
    id <WFDatabaseProvider> _databaseProvider;
    VCUserNotificationManager *_notificationManager;
    VCTriggerEventRunner *_triggerEventRunner;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (double)rateLimitingTimeoutForTrigger:(id)arg1 runEvents:(id)arg2;
+ (_Bool)shouldRunTrigger:(id)arg1 forEvent:(id)arg2 runEvents:(id)arg3 error:(id *)arg4;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, nonatomic) VCTriggerEventRunner *triggerEventRunner; // @synthesize triggerEventRunner=_triggerEventRunner;
@property(readonly, nonatomic) VCUserNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
@property(readonly, nonatomic) id <WFDatabaseProvider> databaseProvider; // @synthesize databaseProvider=_databaseProvider;
- (void)logMetricForTrigger:(id)arg1;
- (void)didFinishRunningWithError:(id)arg1 cancelled:(_Bool)arg2 trigger:(id)arg3 runEvent:(id)arg4;
- (void)notificationManager:(id)arg1 didFailToPostNotificationPromptWithTriggerIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3;
- (void)notificationManager:(id)arg1 didDismissTriggerWithIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3;
- (void)notificationManager:(id)arg1 receivedConfirmationToRunTriggerWithIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3;
- (_Bool)isTriggerEventStale:(id)arg1;
- (void)removeAllStaleTriggerEventsIgnoringValidIDs:(id)arg1;
- (void)removeStalePendingNotificationsAndTriggerEvents;
- (_Bool)shouldRunEmailOrMessageTrigger:(id)arg1 forEvent:(id)arg2 runEvents:(id)arg3 error:(id *)arg4;
- (void)removePendingTriggerEventsWithEventIDs:(id)arg1;
- (void)setConfirmedForTriggerEventIDs:(id)arg1 error:(id *)arg2;
- (id)triggerEventsForConfiguredTrigger:(id)arg1 eventInfo:(id)arg2 confirmed:(_Bool)arg3 error:(id *)arg4;
- (id)configuredTriggerForIdentifier:(id)arg1 workflowReference:(id *)arg2 error:(id *)arg3;
- (id)nextTriggerEventWithError:(id *)arg1;
- (_Bool)deleteTriggerEvent:(id)arg1 error:(id *)arg2;
- (unsigned long long)numberOfEventsInQueueWithConfirmationOnly:(_Bool)arg1;
- (id)databaseWithError:(id *)arg1;
- (void)enqueueTriggerWithIdentifier:(id)arg1 eventInfo:(id)arg2 force:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (void)runWithConfiguredTrigger:(id)arg1 workflowReference:(id)arg2 eventInfo:(id)arg3;
- (void)resumeWithConfiguredTrigger:(id)arg1 workflowReference:(id)arg2 eventInfo:(id)arg3;
- (void)resume;
- (id)initWithDatabaseProvider:(id)arg1 runCoordinator:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

