//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <SeparationAlerts/SAMonitoringSessionManagerServiceProtocol-Protocol.h>
#import <SeparationAlerts/SAScenarioClassifierClientProtocol-Protocol.h>
#import <SeparationAlerts/SATimeClientProtocol-Protocol.h>
#import <SeparationAlerts/SATravelTypeClassifierClientProtocol-Protocol.h>
#import <SeparationAlerts/SAWithYouDetectorClientProtocol-Protocol.h>

@class NSDate, NSHashTable, NSMutableDictionary, NSMutableSet, NSUUID, SADeviceRecord, SAPersistenceManager, TALocationLite;
@protocol SAAnalyticsServiceProtocol, SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol, SAGeoFenceRequestProtocol, SATimeServiceProtocol, SATravelTypeClassifierServiceProtocol, SAWithYouDetectorServiceProtocol, TAEventProtocol;

@interface SAMonitoringSessionManager : NSObject <SAMonitoringSessionManagerServiceProtocol, SAScenarioClassifierClientProtocol, SAWithYouDetectorClientProtocol, SATimeClientProtocol, SATravelTypeClassifierClientProtocol>
{
    _Bool _enabled;
    _Bool _standby;
    _Bool _requestedPeriodicScan;
    _Bool _isCompanionConnected;
    id <SATimeServiceProtocol> _clock;
    id <SAWithYouDetectorServiceProtocol> _withYouDetector;
    id <SAGeoFenceRequestProtocol> _fenceRequestServicer;
    id <SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol> _fenceManager;
    NSHashTable *_clients;
    NSMutableDictionary *_deviceUUIDtoMonitoringSession;
    TALocationLite *_lastLocation;
    SADeviceRecord *_deviceRecord;
    id <SAAnalyticsServiceProtocol> _analytics;
    id <SATravelTypeClassifierServiceProtocol> _travelTypeClassifier;
    NSMutableDictionary *_devices;
    NSMutableDictionary *_safeLocations;
    NSMutableDictionary *_deviceUUIDtoSafeLocationUUIDs;
    unsigned long long _disabledReasons;
    NSDate *_caLastAlertDate;
    long long _caBroughtOutOnTravel;
    SAPersistenceManager *_persistenceManager;
    NSUUID *_nextScheduledAlarmForPersistenceWrite;
    NSUUID *_scheduledAlarmForForceUpdateWithYouStatus;
    id <TAEventProtocol> _currentVisitOrLOIEvent;
    id <TAEventProtocol> _previousVisitOrLOIEvent;
    NSDate *_timeOfAttemptToLoadFromPersistence;
    NSMutableSet *_devicesWithToBePopulatedTrackedTravelingStartLocation;
}

+ (id)convertSAMonitoringSessionStateToString:(unsigned long long)arg1;
+ (id)createLocationFromCircularRegion:(id)arg1 forDevice:(id)arg2 withContext:(unsigned long long)arg3;
- (void).cxx_destruct;
@property(retain, nonatomic) NSMutableSet *devicesWithToBePopulatedTrackedTravelingStartLocation; // @synthesize devicesWithToBePopulatedTrackedTravelingStartLocation=_devicesWithToBePopulatedTrackedTravelingStartLocation;
@property(nonatomic) _Bool isCompanionConnected; // @synthesize isCompanionConnected=_isCompanionConnected;
@property(retain, nonatomic) NSDate *timeOfAttemptToLoadFromPersistence; // @synthesize timeOfAttemptToLoadFromPersistence=_timeOfAttemptToLoadFromPersistence;
@property(retain, nonatomic) id <TAEventProtocol> previousVisitOrLOIEvent; // @synthesize previousVisitOrLOIEvent=_previousVisitOrLOIEvent;
@property(retain, nonatomic) id <TAEventProtocol> currentVisitOrLOIEvent; // @synthesize currentVisitOrLOIEvent=_currentVisitOrLOIEvent;
@property(retain, nonatomic) NSUUID *scheduledAlarmForForceUpdateWithYouStatus; // @synthesize scheduledAlarmForForceUpdateWithYouStatus=_scheduledAlarmForForceUpdateWithYouStatus;
@property(retain, nonatomic) NSUUID *nextScheduledAlarmForPersistenceWrite; // @synthesize nextScheduledAlarmForPersistenceWrite=_nextScheduledAlarmForPersistenceWrite;
@property(retain, nonatomic) SAPersistenceManager *persistenceManager; // @synthesize persistenceManager=_persistenceManager;
@property(nonatomic) long long caBroughtOutOnTravel; // @synthesize caBroughtOutOnTravel=_caBroughtOutOnTravel;
@property(retain, nonatomic) NSDate *caLastAlertDate; // @synthesize caLastAlertDate=_caLastAlertDate;
@property(nonatomic) unsigned long long disabledReasons; // @synthesize disabledReasons=_disabledReasons;
@property(nonatomic) _Bool requestedPeriodicScan; // @synthesize requestedPeriodicScan=_requestedPeriodicScan;
@property(retain, nonatomic) NSMutableDictionary *deviceUUIDtoSafeLocationUUIDs; // @synthesize deviceUUIDtoSafeLocationUUIDs=_deviceUUIDtoSafeLocationUUIDs;
@property(retain, nonatomic) NSMutableDictionary *safeLocations; // @synthesize safeLocations=_safeLocations;
@property(retain, nonatomic) NSMutableDictionary *devices; // @synthesize devices=_devices;
@property(retain, nonatomic) id <SATravelTypeClassifierServiceProtocol> travelTypeClassifier; // @synthesize travelTypeClassifier=_travelTypeClassifier;
@property(retain, nonatomic) id <SAAnalyticsServiceProtocol> analytics; // @synthesize analytics=_analytics;
@property(retain, nonatomic) SADeviceRecord *deviceRecord; // @synthesize deviceRecord=_deviceRecord;
@property(retain, nonatomic) TALocationLite *lastLocation; // @synthesize lastLocation=_lastLocation;
@property(retain, nonatomic) NSMutableDictionary *deviceUUIDtoMonitoringSession; // @synthesize deviceUUIDtoMonitoringSession=_deviceUUIDtoMonitoringSession;
@property(retain, nonatomic) NSHashTable *clients; // @synthesize clients=_clients;
@property(retain, nonatomic) id <SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol> fenceManager; // @synthesize fenceManager=_fenceManager;
@property(retain, nonatomic) id <SAGeoFenceRequestProtocol> fenceRequestServicer; // @synthesize fenceRequestServicer=_fenceRequestServicer;
@property(retain, nonatomic) id <SAWithYouDetectorServiceProtocol> withYouDetector; // @synthesize withYouDetector=_withYouDetector;
@property(nonatomic) __weak id <SATimeServiceProtocol> clock; // @synthesize clock=_clock;
@property(nonatomic) _Bool standby; // @synthesize standby=_standby;
@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
- (void)didChangeTravelTypeFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (void)alarmFiredForUUID:(id)arg1;
- (void)scheduleNextForceUpdateWithYouStatus;
- (void)updatedWithYouStatusFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 forDeviceWithUUID:(id)arg3;
- (void)didForceUpdateWithYouStatus;
- (unsigned long long)scenarioClassForDeviceUUID:(id)arg1;
- (unsigned long long)stateForDeviceUUID:(id)arg1;
- (void)removeClient:(id)arg1;
- (void)addClient:(id)arg1;
- (void)didChangeScenarioClassFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 forDevice:(id)arg3;
- (void)handleSystemStateChanged:(id)arg1;
- (void)addDisableReason:(unsigned long long)arg1;
- (void)removeDisableReason:(unsigned long long)arg1;
- (void)handleGeofenceEvent:(id)arg1;
- (void)updateLocation:(id)arg1;
- (void)updateSafeLocations:(id)arg1;
- (void)updateDevicesWithSafeLocations:(id)arg1;
- (void)ingestTAEvent:(id)arg1;
- (_Bool)shouldIssueBookendedNotificationForDevice:(id)arg1;
- (_Bool)shouldIssueBookendedNotificationBasedOnTimeForDevice:(id)arg1;
- (_Bool)shouldIssueBookendedNotificationBasedOnLocationForDevice:(id)arg1;
- (_Bool)isWithinCurrentVisitOrLOI:(id)arg1;
- (void)removeSafeLocationsIfNeededPerNewSet:(id)arg1 forDevice:(id)arg2;
- (void)addSafeLocationsIfNeededPerNewSet:(id)arg1 forDevice:(id)arg2;
- (void)addDevicesIfNeededPerEvent:(id)arg1;
- (void)removeDevicesIfNeededPerEvent:(id)arg1;
- (void)handleModifiedSafeLocation:(id)arg1 forDeviceUUID:(id)arg2;
- (void)stopSafeLocation:(id)arg1 forDevice:(id)arg2;
- (void)startSafeLocation:(id)arg1 forDevice:(id)arg2;
- (void)removeAndStopSafeLocationsForDeviceUUID:(id)arg1;
- (void)removeSafeLocation:(id)arg1 forDeviceUUID:(id)arg2;
- (void)addSafeLocation:(id)arg1 forDeviceUUID:(id)arg2;
- (void)setSafeLocations:(id)arg1 forDeviceUUID:(id)arg2;
- (void)handleRemovedSafeLocation:(id)arg1;
- (void)handleModifiedSafeLocation:(id)arg1;
- (void)handleNewSafeLocation:(id)arg1;
- (void)removeDeviceWithUUID:(id)arg1 isLastDeviceEvent:(_Bool)arg2;
- (void)modifyDevice:(id)arg1;
- (void)addDevice:(id)arg1 isLastDeviceEvent:(_Bool)arg2;
- (void)notifyEarlyLeftBehind:(id)arg1;
- (void)notifyLeftBehind:(id)arg1 withRegion:(id)arg2;
- (void)notifyWhenLeftBehind:(id)arg1;
- (void)notifyWhileTraveling:(id)arg1;
- (void)storeSeparationLocation:(id)arg1;
- (void)removeTravelFenceForDevice:(id)arg1;
- (_Bool)addTravelFenceForDevice:(id)arg1;
- (_Bool)_isOnlyMonitoringDisconnectedCompanionDevice;
- (void)handleGeofenceExitedForDeviceUUID:(id)arg1;
- (void)handleSeparationForDeviceUUID:(id)arg1 withSafeLocationRecommendation:(id)arg2 context:(id)arg3;
- (void)startPeriodicScansIfNeeded;
- (void)startPeriodicScans;
- (void)stopPeriodicScansIfNotNeeded;
- (void)stopPeriodicScans;
- (_Bool)needPeriodicScan;
- (long long)determineTrackedTravelingCount;
- (void)changeMonitoringSessionState:(id)arg1 toState:(unsigned long long)arg2;
- (void)attemptToPopulateTrackedTravelingStartLocationForDevice:(id)arg1;
- (void)cancelMonitoringDevice:(id)arg1;
- (void)createMonitoringDevice:(id)arg1;
- (_Bool)anyDeviceInUnsafeLocation;
- (_Bool)allDevicesInSafeLocation;
- (void)forceStandbyMode:(id)arg1;
- (void)bootstrapMonitoringSessionRecord:(id)arg1;
- (void)configureBackgroundScanning;
- (void)requestToFetchLastVisit;
- (void)requestToStopBackgroundScanning;
- (void)requestToStartBackgroundScanning;
- (id)initWithWithYouDetector:(id)arg1 fenceRequestServicer:(id)arg2 fenceManager:(id)arg3 travelTypeClassifier:(id)arg4 clock:(id)arg5 deviceRecord:(id)arg6 analytics:(id)arg7 persistenceManager:(id)arg8;

@end

