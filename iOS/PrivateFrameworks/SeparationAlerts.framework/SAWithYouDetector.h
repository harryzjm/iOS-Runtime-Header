//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <SeparationAlerts/SATimeClientProtocol-Protocol.h>
#import <SeparationAlerts/SATravelTypeClassifierClientProtocol-Protocol.h>
#import <SeparationAlerts/SAWithYouDetectorServiceProtocol-Protocol.h>

@class NSDate, NSHashTable, NSUUID, SADeviceRecord;
@protocol SABluetoothScanRequestProtocol, SALocationRequestProtocol, SATimeServiceProtocol;

@interface SAWithYouDetector : NSObject <SAWithYouDetectorServiceProtocol, SATimeClientProtocol, SATravelTypeClassifierClientProtocol>
{
    _Bool _requestedScan;
    _Bool _requestedShortScan;
    _Bool _isNotifyWhileTravelingEnabled;
    _Bool _isPeriodicScansNeeded;
    _Bool _isInVehicularTravel;
    id <SATimeServiceProtocol> _clock;
    id <SABluetoothScanRequestProtocol> _bluetoothScanner;
    id <SALocationRequestProtocol> _locationRequester;
    NSHashTable *_clients;
    SADeviceRecord *_deviceRecord;
    NSDate *_lastStartOfScan;
    NSDate *_lastEndOfScan;
    NSDate *_nextOpportunisticScanDate;
    NSUUID *_nextScheduledAlarm;
    NSDate *_previousBufferEmptyTime;
    NSDate *_initializationTime;
}

+ (id)convertSAWithYouStatusToString:(unsigned long long)arg1;
- (void).cxx_destruct;
@property(retain, nonatomic) NSDate *initializationTime; // @synthesize initializationTime=_initializationTime;
@property(retain, nonatomic) NSDate *previousBufferEmptyTime; // @synthesize previousBufferEmptyTime=_previousBufferEmptyTime;
@property(retain, nonatomic) NSUUID *nextScheduledAlarm; // @synthesize nextScheduledAlarm=_nextScheduledAlarm;
@property(retain, nonatomic) NSDate *nextOpportunisticScanDate; // @synthesize nextOpportunisticScanDate=_nextOpportunisticScanDate;
@property(nonatomic) _Bool isInVehicularTravel; // @synthesize isInVehicularTravel=_isInVehicularTravel;
@property(nonatomic) _Bool isPeriodicScansNeeded; // @synthesize isPeriodicScansNeeded=_isPeriodicScansNeeded;
@property(nonatomic) _Bool isNotifyWhileTravelingEnabled; // @synthesize isNotifyWhileTravelingEnabled=_isNotifyWhileTravelingEnabled;
@property(retain, nonatomic) NSDate *lastEndOfScan; // @synthesize lastEndOfScan=_lastEndOfScan;
@property(retain, nonatomic) NSDate *lastStartOfScan; // @synthesize lastStartOfScan=_lastStartOfScan;
@property(nonatomic) _Bool requestedShortScan; // @synthesize requestedShortScan=_requestedShortScan;
@property(nonatomic) _Bool requestedScan; // @synthesize requestedScan=_requestedScan;
@property(retain, nonatomic) SADeviceRecord *deviceRecord; // @synthesize deviceRecord=_deviceRecord;
@property(retain, nonatomic) NSHashTable *clients; // @synthesize clients=_clients;
@property(nonatomic) __weak id <SALocationRequestProtocol> locationRequester; // @synthesize locationRequester=_locationRequester;
@property(nonatomic) __weak id <SABluetoothScanRequestProtocol> bluetoothScanner; // @synthesize bluetoothScanner=_bluetoothScanner;
@property(retain, nonatomic) id <SATimeServiceProtocol> clock; // @synthesize clock=_clock;
- (void)didChangeTravelTypeFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (_Bool)_deviceIsWatch:(id)arg1;
- (void)alarmFiredForUUID:(id)arg1;
- (void)requestScanIfNeeded;
- (void)ingestTAEvent:(id)arg1;
- (void)_scheduleNextAlarmForScanAfterDate:(id)arg1;
- (void)_updateWithYouStatusOnAdvBufferEmptyEvent:(id)arg1;
- (void)_updateAllWithYouStatusOnScanEndedEvent:(id)arg1;
- (_Bool)_enoughTimeHasPassedSinceInitializationToMarkNotWithYouForDeviceType:(unsigned long long)arg1;
- (unsigned long long)_finalizeToBeVerifiedStatus:(unsigned long long)arg1;
- (_Bool)_isStatusBitSetForRelatedDeviceWithShiftIndex:(unsigned long long)arg1 fromAdvertisement:(id)arg2;
- (_Bool)_isValidPartID:(long long)arg1;
- (void)_updateWithYouStatusOfRelatedDevices:(id)arg1;
- (void)_updateWithYouStatusIfNecessaryOnAdvertisement:(id)arg1;
- (_Bool)_isRecentEnoughAdvertisement:(id)arg1 forCurrentDate:(id)arg2;
- (double)_maxAgeOfWithYouAdvertisementForDeviceType:(unsigned long long)arg1;
- (void)_updateWithYouStatusIfNecessaryOnConnectionEvent:(id)arg1;
- (void)_notifyAllClientsOfWithYouStatusUpdate:(unsigned long long)arg1 forDeviceWithUUID:(id)arg2;
- (void)removeClient:(id)arg1;
- (void)addClient:(id)arg1;
- (void)pausePeriodicScan;
- (void)resumePeriodicScan;
- (_Bool)isPeriodicScansAllowed;
- (unsigned long long)statusForDeviceWithUUID:(id)arg1;
- (void)resetAllWithYouStatusAndScanStates;
- (_Bool)_isOnlyMonitoringLeashOnlyDevices;
- (void)forceUpdateWithYouStatusWithShortScan;
- (void)forceUpdateWithYouStatus;
- (id)initWithBluetoothScanner:(id)arg1 locationRequester:(id)arg2 deviceRecord:(id)arg3 clock:(id)arg4;

@end

