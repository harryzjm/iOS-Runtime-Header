//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct DefaultAnalyzerFactory;

struct EmbedderOrchestrator;

struct EmbedderRequest {
    struct Tokenisation _field1;
};

struct EmbedderResponse {
    struct EmbeddingTensor _field1;
    struct Tokenisation _field2;
};

struct EmbeddingTensor {
    struct vector<float, std::allocator<float>> _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    basic_string_05660eb3 _field5;
};

struct Keyset {
    struct scoped_array<marisa::scoped_array<char>> base_blocks_;
    unsigned long long base_blocks_size_;
    unsigned long long base_blocks_capacity_;
    struct scoped_array<marisa::scoped_array<char>> extra_blocks_;
    unsigned long long extra_blocks_size_;
    unsigned long long extra_blocks_capacity_;
    struct scoped_array<marisa::scoped_array<marisa::Key>> key_blocks_;
    unsigned long long key_blocks_size_;
    unsigned long long key_blocks_capacity_;
    char *ptr_;
    unsigned long long avail_;
    unsigned long long size_;
    unsigned long long total_length_;
};

struct LoudsTrie;

struct NLv4ParserRequest;

struct Token;

struct Tokenisation {
    basic_string_05660eb3 _field1;
    basic_string_05660eb3 _field2;
    struct vector<nlv4_inference_orchestrator::orchestration::Token, std::allocator<nlv4_inference_orchestrator::orchestration::Token>> _field3;
};

struct Tokenizer;

struct Trie {
    struct scoped_ptr<marisa::grimoire::trie::LoudsTrie> trie_;
};

struct ULocale;

struct UsoIdentifier;

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct scoped_array<marisa::scoped_array<char>> {
    void *array_;
};

struct scoped_array<marisa::scoped_array<marisa::Key>> {
    void *array_;
};

struct scoped_ptr<marisa::grimoire::trie::LoudsTrie> {
    struct LoudsTrie *ptr_;
};

struct unique_ptr<float [][193], std::default_delete<float [][193]>> {
    struct __compressed_pair<float (*)[193], std::default_delete<float [][193]>> {
        float (*__value_)[193];
    } __ptr_;
};

struct unique_ptr<marisa::Trie, std::default_delete<marisa::Trie>> {
    struct __compressed_pair<marisa::Trie *, std::default_delete<marisa::Trie>> {
        struct Trie *__value_;
    } __ptr_;
};

struct unique_ptr<morphun::Tokenizer, std::default_delete<morphun::Tokenizer>> {
    struct __compressed_pair<morphun::Tokenizer *, std::default_delete<morphun::Tokenizer>> {
        struct Tokenizer *__value_;
    } __ptr_;
};

struct unique_ptr<morphun::analysis::DefaultAnalyzerFactory, std::default_delete<morphun::analysis::DefaultAnalyzerFactory>> {
    struct __compressed_pair<morphun::analysis::DefaultAnalyzerFactory *, std::default_delete<morphun::analysis::DefaultAnalyzerFactory>> {
        struct DefaultAnalyzerFactory *__value_;
    } __ptr_;
};

struct unique_ptr<morphun::util::ULocale, std::default_delete<morphun::util::ULocale>> {
    struct __compressed_pair<morphun::util::ULocale *, std::default_delete<morphun::util::ULocale>> {
        struct ULocale *__value_;
    } __ptr_;
};

struct unique_ptr<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator, std::default_delete<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator>> {
    struct __compressed_pair<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *, std::default_delete<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator>> {
        struct EmbedderOrchestrator *__value_;
    } __ptr_;
};

struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> {
    struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> {
        struct UsoIdentifier *_field1;
    } _field1;
};

struct unique_ptr<sirinluinternalnlv4_parser::NLv4ParserRequest, std::default_delete<sirinluinternalnlv4_parser::NLv4ParserRequest>> {
    struct __compressed_pair<sirinluinternalnlv4_parser::NLv4ParserRequest *, std::default_delete<sirinluinternalnlv4_parser::NLv4ParserRequest>> {
        struct NLv4ParserRequest *_field1;
    } _field1;
};

struct vector<float, std::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<nlv4_inference_orchestrator::orchestration::Token, std::allocator<nlv4_inference_orchestrator::orchestration::Token>> {
    struct Token *_field1;
    struct Token *_field2;
    struct __compressed_pair<nlv4_inference_orchestrator::orchestration::Token *, std::allocator<nlv4_inference_orchestrator::orchestration::Token>> {
        struct Token *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_05660eb3;

typedef struct unique_ptr<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator, std::default_delete<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator>> {
    struct __compressed_pair<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *, std::default_delete<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator>> {
        struct EmbedderOrchestrator *__value_;
    } __ptr_;
} unique_ptr_9a13c97a;

typedef struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> {
    struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> {
        struct UsoIdentifier *_field1;
    } _field1;
} unique_ptr_191f5ca4;

typedef struct unique_ptr<sirinluinternalnlv4_parser::NLv4ParserRequest, std::default_delete<sirinluinternalnlv4_parser::NLv4ParserRequest>> {
    struct __compressed_pair<sirinluinternalnlv4_parser::NLv4ParserRequest *, std::default_delete<sirinluinternalnlv4_parser::NLv4ParserRequest>> {
        struct NLv4ParserRequest *_field1;
    } _field1;
} unique_ptr_7e96dec3;

